# 合并的代码文件
# 生成时间: 2025-05-21 17:46:16
# 源目录: /Users/houbingqian/Documents/GitHub/workflow-fe



================================================================================
# 文件: package.json
# 行数: 42
================================================================================

{
  "name": "react",
  "version": "1.0.0",
  "description": "",
  "keywords": [],
  "main": "src/index.tsx",
  "dependencies": {
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-scripts": "5.0.1",
    "reactflow": "11.7.4",
    "@rjsf/core": "5.12.1",
    "@rjsf/utils": "5.12.1",
    "@rjsf/validator-ajv8": "5.12.1",
    "semantic-ui-react": "2.1.4",
    "semantic-ui-css": "2.5.0",
    "tslib": "2.8.1",
    "@rjsf/semantic-ui": "5.12.1",
    "react-ace": "14.0.1",
    "react-markdown": "8.0.7",
    "react-router-dom": "7.6.0",
    "antd": "5.25.2"
  },
  "devDependencies": {
    "@types/react": "18.2.0",
    "@types/react-dom": "18.2.0",
    "loader-utils": "3.2.1",
    "typescript": "5.3.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  },
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ]
}


================================================================================
# 文件: public/index.html
# 行数: 43
================================================================================

<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta name="theme-color" content="#000000">
	<!--
      manifest.json provides metadata used when your web app is added to the
      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/
    -->
	<link rel="manifest" href="%PUBLIC_URL%/manifest.json">
	<link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">
	<!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
	<title>React App</title>
</head>

<body>
	<noscript>
		You need to enable JavaScript to run this app.
	</noscript>
	<div id="root"></div>
	<!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>


================================================================================
# 文件: src/kv-table.css
# 行数: 126
================================================================================

/* kv-table.css - 为KVTableField组件提供样式 */

/* 表格整体样式 */
.kv-table {
  border: 1px solid #e0e0e0 !important;
  border-radius: 4px !important;
  overflow: hidden;
  margin-bottom: 16px !important;
}

/* 表头样式 */
.kv-table .ui.table thead th {
  background-color: #f8f9fa;
  color: #495057;
  font-weight: 600;
  font-size: 13px;
  padding: 10px !important;
  border-bottom: 1px solid #e0e0e0;
}

/* 表格行样式 */
.kv-table .ui.table tr td {
  padding: 8px 10px !important;
  border-top: 1px solid #f0f0f0;
}

/* 偶数行背景色 */
.kv-table .ui.table tr:nth-child(even) {
  background-color: #fafafa;
}

/* 表格行悬浮效果 */
.kv-table .ui.table tr:hover {
  background-color: #f0f7ff !important;
}

/* 禁用行样式 */
.kv-table .disabled-row {
  background-color: #f8f8f8 !important;
  color: #888;
}

/* 禁用行输入框样式 */
.kv-table .disabled-input input {
  color: #888 !important;
  text-decoration: line-through;
  opacity: 0.7;
}

/* 透明输入框样式 */
.kv-table .ui.transparent.input {
  width: 100%;
}

/* 输入框聚焦时的样式 */
.kv-table .ui.transparent.input > input:focus {
  background-color: #f0f7ff;
  border-radius: 3px;
}

/* 删除按钮样式 */
.kv-table .ui.button.tiny {
  padding: 5px !important;
  margin: 0 !important;
}

/* 确保垃圾桶图标居中 */
.kv-table .ui.button.tiny .icon {
  margin: 0 !important;
}

/* 字段标题样式 */
.kv-table-field .field-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  font-size: 14px;
  color: #333;
}

/* 确保启用复选框垂直居中 */
.kv-table .ui.checkbox {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  height: 100% !important;
  width: 100% !important;
  margin: 0 !important;
  padding: 0 !important;
}

/* 添加特定的复选框单元格类 */
.kv-table .checkbox-cell {
  vertical-align: middle !important;
  text-align: center !important;
  padding: 0 !important;
  height: 100% !important;
}

/* 添加特定的居中复选框类 */
.kv-table .centered-checkbox {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  width: 100% !important;
  height: 100% !important;
  margin: 0 !important;
  padding: 8px 0 !important;
}

/* 添加响应式样式，确保在小屏幕上仍然可用 */
@media (max-width: 768px) {
  .kv-table .ui.table thead th {
    padding: 8px 6px !important;
    font-size: 12px;
  }

  .kv-table .ui.table tr td {
    padding: 6px !important;
  }

  .kv-table .ui.button.tiny {
    padding: 4px !important;
  }
}



================================================================================
# 文件: src/resizable-panel.css
# 行数: 94
================================================================================

/* resizable-panel.css - 简化版，确保拖拽正常工作 */

/* 可调整大小的属性面板容器 */
.resizable-properties-panel {
  position: relative;
  background-color: #ffffff;
  height: 100%;
  overflow: hidden;
  box-shadow: -2px 0 10px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: column;
  border-left: 1px solid #e0e0e0;
  min-width: 400px;
  max-width: 800px;
  z-index: 100;
}

/* 调整大小过程中样式 */
.resizable-properties-panel.resizing {
  user-select: none;
}

/* 拖拽手柄 */
.resize-handle {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 10px;
  cursor: col-resize;
  z-index: 200;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* 拖拽手柄中的线条 */
.handle-line {
  width: 2px;
  height: 50px;
  background-color: #aaa;
  border-radius: 1px;
}

/* 拖拽手柄悬停效果 */
.resize-handle:hover .handle-line {
  background-color: #4b9fd5;
}

/* 面板标题 */
.panel-header {
  display: flex;
  flex-direction: column;
  padding: 14px 20px;
  border-bottom: 1px solid #eaeaea;
  background: linear-gradient(to right, #f8f9fa, #ffffff);
  z-index: 10;
}

.panel-header h3 {
  font-size: 16px;
  font-weight: 600;
  color: #2c3e50;
  margin: 0;
  letter-spacing: 0.5px;
}

/* 面板内容区域 */
.panel-content {
  flex: 1;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 15px 20px;
}

/* 自定义滚动条 */
.panel-content::-webkit-scrollbar {
  width: 8px;
}

.panel-content::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.panel-content::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.panel-content::-webkit-scrollbar-thumb:hover {
  background: #a0a0a0;
}



================================================================================
# 文件: src/styles.css
# 行数: 1115
================================================================================

/* styles.css - 完整文件 */

/* ========== 基础应用样式 ========== */
.App {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  display: flex;
  flex-direction: column;
  height: 100vh;
  color: #333;
  overflow: hidden;
}

.app-header {
  padding: 10px 15px;
  background-color: #4285f4;
  color: white;
}

.app-header h1 {
  margin: 0;
  font-size: 20px;
}

/* ========== 工作流编辑器布局 ========== */
.workflow-editor {
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
}

/* ========== 工具栏样式 ========== */
.toolbar {
  background-color: #f8f9fa;
  border-bottom: 1px solid #e9ecef;
  padding: 10px 15px;
  display: flex;
  align-items: center;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  z-index: 100;
}

.workflow-name-input {
  font-size: 16px;
  padding: 6px 10px;
  border: 1px solid #ced4da;
  border-radius: 4px;
  margin-right: 15px;
  flex: 1;
  max-width: 300px;
}

.toolbar-button {
  background-color: #fff;
  border: 1px solid #ced4da;
  border-radius: 4px;
  padding: 6px 12px;
  margin-right: 8px;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s;
}

.toolbar-button:hover {
  background-color: #f1f3f5;
}

.toolbar-button.primary {
  background-color: #4285f4;
  color: white;
  border-color: #4285f4;
}

.toolbar-button.primary:hover {
  background-color: #2a75f3;
}

.toolbar-button.warning {
  background-color: #f8f9fa;
  color: #e74c3c;
  border-color: #e74c3c;
}

.toolbar-button.warning:hover {
  background-color: #fdf1f0;
}

/* ========== 主内容容器 ========== */
.container {
  display: flex;
  flex: 1;
  overflow: hidden;
  position: relative; /* 确保子元素的定位正确 */
}

/* ========== 侧边栏样式 ========== */
.sidebar {
  width: 240px;
  background-color: #f8f9fa;
  padding: 15px;
  border-right: 1px solid #e9ecef;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
}

.sidebar h3 {
  font-size: 16px;
  margin-top: 15px;
  margin-bottom: 12px;
  padding-bottom: 8px;
  border-bottom: 1px solid #e9ecef;
  color: #495057;
  font-weight: 600;
}

.sidebar h3:first-child {
  margin-top: 0;
}

/* ========== 节点模板样式 ========== */
.node-template {
  background-color: #fff;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  padding: 10px 12px;
  margin-bottom: 10px;
  cursor: grab;
  user-select: none;
  transition: all 0.2s;
  font-size: 14px;
  position: relative;
  display: flex;
  align-items: center;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.node-template:hover {
  background-color: #f1f3f5;
  border-color: #ced4da;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

/* 节点模板图标容器 */
.template-icon {
  width: 24px;
  height: 24px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 10px;
  color: white;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);
}

/* 为模板图标应用与节点相同的颜色 */
.node-start .template-icon {
  background-color: #27ae60;
}
.node-end .template-icon {
  background-color: #e74c3c;
}
.node-http .template-icon {
  background-color: #3498db;
}
.node-sql .template-icon {
  background-color: #f39c12;
}
.node-redis .template-icon {
  background-color: #9b59b6;
}
.node-switch .template-icon {
  background-color: #1abc9c;
}
.loop-node .template-icon {
  background-color: #3498db;
}
.node-script .template-icon {
  background-color: #34495e;
}
.node-variable .template-icon {
  background-color: #f1c40f;
}
.node-llm .template-icon {
  background-color: #8a2be2; /* 紫色 */
}

/* 调整节点模板内的文本 */
.node-template span {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* ========== 工作流区域样式 ========== */
.workflow-area {
  flex: 1;
  height: 100%;
  position: relative;
  background-color: #f0f0f0;
  min-width: 0; /* 确保区域可以被压缩 */
  overflow: hidden; /* 防止内容溢出 */
}

/* ========== ReactFlow 样式定制 ========== */
/* 修改画布背景色 */
.react-flow__renderer {
  background-color: #f0f0f0;
}

/* 设置ReactFlow容器的背景为横纵相间的点 */
.alternate-dots-flow .react-flow__pane {
  background-color: #f0f0f0;
  background-image: radial-gradient(#c0c0c0 1px, transparent 1px);
  background-size: 16px 16px;
}

/* 隐藏ReactFlow默认的背景组件 */
.react-flow__background {
  display: none;
}

/* 确保ReactFlow正确填充可用空间 */
.react-flow {
  width: 100%;
  height: 100%;
}

/* 优化节点拖拽的视觉效果 */
.react-flow__node.dragging {
  z-index: 1000 !important;
}

/* 确保ReactFlow控件在可调整面板上方显示 */
.react-flow__controls {
  z-index: 15 !important;
}

/* 提高调整面板的层级，确保在其他元素之上 */
.resizable-properties-panel {
  z-index: 100;
}

/* ========== 属性面板样式 ========== */
/* 移除旧的属性面板样式 */
.properties-panel {
  display: none; /* 完全隐藏旧面板 */
}

/* 确保工作流区域中的指示器不受面板调整影响 */
.simple-zoom-indicator {
  z-index: 15 !important;
}

/* ========== 自定义节点样式 ========== */
.custom-node {
  width: 220px;
  padding: 0;
  position: relative;
  display: flex;
  flex-direction: column;
  background-color: #ffffff;
  z-index: 10;
  border: none;
  border-radius: 8px;
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.15s ease, box-shadow 0.15s ease;
}

.custom-node:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* 节点标题栏 */
.node-header {
  height: 34px;
  min-height: 34px;
  margin: 0;
  padding: 0 10px 0 6px;
  display: flex;
  align-items: center;
  width: 100%;
  box-sizing: border-box;
  position: relative;
  z-index: 11;
}

.node-title {
  padding-left: 36px;
  line-height: 34px;
  font-size: 14px;
  height: 34px;
  flex: 1;
  margin: 0;
  display: flex;
  align-items: center;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  font-weight: 600;
}

/* 节点图标 */
.node-icon {
  position: absolute;
  left: 12px;
  top: 50%;
  transform: translateY(-50%);
  width: 20px;
  height: 20px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 12px;
  font-weight: bold;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  z-index: 20;
}

/* 确保图标在节点中的可见性 */
.node-icon svg {
  width: 16px;
  height: 16px;
}

/* 节点内容区域 */
.node-content {
  padding: 8px 10px;
  font-size: 13px;
  color: #555;
  border-top: 1px solid #f0f0f0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.variable-item {
  margin-bottom: 4px;
  font-size: 13px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* 节点左侧彩色指示条 */
.custom-node::after {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 5px;
  border-top-left-radius: 8px;
  border-bottom-left-radius: 8px;
  z-index: 2;
}

/* 节点类型特定的左侧指示条和图标背景颜色 */
.node-start::after,
.node-start .node-icon {
  background-color: #27ae60;
}
.node-end::after,
.node-end .node-icon {
  background-color: #e74c3c;
}
.node-http::after,
.node-http .node-icon {
  background-color: #3498db;
}
.node-sql::after,
.node-sql .node-icon {
  background-color: #f39c12;
}
.node-redis::after,
.node-redis .node-icon {
  background-color: #9b59b6;
}
.node-switch::after,
.node-switch .node-icon {
  background-color: #1abc9c;
}
.loop-node::after,
.loop-node .node-icon {
  background-color: #3498db;
}
.node-script::after,
.node-script .node-icon {
  background-color: #34495e;
}
.node-variable::after,
.node-variable .node-icon {
  background-color: #f1c40f;
}
.node-llm::after,
.node-llm .node-icon {
  background-color: #8a2be2; /* 紫色 */
}

/* LLM节点样式 */
.node-llm .node-content {
  font-size: 12px;
  color: #555;
  padding: 8px 10px;
  border-top: 1px solid #f0f0f0;
}

.node-llm .prompt-preview {
  font-style: italic;
  color: #666;
  font-size: 11px;
  margin-top: 4px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 200px;
}

/* ========== 分支节点特殊样式 ========== */
.switch-cases-container {
  padding: 6px 10px;
  font-size: 12px;
  border-top: 1px solid #f0f0f0;
}

/* 结构化分支行设置 */
.switch-case-row,
.switch-default-row {
  position: relative;
  padding: 4px 6px;
  margin: 3px 0;
  border-radius: 3px;
  background-color: #f8f9fa;
  height: 14px;
  display: flex;
  align-items: center;
}

.switch-case-condition,
.switch-default-label {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 20px;
  line-height: 14px;
}

/* 分支节点连接点样式 */
.switch-case-row .case-handle,
.switch-default-row .default-handle {
  right: 0 !important;
  top: 50% !important;
  transform: translate(50%, -50%) !important;
  position: absolute !important;
  z-index: 30 !important;
}

/* 确保分支连接点位置正确 */
.react-flow__node .react-flow__handle.case-handle,
.react-flow__node .react-flow__handle.default-handle {
  right: 0 !important;
  top: 50% !important;
  transform: translate(50%, -50%) !important;
  position: absolute !important;
}

/* ========== 循环节点样式 ========== */
/* 循环节点入口点指示器样式 */
.loop-entry-indicator {
  position: absolute;
  top: 20px;
  left: 20px;
  z-index: 15 !important;
  pointer-events: none;
}

/* 入口点样式 */
.entry-point-rectangle {
  width: 36px;
  height: 28px;
  border-radius: 6px;
  background-color: #3498db;
  border: 2px solid #2980b9;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: relative;
}

/* 入口连接点样式 */
.entry-handle {
  width: 9px !important;
  height: 9px !important;
  background-color: #4caf50 !important;
  border: 1px solid white !important;
  box-shadow: 0 0 2px rgba(0, 0, 0, 0.2) !important;
  z-index: 2000 !important;
  pointer-events: all !important;
}

/* 出口连接点位置 */
.entry-handle-out {
  right: 0px !important;
}

/* 循环节点主容器 */
.loop-container {
  display: flex;
  flex-direction: column;
  position: relative;
  min-width: 320px !important;
  box-sizing: border-box;
  will-change: transform, width, height;
}

/* 非调整状态和调整大小状态样式 */
.loop-container:not(.resizing) {
  transition: none !important;
}

.loop-container.resizing {
  opacity: 1 !important;
  z-index: 20 !important;
  transition: none !important;
  transform: none !important;
  animation: none !important;
}

/* 子流程区域样式 */
.loop-subflow-area {
  display: block !important;
  margin: 0 8px 0px 14px !important;
  border: 1px solid #e0e0e0 !important;
  border-radius: 6px !important;
  background-color: #f0f0f0 !important;
  position: relative !important;
  overflow: hidden !important;
  box-sizing: border-box !important;
  will-change: width, height !important;
  z-index: 5 !important;
}

/* 循环节点子流程背景点阵样式 */
.loop-background-dots {
  background-color: #f0f0f0 !important;
  background-image: radial-gradient(#c0c0c0 1px, transparent 1px) !important;
  background-size: 16px 16px !important;
  height: 100% !important;
  width: 100% !important;
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  z-index: 1 !important;
}

/* 循环节点底部固定高度的白色区域 */
.loop-footer-area {
  height: 20px;
  width: calc(100% - 22px);
  background-color: white;
  margin: 0 10px 0 12px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  margin-bottom: 8px;
  box-sizing: border-box;
}

/* 自定义调整大小手柄 */
.custom-resize-handle {
  position: absolute;
  right: 4px;
  bottom: 4px;
  width: 16px;
  height: 16px;
  border: 2px solid #4c9aff;
  border-top: none;
  border-left: none;
  border-bottom-right-radius: 6px;
  pointer-events: none;
  z-index: 11 !important;
  opacity: 1;
  background-color: transparent;
  cursor: nwse-resize;
}

/* ========== 连接点样式 ========== */
.react-flow__handle {
  width: 9px !important;
  height: 9px !important;
  background-color: #4caf50 !important;
  border: 1px solid white !important;
  box-shadow: 0 0 2px rgba(0, 0, 0, 0.2) !important;
  z-index: 2000 !important;
  transition: none !important;
  will-change: transform;
}

/* 左侧连接点位置 */
.react-flow__handle-left {
  left: 0 !important;
  transform: translate(-50%, -50%) !important;
}

/* 右侧连接点位置 */
.react-flow__handle-right {
  right: 0 !important;
  transform: translate(50%, -50%) !important;
}

/* 连接点悬停效果 */
.react-flow__handle:hover {
  background-color: #45a049 !important;
}

.react-flow__handle-left:hover {
  transform: scale(1.1) translate(-50%, -50%) !important;
}

.react-flow__handle-right:hover {
  transform: scale(1.1) translate(50%, -50%) !important;
}

/* 调整大小时连接点的过渡效果 */
.resizing .react-flow__handle {
  transition: none !important;
}

/* ========== 连线样式优化 ========== */
/* 关键的连线可见性修复 */
.react-flow__edges {
  z-index: 1000 !important;
}

.react-flow__edge {
  z-index: 1000 !important;
  pointer-events: all !important;
  visibility: visible !important;
  opacity: 1 !important;
}

/* 修改默认线条样式 */
.react-flow__edge-path {
  stroke: #aaaaaa !important; /* 默认灰色 */
  stroke-width: 1.2px !important;
  stroke-opacity: 1 !important;
}

/* 添加选中状态样式 */
.react-flow__edge.selected .react-flow__edge-path {
  stroke: #1a73e8 !important; /* 选中后蓝色 */
  stroke-width: 2px !important;
}

/* 确保选中状态的边在其他边上方 */
.react-flow__edge.selected {
  z-index: 1001 !important;
}

/* 确保节点层级低于连线 */
.react-flow__nodes {
  z-index: 10 !important;
}

/* 箭头样式 */
.react-flow__edge-marker path {
  transform: scale(0.6);
}

/* ========== ReactFlow特定功能样式 ========== */
/* 节点选中状态 */
.react-flow__node.selected .custom-node {
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.12) !important;
}

/* 禁用节点边框调整功能 */
.loop-node .react-flow__node-resizer .react-flow__resize-control:not(.handle) {
  pointer-events: none !important;
  opacity: 0 !important;
}

/* 调整大小控制器 */
.react-flow__resize-control.handle {
  width: 20px !important;
  height: 20px !important;
  right: 0 !important;
  bottom: 0 !important;
  background-color: transparent !important;
  border: none !important;
  cursor: nwse-resize !important;
  pointer-events: all !important;
  z-index: 101 !important;
}

.react-flow__resize-control {
  z-index: 101 !important;
}

/* 循环节点尺寸调整控制 */
.loop-node .react-flow__resize-control {
  right: 4px !important;
  bottom: 4px !important;
  width: 20px !important;
  height: 20px !important;
  pointer-events: all !important;
  z-index: 101 !important;
}

.loop-node .react-flow__node-resizer {
  pointer-events: none !important;
  opacity: 0 !important;
  border: none !important;
}

/* ========== 工作流JSON显示区域 ========== */
#json-display {
  height: 160px;
  min-height: 160px;
  max-height: 160px;
  border-top: 1px solid #e9ecef;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  padding: 0;
}

#json-display h3 {
  padding: 10px 15px;
  margin: 0;
  font-size: 14px;
  color: #495057;
  background-color: #f8f9fa;
}

#workflow-json {
  flex: 1;
  resize: none;
  border: none;
  padding: 10px 15px;
  font-family: "Courier New", monospace;
  font-size: 12px;
  line-height: 1.4;
}

/* ========== ReactFlow控件样式 ========== */
.react-flow__minimap {
  border: 1px solid #e9ecef;
  border-radius: 4px;
  background-color: white;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  z-index: 5;
  position: absolute;
  bottom: 10px;
  right: 10px;
}

.react-flow__controls {
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
  border-radius: 6px;
  overflow: hidden;
  z-index: 5;
  background-color: white;
  transition: opacity 0.3s ease;
  position: absolute;
  bottom: 10px;
  left: 10px;
}

.workflow-minimap {
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15) !important;
  border-radius: 6px !important;
  z-index: 5 !important;
}

.react-flow__controls-button {
  background-color: white !important;
  border: none !important;
  border-bottom: 1px solid #e0e0e0 !important;
  color: #555 !important;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.react-flow__controls-button:hover {
  background-color: #f5f5f5 !important;
  color: #3498db !important;
}

.react-flow__controls-button svg {
  width: 14px;
  height: 14px;
}

.react-flow__controls-button:last-child {
  border-bottom: none !important;
}

/* ========== 缩放指示器样式 ========== */
.simple-zoom-indicator {
  position: absolute;
  left: 44px;
  bottom: 10px;
  background-color: white;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  border-radius: 4px;
  padding: 5px 8px;
  font-size: 12px;
  color: #333;
  font-weight: 500;
  z-index: 5;
  user-select: none;
  min-width: 40px;
  text-align: center;
  transition: opacity 0.2s ease;
  font-variant-numeric: tabular-nums;
}

.simple-zoom-indicator:hover {
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
}

/* ========== 分支节点特殊样式扩展 ========== */
/* 分支条件容器 - 采用弹性布局 */
.switch-cases-container {
  display: flex !important;
  flex-direction: column !important;
  padding: 6px 10px 5px 10px !important;
  font-size: 12px;
  border-top: 1px solid #f0f0f0;
  position: relative;
}

/* 分支条件列表 */
.switch-cases {
  display: flex !important;
  flex-direction: column !important;
  width: 100%;
  margin-bottom: 0 !important;
}

/* 所有分支条件行的通用样式 */
.switch-case-row,
.switch-default-row {
  position: relative !important;
  padding: 10px 12px !important;
  margin: 3px 0 !important;
  border-radius: 4px !important;
  background-color: #f9fafc !important;
  border: none !important; /* 移除边框 */
  box-shadow: none !important; /* 移除阴影 */
  min-height: 26px !important;
  display: flex !important;
  align-items: center !important;
  box-sizing: border-box !important;
}

/* 默认分支的特殊样式 - 修改边距 */
.switch-default-row {
  margin-bottom: 12px !important;
}

/* React Flow节点选择器 - 确保高度足够 */
.react-flow__node.react-flow__node-SWITCH,
.react-flow__node.react-flow__node-SWITCH.nopan,
.react-flow__node.react-flow__node-SWITCH.selected,
.react-flow__node.react-flow__node-SWITCH.selectable {
  height: auto !important;
  min-height: 140px !important;
  padding-bottom: 50px !important;
  box-sizing: border-box !important;
}

/* 自定义分支节点容器 */
.custom-node.node-switch {
  position: relative !important;
  height: 100% !important;
  padding-bottom: 50px !important;
  min-height: 120px !important;
  box-sizing: border-box !important;
  display: flex !important;
  flex-direction: column !important;
}

/* 常规分支条件行 */
.switch-case-row,
.switch-default-row {
  position: relative !important;
  padding: 10px 12px !important;
  margin: 3px 0 !important;
  border-radius: 4px !important;
  background-color: #f9fafc !important;
  border: 1px solid #dde2e6 !important;
  min-height: 26px !important;
  display: flex !important;
  align-items: center !important;
  box-sizing: border-box !important;
}

/* 分支条件文本 */
.switch-case-condition,
.switch-default-label {
  flex: 1 !important;
  white-space: nowrap !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  padding: 2px 0 !important;
  font-size: 12px !important;
}

/* "增加条件"按钮样式 - 向左移动3px */
.switch-add-button-float {
  /* 尺寸 */
  width: 28px !important;
  height: 28px !important;
  min-width: 28px !important;
  min-height: 28px !important;
  max-width: 28px !important;
  max-height: 28px !important;

  /* 样式 */
  border-radius: 50% !important;
  background-color: #1abc9c !important;
  color: white !important;
  border: none !important;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2) !important;

  /* 内容居中 */
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;

  /* 定位 - 向左移动3px */
  position: absolute !important;
  right: 18px !important; /* 从15px增加到18px，向左移动3px */
  bottom: 15px !important;
  z-index: 100 !important;

  /* 其他属性 */
  padding: 0 !important;
  margin: 0 !important;
  cursor: pointer !important;
  transform: none !important;
  overflow: visible !important;

  /* 文字样式 - 增强"+"符号的可见性 */
  font-size: 24px !important;
  font-weight: bold !important;
  line-height: 24px !important;
  text-align: center !important;
}

/* 添加伪元素，使"+"符号更清晰 */
.switch-add-button-float:after {
  content: "+" !important;
  color: white !important;
  font-size: 20px !important; /* 稍微减小字体大小 */
  font-weight: bold !important;
  position: absolute !important;
  top: 45% !important; /* 向上微调 */
  left: 50% !important;
  transform: translate(-50%, -50%) !important;
  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2) !important;
  line-height: 18px !important; /* 添加行高控制 */
  padding-bottom: 2px !important; /* 底部微调 */
}

/* 增加条件按钮悬停效果 */
.switch-add-button-float:hover {
  background-color: #16a085 !important;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3) !important;
  transform: translateY(-2px) !important;
  transition: transform 0.2s ease, box-shadow 0.2s ease !important;
}

/* 删除分支按钮样式 - 红色圆圈里面是一个白色的减号 - 更小的尺寸 */
.delete-case-button {
  /* 尺寸 - 从22px减小到18px */
  width: 18px !important;
  height: 18px !important;
  min-width: 18px !important;
  min-height: 18px !important;

  /* 样式 */
  border-radius: 50% !important;
  background-color: #e74c3c !important; /* 红色背景 */
  border: none !important;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2) !important;

  /* 定位 */
  position: relative !important;
  margin-left: 8px !important;

  /* 其他属性 */
  padding: 0 !important;
  cursor: pointer !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  overflow: visible !important;
}

/* 添加白色减号 - 调整尺寸 */
.delete-case-button::before {
  content: "" !important;
  position: absolute !important;
  width: 10px !important; /* 从12px减小到10px */
  height: 2px !important;
  background-color: white !important;
  top: 50% !important;
  left: 50% !important;
  transform: translate(-50%, -50%) !important;
  box-shadow: 0 0 1px rgba(0, 0, 0, 0.3) !important; /* 添加细微阴影使减号更清晰 */
}

/* 鼠标悬停效果 */
.delete-case-button:hover {
  background-color: #c0392b !important; /* 深红色 */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
  transform: scale(1.05) !important;
  transition: all 0.2s ease !important;
}

/* 动态高度调整 - 处理增加条件的情况 */
/* 检测到多个案例时增加节点高度 */
.switch-cases-container:has(.switch-case-row:nth-child(3)) ~ .react-flow__node {
  min-height: 160px !important;
}

.switch-cases-container:has(.switch-case-row:nth-child(4)) ~ .react-flow__node {
  min-height: 190px !important;
}

.switch-cases-container:has(.switch-case-row:nth-child(5)) ~ .react-flow__node {
  min-height: 220px !important;
}

/* 确保节点选中状态下维持样式 */
.react-flow__node.selected .custom-node.node-switch,
.react-flow__node.nopan .custom-node.node-switch,
.react-flow__node.selectable .custom-node.node-switch {
  padding-bottom: 50px !important;
}

/* 响应式调整 */
@media (max-width: 1280px) {
  .react-flow__node.react-flow__node-SWITCH,
  .react-flow__node.react-flow__node-SWITCH.nopan,
  .react-flow__node.react-flow__node-SWITCH.selectable,
  .react-flow__node.react-flow__node-SWITCH.selected {
    padding-bottom: 40px !important;
    min-height: 130px !important;
  }

  .custom-node.node-switch {
    padding-bottom: 40px !important;
    min-height: 110px !important;
  }

  /* 响应式下增加条件按钮 */
  .switch-add-button-float {
    width: 26px !important;
    height: 26px !important;
    min-width: 26px !important;
    min-height: 26px !important;
    max-width: 26px !important;
    max-height: 26px !important;
    right: 16px !important; /* 从12px改为16px，保持相对位置 */
    bottom: 10px !important;
  }

  .switch-add-button-float:after {
    font-size: 20px !important;
  }

  /* 响应式下删除分支按钮 */
  .delete-case-button {
    width: 16px !important; /* 从20px减小到16px */
    height: 16px !important;
    min-width: 16px !important;
    min-height: 16px !important;
  }

  .delete-case-button::before {
    width: 8px !important; /* 从10px减小到8px */
  }

  .switch-default-row {
    margin-bottom: 12px !important;
  }
}

/* 检查是否有特定的选择器定义了边框 */
.react-flow__node .switch-case-row,
.react-flow__node .switch-default-row,
.node-switch .switch-case-row,
.node-switch .switch-default-row,
.custom-node .switch-case-row,
.custom-node .switch-default-row {
  border: none !important;
  box-shadow: none !important;
}



================================================================================
# 文件: src/GridBackground.js
# 行数: 47
================================================================================

import React from "react";

// 自定义横纵相间点状背景组件
const GridBackground = ({
  size = 16,
  color = "#c0c0c0",
  bgColor = "#f0f0f0",
}) => {
  // 使用SVG来创建横纵相间的点阵
  const svgPattern = `
    <svg width="${size * 2}" height="${
    size * 2
  }" xmlns="http://www.w3.org/2000/svg">
      <circle cx="${size / 2}" cy="${size / 2}" r="1" fill="${color}" />
      <circle cx="${size + size / 2}" cy="${
    size + size / 2
  }" r="1" fill="${color}" />
    </svg>
  `;

  // 将SVG转换为Base64格式的DataURL
  const svgBase64 = btoa(svgPattern);
  const dataUrl = `url("data:image/svg+xml;base64,${svgBase64}")`;

  return (
    <div
      className="grid-background"
      style={{
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        width: "100%",
        height: "100%",
        pointerEvents: "none",
        zIndex: -1,
        backgroundColor: bgColor,
        backgroundImage: dataUrl,
        backgroundRepeat: "repeat",
      }}
    />
  );
};

export default GridBackground;



================================================================================
# 文件: src/flow-list.css
# 行数: 389
================================================================================

/* flow-list.css - Improved version */

/* Main container */
.flow-list-app {
  display: flex;
  height: 100vh;
  width: 100%;
  overflow: hidden;
  background-color: #f8f9fa;
}

/* Sidebar styles */
.flow-list-sidebar {
  width: 220px;
  background-color: #ffffff;
  border-right: 1px solid #e6e8ed;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
  z-index: 100;
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
}

.sidebar-header {
  padding: 22px 20px;
  background: linear-gradient(to right, #4285f4, #5094f5);
  color: white;
}

.sidebar-header h2 {
  margin: 0;
  font-size: 20px;
  font-weight: 500;
  letter-spacing: 0.5px;
}

.sidebar-menu {
  padding: 12px 0 !important;
  border-radius: 0 !important;
  border: none !important;
  box-shadow: none !important;
  margin: 0 !important;
}

.sidebar-menu .item {
  padding: 14px 20px !important;
  border-radius: 0 !important;
  font-size: 15px !important;
  font-weight: 500 !important;
  color: #333 !important;
  transition: all 0.2s ease !important;
}

.sidebar-menu .item.active {
  background-color: #ecf3fe !important;
  color: #4285f4 !important;
  border-left: 3px solid #4285f4 !important;
  padding-left: 17px !important;
}

.sidebar-menu .item:hover {
  background-color: #f5f8ff !important;
}

.sidebar-menu .item i.icon {
  font-size: 1em !important;
  margin-right: 10px !important;
  color: inherit !important;
}

/* Main content styles */
.flow-list-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  height: 100%;
}

/* Page header */
.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 30px;
  background-color: #ffffff;
  border-bottom: 1px solid #e6e8ed;
}

.header-left h1 {
  margin: 0;
  font-size: 24px;
  font-weight: 500;
  color: #333;
}

.header-right .button {
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1) !important;
  transition: all 0.2s ease !important;
}

.header-right .button:hover {
  transform: translateY(-1px);
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15) !important;
}

/* Status message */
.status-message {
  margin: 0 30px !important;
  margin-top: 15px !important;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08) !important;
}

/* Main content area */
.main-content-area {
  flex: 1;
  padding: 0 30px 20px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

/* List toolbar */
.list-toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 20px 0;
}

.search-area {
  display: flex;
  align-items: center;
}

.search-input {
  width: 300px;
  margin-right: 12px !important;
}

.search-input input {
  border-radius: 6px !important;
}

.filter-dropdown {
  border-radius: 6px !important;
}

.flow-count {
  color: #666;
  font-size: 14px;
}

/* Table container */
.table-container {
  flex: 1;
  overflow: auto;
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
  position: relative;
  display: flex;
  flex-direction: column;
}

/* Table styles */
.flow-table {
  margin: 0 !important;
  border: none !important;
  border-radius: 8px !important;
  overflow: hidden;
  height: 100%;
}

.flow-table thead th {
  background-color: #f9fafc !important;
  color: #444 !important;
  font-weight: 600 !important;
  padding: 14px 16px !important;
  border-bottom: 1px solid #eaedf3 !important;
  position: sticky;
  top: 0;
  z-index: 10;
}

.flow-table tbody tr {
  transition: background-color 0.15s ease !important;
}

.flow-table tbody tr:hover {
  background-color: #f5f8ff !important;
}

.flow-table tbody td {
  padding: 14px 16px !important;
  vertical-align: middle !important;
}

.flow-name {
  display: flex;
  align-items: center;
  font-weight: 500;
  color: #333;
}

.flow-icon {
  margin-right: 10px !important;
  color: #4285f4 !important;
}

.flow-description {
  margin-top: 5px;
  font-size: 13px;
  color: #666;
  max-width: 350px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Status badge */
.status-badge {
  display: inline-block;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
  text-align: center;
  letter-spacing: 0.3px;
}

.status-badge.active {
  background-color: #e3f2fd;
  color: #1976d2;
}

.status-badge.draft {
  background-color: #fff8e1;
  color: #ff8f00;
}

/* Tags */
.tag-container {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
}

.flow-tag {
  display: inline-block;
  background-color: #f1f3f5;
  border-radius: 20px;
  padding: 3px 10px;
  font-size: 12px;
  color: #606770;
  transition: all 0.15s ease;
}

.flow-tag:hover {
  background-color: #e6e8ed;
}

/* Actions */
.flow-actions {
  display: flex;
  gap: 6px;
}

.action-button {
  box-shadow: none !important;
  background-color: #f8f9fa !important;
  color: #505a64 !important;
  border: 1px solid #e6e8ed !important;
  transition: all 0.15s ease !important;
}

.action-button:hover {
  background-color: #ffffff !important;
  transform: translateY(-1px);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08) !important;
}

/* Pagination */
.pagination-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  background-color: #f9fafc;
  border-top: 1px solid #eaedf3;
}

.pagination {
  margin-left: auto;
}

/* Empty state */
.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 60px 20px;
  color: #666;
  flex: 1;
}

.empty-state i.icon {
  opacity: 0.3;
  margin-bottom: 20px;
}

.empty-state p {
  font-size: 16px;
  margin-bottom: 20px;
}

/* Modals */
.create-flow-modal,
.delete-flow-modal {
  border-radius: 10px !important;
  overflow: hidden !important;
}

.create-flow-modal .header,
.delete-flow-modal .header {
  background-color: #f8f9fa !important;
  border-bottom: 1px solid #e6e8ed !important;
  padding: 16px 20px !important;
}

.warning-text {
  color: #f44336;
  font-size: 13px;
  margin-top: 10px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .flow-list-sidebar {
    width: 60px;
  }

  .sidebar-header h2 {
    display: none;
  }

  .sidebar-menu .item .text {
    display: none;
  }

  .sidebar-menu .item {
    padding: 15px !important;
    display: flex;
    justify-content: center;
  }

  .sidebar-menu .item i.icon {
    margin-right: 0 !important;
    font-size: 1.2em !important;
  }

  .page-header {
    padding: 15px 20px;
  }

  .main-content-area {
    padding: 0 15px 15px;
  }

  .list-toolbar {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }

  .search-area {
    width: 100%;
  }

  .search-input {
    width: 100%;
  }

  .flow-count {
    align-self: flex-end;
  }
}



================================================================================
# 文件: src/ErrorHandlingTab.js
# 行数: 164
================================================================================

// ErrorHandlingTab.js - 改进版异常处理标签页

import React, { useState, useEffect } from "react";
import { Form } from "semantic-ui-react";

/**
 * 异常处理标签页组件
 * 采用Semantic UI样式，匹配其他标签页的外观
 */
const ErrorHandlingTab = ({ selectedNode, updateNodeProperties }) => {
  // 获取当前节点配置
  const config = selectedNode?.data?.config || {};

  // 设置初始策略
  const [errorStrategy, setErrorStrategy] = useState(
    config.errorStrategy || "FAIL"
  );

  // 错误处理策略选项
  const strategyOptions = [
    { key: "FAIL", text: "终止流程", value: "FAIL" },
    { key: "IGNORE", text: "忽略错误", value: "IGNORE" },
    { key: "RETRY", text: "重试执行", value: "RETRY" },
  ];

  // 当节点变化时更新策略
  useEffect(() => {
    if (selectedNode?.data?.config?.errorStrategy) {
      setErrorStrategy(selectedNode.data.config.errorStrategy);
    }
  }, [selectedNode]);

  // 处理策略变更
  const handleStrategyChange = (e, { value }) => {
    setErrorStrategy(value);

    // 更新节点属性
    updateNodeProperties(selectedNode.id, {
      config: {
        ...config,
        errorStrategy: value,
      },
    });
  };

  // 处理字段变更
  const handleFieldChange = (field, value) => {
    updateNodeProperties(selectedNode.id, {
      config: {
        ...config,
        [field]: value,
      },
    });
  };

  // 获取字段值（带默认值）
  const getFieldValue = (field, defaultValue = "") => {
    return config[field] !== undefined ? config[field] : defaultValue;
  };

  // 使用Semantic UI Form组件包装内容，匹配其他标签页的样式
  return (
    <Form className="ui form">
      {/* 策略选择 */}
      <Form.Field>
        <label>错误处理策略</label>
        <Form.Select
          fluid
          options={strategyOptions}
          value={errorStrategy}
          onChange={handleStrategyChange}
        />
      </Form.Field>

      {/* 共用字段 - 适用于所有策略 */}
      <Form.Field>
        <label>超时时间(毫秒)</label>
        <Form.Input
          type="number"
          min="1000"
          max="300000"
          value={getFieldValue("timeout", 30000)}
          onChange={(e, { value }) =>
            handleFieldChange("timeout", Number(value))
          }
        />
      </Form.Field>

      {/* 重试策略特有字段 */}
      {errorStrategy === "RETRY" && (
        <>
          <Form.Field>
            <label>最大重试次数</label>
            <Form.Input
              type="number"
              min="1"
              max="10"
              value={getFieldValue("maxRetries", 3)}
              onChange={(e, { value }) =>
                handleFieldChange("maxRetries", Number(value))
              }
            />
          </Form.Field>

          <Form.Field>
            <label>重试间隔(毫秒)</label>
            <Form.Input
              type="number"
              min="500"
              max="60000"
              value={getFieldValue("retryInterval", 3000)}
              onChange={(e, { value }) =>
                handleFieldChange("retryInterval", Number(value))
              }
            />
          </Form.Field>

          <Form.Field>
            <Form.Checkbox
              label="启用指数退避"
              checked={getFieldValue("exponentialBackoff", true)}
              onChange={(e, { checked }) =>
                handleFieldChange("exponentialBackoff", checked)
              }
            />
          </Form.Field>
        </>
      )}

      {/* 失败返回值 - FAIL和IGNORE策略 */}
      {(errorStrategy === "FAIL" || errorStrategy === "IGNORE") && (
        <Form.Field>
          <label>失败返回值</label>
          <Form.TextArea
            rows={3}
            placeholder='输入失败时的默认返回值，例如: {"status": "error", "message": "处理失败"}'
            value={getFieldValue("fallbackResponse", "{}")}
            onChange={(e, { value }) =>
              handleFieldChange("fallbackResponse", value)
            }
          />
        </Form.Field>
      )}

      {/* 根据节点类型添加特定字段 */}
      {selectedNode?.type === "HTTP" && errorStrategy === "RETRY" && (
        <Form.Field>
          <label>重试状态码</label>
          <Form.Input
            placeholder="例如: 408,429,500,502,503,504"
            value={getFieldValue("retryStatusCodes", "408,429,500,502,503,504")}
            onChange={(e, { value }) =>
              handleFieldChange("retryStatusCodes", value)
            }
          />
          <small style={{ color: "#666" }}>多个状态码用逗号分隔</small>
        </Form.Field>
      )}
    </Form>
  );
};

export default ErrorHandlingTab;



================================================================================
# 文件: src/tab-properties.css
# 行数: 126
================================================================================

/* tab-properties.css - 完整文件 */

/* 属性面板Tab样式 */
.tab-properties-panel {
  padding: 0;
  width: 100%;
}

.tab-properties-panel .ui.header {
  margin: 0 0 12px 0;
  padding: 0 10px;
  font-size: 16px;
  color: #2c3e50;
}

/* Tab菜单样式 */
.tab-properties-panel .ui.secondary.pointing.menu {
  margin-bottom: 16px;
  border-bottom: 1px solid #e0e0e0;
}

.tab-properties-panel .ui.secondary.pointing.menu .item {
  padding: 10px 16px;
  margin: 0 4px 0 0;
  font-size: 14px;
  font-weight: 500;
  color: #606770;
  border-bottom-width: 3px;
  transition: all 0.2s ease;
}

.tab-properties-panel .ui.secondary.pointing.menu .active.item {
  border-color: #4285f4;
  color: #4285f4;
  font-weight: 600;
}

.tab-properties-panel .ui.secondary.pointing.menu .item:hover {
  background-color: #f5f5f5;
  border-color: #ebebeb;
}

.tab-properties-panel .ui.secondary.pointing.menu .active.item:hover {
  border-color: #1a73e8;
  background-color: #f5f8ff;
}

/* Tab面板样式 */
.tab-properties-panel .ui.tab.segment {
  border: none;
  box-shadow: none;
  padding: 0;
  margin: 0;
}

.tab-properties-panel .ui.tab.pane {
  padding: 0;
  border: none;
  box-shadow: none;
}

/* 表单字段样式调整 */
.tab-properties-panel .form-group {
  margin-bottom: 16px;
}

.tab-properties-panel .form-group label {
  display: block;
  margin-bottom: 6px;
  font-weight: 500;
  color: #333;
  font-size: 13px;
}

/* Semantic UI特定样式覆盖 */
.tab-properties-panel .ui.form .field {
  margin-bottom: 16px;
}

.tab-properties-panel .ui.form .field > label {
  font-weight: 500;
  margin-bottom: 6px;
  font-size: 13px;
  color: #333;
}

/* 调试结果区域 */
.tab-properties-panel textarea[disabled] {
  background-color: #f9fafb;
  font-family: "Courier New", monospace;
  font-size: 12px;
  border: 1px solid #e0e0e0;
}

/* 配置异常处理面板中的字段间距 */
.tab-properties-panel .tab.pane:nth-child(2) .field {
  margin-bottom: 20px;
}

/* 优化调试面板样式 */
.tab-properties-panel .tab.pane:nth-child(3) .ui.negative.message {
  margin-bottom: 16px;
}

/* LLM节点特殊字段样式 */
.tab-properties-panel textarea[name="systemPrompt"],
.tab-properties-panel textarea[name="userPrompt"] {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.5;
  color: #333;
}

/* API密钥输入框样式 */
.tab-properties-panel input[name="apiKey"] {
  font-family: monospace;
  letter-spacing: 1px;
}

/* 增加LLM节点调试面板中的调试结果格式化 */
.tab-properties-panel .tab.pane:nth-child(3) textarea[name="debugResult"] {
  font-family: "Courier New", monospace;
  font-size: 12px;
  white-space: pre-wrap;
  line-height: 1.5;
}



================================================================================
# 文件: src/semanticUIAdapter.js
# 行数: 318
================================================================================

// semanticUIAdapter.js - 完整解决方案
import React from "react";
import Form from "@rjsf/core";
import {
  Form as SemanticForm,
  Button,
  TextArea,
  Input,
  Dropdown,
  Checkbox,
  Label,
  Message,
  Header,
  Segment,
  Divider,
} from "semantic-ui-react";

// 自定义小部件
const widgets = {
  // 文本输入框
  TextWidget: (props) => {
    const {
      id,
      value,
      required,
      disabled,
      readonly,
      onChange,
      placeholder,
      label,
      schema,
    } = props;

    // 处理变更
    const handleChange = (e, { value }) => {
      // 确保value不为undefined
      onChange(
        value === "" ? (schema.type === "number" ? undefined : "") : value
      );
    };

    return (
      <SemanticForm.Field required={required}>
        {label && <label htmlFor={id}>{label}</label>}
        <Input
          id={id}
          value={value || ""}
          placeholder={placeholder}
          disabled={disabled || readonly}
          onChange={handleChange}
          fluid
        />
      </SemanticForm.Field>
    );
  },

  // 文本区域
  TextareaWidget: (props) => {
    const {
      id,
      value,
      required,
      disabled,
      readonly,
      onChange,
      placeholder,
      label,
      options,
    } = props;
    const rows = options?.rows || 5;

    const handleChange = (e, { value }) => {
      onChange(value === "" ? "" : value);
    };

    return (
      <SemanticForm.Field required={required}>
        {label && <label htmlFor={id}>{label}</label>}
        <TextArea
          id={id}
          value={value || ""}
          placeholder={placeholder}
          disabled={disabled || readonly}
          onChange={handleChange}
          rows={rows}
        />
      </SemanticForm.Field>
    );
  },

  // 下拉选择框
  SelectWidget: (props) => {
    const {
      id,
      value,
      required,
      disabled,
      readonly,
      onChange,
      options,
      label,
      placeholder,
    } = props;
    const { enumOptions } = options;

    // 修复：处理空值情况，避免 undefined.value 错误
    const handleChange = (e, data) => {
      if (data && typeof data.value !== "undefined") {
        onChange(data.value);
      }
    };

    // 修复：处理聚焦事件，避免 undefined.value 错误
    const handleFocus = () => {
      // 不做任何操作，避免错误
    };

    const selectOptions = enumOptions.map(({ value, label }) => ({
      key: String(value), // 确保key是字符串
      value: value,
      text: label,
    }));

    return (
      <SemanticForm.Field required={required}>
        {label && <label htmlFor={id}>{label}</label>}
        <Dropdown
          id={id}
          options={selectOptions}
          value={value}
          disabled={disabled || readonly}
          onChange={handleChange}
          onFocus={handleFocus} // 添加安全的聚焦处理
          placeholder={placeholder}
          fluid
          selection
        />
      </SemanticForm.Field>
    );
  },

  // 复选框
  CheckboxWidget: (props) => {
    const { id, value, required, disabled, readonly, onChange, label } = props;

    const handleChange = (e, { checked }) => {
      onChange(checked);
    };

    return (
      <SemanticForm.Field required={required}>
        <Checkbox
          id={id}
          checked={value || false}
          disabled={disabled || readonly}
          onChange={handleChange}
          label={label}
        />
      </SemanticForm.Field>
    );
  },

  // 数字输入框
  NumberWidget: (props) => {
    const {
      id,
      value,
      required,
      disabled,
      readonly,
      onChange,
      label,
      placeholder,
      schema,
    } = props;

    const handleChange = (e, { value }) => {
      const parsed = value === "" ? undefined : Number(value);
      onChange(parsed);
    };

    return (
      <SemanticForm.Field required={required}>
        {label && <label htmlFor={id}>{label}</label>}
        <Input
          id={id}
          type="number"
          value={value || ""}
          placeholder={placeholder}
          disabled={disabled || readonly}
          onChange={handleChange}
          fluid
          min={schema.minimum}
          max={schema.maximum}
          step={schema.multipleOf || 1}
        />
      </SemanticForm.Field>
    );
  },
};

// 自定义模板
const templates = {
  FieldTemplate: (props) => {
    const { id, label, help, required, description, errors, children } = props;

    return (
      <div
        className={`field-template ${errors ? "error" : ""}`}
        style={{ marginBottom: "1rem" }}
      >
        {children}
        {errors && <Message negative content={errors} size="tiny" />}
        {description && (
          <div
            className="field-description"
            style={{ fontSize: "0.9em", color: "#666", marginTop: "0.3rem" }}
          >
            {description}
          </div>
        )}
        {help && (
          <div
            className="field-help"
            style={{
              fontSize: "0.9em",
              fontStyle: "italic",
              marginTop: "0.3rem",
            }}
          >
            {help}
          </div>
        )}
      </div>
    );
  },

  ObjectFieldTemplate: (props) => {
    const { title, description, properties, required } = props;

    return (
      <Segment>
        {title && <Header as="h4">{title}</Header>}
        {description && <p>{description}</p>}
        {properties.map((prop) => prop.content)}
      </Segment>
    );
  },

  ArrayFieldTemplate: (props) => {
    const { title, items, canAdd, onAddClick } = props;

    return (
      <Segment>
        {title && <Header as="h4">{title}</Header>}
        {items.map((item) => (
          <div key={item.key} style={{ marginBottom: "1rem" }}>
            {item.children}
            {item.hasRemove && (
              <Button
                negative
                icon="trash"
                size="tiny"
                onClick={item.onDropIndexClick(item.index)}
                style={{ marginTop: "0.5rem" }}
              />
            )}
            <Divider />
          </div>
        ))}
        {canAdd && (
          <Button primary icon="plus" content="添加" onClick={onAddClick} />
        )}
      </Segment>
    );
  },

  ButtonTemplates: {
    SubmitButton: (props) => {
      const { uiSchema } = props;

      return (
        <Button primary type="submit" disabled={props.disabled}>
          {uiSchema?.["ui:submitButtonOptions"]?.submitText || "Submit"}
        </Button>
      );
    },
  },

  ErrorListTemplate: (props) => {
    const { errors } = props;

    return (
      <Message negative>
        <Message.Header>表单错误</Message.Header>
        <Message.List>
          {errors.map((error, i) => (
            <Message.Item key={i}>{error.stack}</Message.Item>
          ))}
        </Message.List>
      </Message>
    );
  },
};

// 自定义表单组件
const SemanticUIForm = (props) => {
  return (
    <Form
      {...props}
      widgets={{ ...widgets, ...props.widgets }}
      templates={{ ...templates, ...props.templates }}
    />
  );
};

export default SemanticUIForm;



================================================================================
# 文件: src/subflow-styles.css
# 行数: 159
================================================================================

/* 子流程相关样式 - 保持原有外观 */

/* 循环节点入口点指示器 */
.loop-entry-indicator {
  position: absolute;
  top: 20px;
  left: 20px;
  z-index: 10;
  pointer-events: none; /* 确保基本区域不干扰用户操作 */
}

/* 入口点样式 */
.entry-point-rectangle {
  width: 36px;
  height: 28px;
  border-radius: 6px;
  background-color: #3498db; /* 蓝色背景 */
  border: 2px solid #2980b9; /* 深蓝色边框 */
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: relative; /* 为连接点定位提供参考 */
}

/* 入口连接点样式 */
.entry-handle {
  width: 9px !important;
  height: 9px !important;
  background-color: #4caf50 !important;
  border: 1px solid white !important;
  box-shadow: 0 0 2px rgba(0, 0, 0, 0.2) !important;
  z-index: 150 !important;
  pointer-events: all !important; /* 确保连接点可以接收鼠标事件 */
}

/* 出口连接点位置 */
.entry-handle-out {
  right: 0px !important;
}

/* 确保子流程区域背景样式 */
.loop-background-dots {
  background-color: #f0f0f0 !important;
  background-image: radial-gradient(#c0c0c0 1px, transparent 1px) !important;
  background-size: 16px 16px !important;
  height: 100% !important;
  width: 100% !important;
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  z-index: 0 !important;
}

/* 子流程节点容器 */
.loop-container {
  display: flex;
  flex-direction: column;
  position: relative;
  min-height: auto !important;
  min-width: 320px !important;
  box-sizing: border-box;
  will-change: transform, width, height;
}

/* 非调整状态时，启用平滑过渡 */
.loop-container:not(.resizing) {
  transition: none !important;
}

/* 调整大小状态时的样式 */
.loop-container.resizing {
  opacity: 1 !important;
  z-index: 10;
  transition: none !important;
  transform: none !important;
  animation: none !important;
}

/* 子流程区域样式 */
.loop-subflow-area {
  display: block !important;
  margin: 0 8px 0px 14px !important;
  border: 1px solid #e0e0e0 !important;
  border-radius: 6px !important;
  background-color: #f0f0f0 !important;
  position: relative !important;
  overflow: hidden !important;
  box-sizing: border-box !important;
  will-change: width, height !important;
}

/* 子流程区域不处于调整大小状态时的过渡 */
.loop-container:not(.resizing) .loop-subflow-area {
  transition: none !important;
}

/* 自定义调整大小手柄 */
.custom-resize-handle {
  position: absolute;
  right: 4px;
  bottom: 4px;
  width: 16px;
  height: 16px;
  border: 2px solid #4c9aff;
  border-top: none;
  border-left: none;
  border-bottom-right-radius: 6px;
  pointer-events: none;
  z-index: 100;
  opacity: 1;
  background-color: transparent;
  cursor: nwse-resize;
}

/* 确保子流程内部的节点有正确的层级 */
.react-flow__node-LOOP .react-flow__node {
  z-index: 5;
}

/* 确保子流程节点连接点在正确的层级 */
.react-flow__node-LOOP .react-flow__handle {
  z-index: 150;
}

/* 使光标在可拖放区域显示为可放置状态 */
.loop-subflow-area:empty {
  cursor: default;
}

/* 拖拽悬停时的效果 */
.loop-subflow-area.react-flow__drop-target {
  box-shadow: 0 0 0 2px #4c9aff;
}

/* 调整右侧调整手柄 */
.react-flow__resize-control.handle {
  width: 20px !important;
  height: 20px !important;
  right: 0 !important;
  bottom: 0 !important;
  background-color: transparent !important;
  border: none !important;
  cursor: nwse-resize !important;
  pointer-events: all !important;
  z-index: 101 !important;
}

/* 确保 NodeResizeControl 的 z-index 高于节点内部元素 */
.react-flow__resize-control {
  z-index: 101 !important;
}

/* 禁用节点边框调整功能 */
.loop-node .react-flow__node-resizer .react-flow__resize-control:not(.handle) {
  pointer-events: none !important;
  opacity: 0 !important;
}



================================================================================
# 文件: src/index.js
# 行数: 15
================================================================================

import React from "react";
import { createRoot } from "react-dom/client";

import App from "./App";
import "./styles.css";

const rootElement = document.getElementById("root");
const root = createRoot(rootElement);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



================================================================================
# 文件: src/ResizablePropertiesPanel.js
# 行数: 487
================================================================================

// TabPropertiesPanel.js - 修改版本（将节点ID和类型配置为JSON字段）
import React, { useState, useEffect } from "react";
import { Form } from "@rjsf/semantic-ui";
import validator from "@rjsf/validator-ajv8";
import { Tab, Message, Header } from "semantic-ui-react";

// 导入自定义字段和小部件
import { customFields, customWidgets } from "./components/fields/schemaLoader";
import LoopProperties from "./components/LoopProperties";

// 导入节点配置加载器
import NodeConfigLoader from "./NodeConfigLoader";

// 空面板组件
const EmptyPanel = () => {
  return (
    <div className="properties-panel">
      <h3>节点属性</h3>
      <div id="properties-content">
        <p>请选择一个节点进行编辑</p>
      </div>
    </div>
  );
};

// 错误面板组件
const ErrorPanel = ({ nodeType }) => {
  return (
    <div className="properties-panel">
      <h3>节点属性</h3>
      <div id="properties-content">
        <Message negative>
          <Message.Header>配置错误</Message.Header>
          <p>未找到节点类型 "{nodeType}" 的配置信息</p>
        </Message>
      </div>
    </div>
  );
};

// 循环节点面板
const LoopNodePanel = ({ node, updateNode, nodes }) => {
  return (
    <div>
      <LoopProperties node={node} updateNode={updateNode} nodes={nodes} />
    </div>
  );
};

// 标准节点面板
const StandardNodePanel = ({ selectedNode, updateNodeProperties }) => {
  // 所有hooks都在条件分支之前声明
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const [loadingActions, setLoadingActions] = useState({});
  const [debugError, setDebugError] = useState(null);
  const [nodeDataJson, setNodeDataJson] = useState("{}");

  // 从配置加载器获取节点类型对应的配置
  const nodeSchema = NodeConfigLoader.getNodeSchema(selectedNode.type);
  const nodeUiSchema = NodeConfigLoader.getNodeUiSchema(selectedNode.type);
  const panelConfig = NodeConfigLoader.getPanelConfig(selectedNode.type);

  // 如果没有找到配置，显示错误信息
  if (!nodeSchema || !nodeUiSchema || !panelConfig) {
    return <ErrorPanel nodeType={selectedNode.type} />;
  }

  // 准备表单数据
  const baseFormData = selectedNode.data.config || {};
  const formData = {
    ...baseFormData,
    nodeType: selectedNode.type,
    nodeId: selectedNode.id,
  };

  // 更新节点JSON数据
  useEffect(() => {
    try {
      // 创建节点数据的JSON表示，排除内部实现细节
      const nodeDataForJson = {
        id: selectedNode.id,
        type: selectedNode.type,
        label: selectedNode.data.label,
        config: { ...selectedNode.data.config },
      };

      // 删除不需要在JSON中显示的内部属性
      if (nodeDataForJson.config) {
        delete nodeDataForJson.config.nodeJsonData;
        delete nodeDataForJson.config.debugResult;
      }

      // 格式化JSON字符串
      const jsonStr = JSON.stringify(nodeDataForJson, null, 2);
      setNodeDataJson(jsonStr);

      // 更新节点属性中的nodeJsonData字段
      if (formData.nodeJsonData !== jsonStr) {
        updateNodeProperties(selectedNode.id, {
          config: {
            ...selectedNode.data.config,
            nodeJsonData: jsonStr,
          },
        });
      }
    } catch (error) {
      console.error("创建节点JSON数据时出错:", error);
    }
  }, [selectedNode, updateNodeProperties]);

  // 从schema中提取特定标签页需要的属性
  const createPanelSchema = (schema, fieldList) => {
    if (!schema || !schema.properties) {
      return { type: "object", properties: {} };
    }

    const filteredProperties = {};

    // 添加标签页中指定的字段
    fieldList.forEach((field) => {
      if (schema.properties[field]) {
        filteredProperties[field] = schema.properties[field];
      }
    });

    // 处理dependencies
    const dependencies = {};
    if (schema.dependencies) {
      Object.keys(schema.dependencies).forEach((key) => {
        if (fieldList.includes(key)) {
          dependencies[key] = schema.dependencies[key];
        }
      });
    }

    return {
      ...schema,
      properties: filteredProperties,
      required: (schema.required || []).filter((prop) =>
        fieldList.includes(prop)
      ),
      dependencies:
        Object.keys(dependencies).length > 0 ? dependencies : undefined,
    };
  };

  // 从uiSchema中提取特定标签页需要的配置
  const createPanelUiSchema = (uiSchema, fieldList) => {
    if (!uiSchema) return {};

    const filteredUiSchema = {};

    // 复制全局UI配置
    Object.keys(uiSchema).forEach((key) => {
      if (key.startsWith("ui:")) {
        filteredUiSchema[key] = uiSchema[key];
      }
    });

    // 只复制指定字段的UI配置
    fieldList.forEach((field) => {
      if (uiSchema[field]) {
        filteredUiSchema[field] = uiSchema[field];
      }
    });

    return filteredUiSchema;
  };

  // 处理表单变更
  const handleChange = ({ formData }, panelName) => {
    // 从表单数据中移除不需要存储的字段
    const { nodeJsonData, ...configData } = formData;

    // 合并当前节点的配置与新的表单数据
    const currentConfig = selectedNode.data.config || {};
    const updatedConfig = { ...currentConfig, ...configData };

    updateNodeProperties(selectedNode.id, {
      config: updatedConfig,
    });
  };

  // 处理调试按钮点击
  const handleDebug = async (formData) => {
    // 设置正在加载的动作
    setLoadingActions((prev) => ({ ...prev, debug: true }));
    setDebugError(null);

    try {
      // 模拟调试API调用
      const debugParams = formData.debugParams || "{}";
      let parsedParams;

      try {
        parsedParams = JSON.parse(debugParams);
      } catch (e) {
        throw new Error("调试参数必须是有效的JSON格式");
      }

      // 这里实际项目中应该是一个API调用
      // 模拟API调用延迟
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // 根据节点类型生成不同的模拟调试结果
      let debugResult;

      switch (selectedNode.type) {
        case "HTTP":
          debugResult = {
            success: true,
            data: {
              statusCode: 200,
              headers: {
                "content-type": "application/json",
              },
              body: {
                message: "操作成功",
                data: parsedParams,
              },
              executionTime: 120,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SQL":
          debugResult = {
            success: true,
            data: {
              results: [
                { id: 1, name: "示例数据1" },
                { id: 2, name: "示例数据2" },
              ],
              affectedRows: 2,
              executionTime: 85,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "REDIS":
          debugResult = {
            success: true,
            data: {
              result: formData.operation === "GET" ? "缓存数据示例" : "OK",
              executionTime: 15,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SWITCH":
          debugResult = {
            success: true,
            data: {
              evaluatedExpression: formData.expression,
              result: "条件分支1",
              selectedPath: "分支1",
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SCRIPT":
          debugResult = {
            success: true,
            data: {
              result: { processedData: "脚本执行结果" },
              executionTime: 45,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SET_VARIABLE":
          debugResult = {
            success: true,
            data: {
              variables: formData.variables || {},
              context: "变量设置完成",
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "START":
          debugResult = {
            success: true,
            data: {
              flowStarted: true,
              initialPayload: parsedParams,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
              sessionId: "debug-" + Math.random().toString(36).substring(2, 11),
            },
          };
          break;

        default:
          debugResult = {
            success: true,
            data: {
              result: "节点执行完成",
              params: parsedParams,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
      }

      // 更新节点属性，写入调试结果
      const { nodeJsonData, ...configData } = formData;

      // 合并当前节点的配置与调试结果
      const currentConfig = selectedNode.data.config || {};
      const updatedConfig = {
        ...currentConfig,
        ...configData,
        debugResult: JSON.stringify(debugResult, null, 2),
      };

      updateNodeProperties(selectedNode.id, {
        config: updatedConfig,
      });
    } catch (error) {
      setDebugError(error.message || "调试过程中发生错误");

      // 更新节点属性，写入错误信息
      const { nodeJsonData, ...configData } = formData;

      // 合并当前节点的配置与错误信息
      const currentConfig = selectedNode.data.config || {};
      const updatedConfig = {
        ...currentConfig,
        ...configData,
        debugResult: JSON.stringify(
          {
            success: false,
            error: error.message || "调试过程中发生错误",
          },
          null,
          2
        ),
      };

      updateNodeProperties(selectedNode.id, {
        config: updatedConfig,
      });
    } finally {
      // 清除加载状态
      setLoadingActions((prev) => ({ ...prev, debug: false }));
    }
  };

  // 构建动作处理函数集合
  const actions = {
    debug: handleDebug,
    export: () => console.log("导出操作"),
    test: () => console.log("测试操作"),
  };

  // 处理Tab切换
  const handleTabChange = (e, { activeIndex }) => {
    setActiveTabIndex(activeIndex);
  };

  // 根据面板配置创建标签页
  const panes = panelConfig.tabs.map((tab) => {
    // 创建该标签页的schema和uiSchema
    const tabSchema = createPanelSchema(nodeSchema, tab.fields);
    const tabUiSchema = createPanelUiSchema(nodeUiSchema, tab.fields);

    return {
      menuItem: tab.title,
      render: () => (
        <Tab.Pane attached={false}>
          {tab.id === "debug" && debugError && (
            <Message negative>
              <Message.Header>调试错误</Message.Header>
              <p>{debugError}</p>
            </Message>
          )}
          <Form
            schema={tabSchema}
            uiSchema={tabUiSchema}
            formData={formData}
            validator={validator}
            onChange={(formData) => handleChange(formData, tab.id)}
            liveValidate={true}
            showErrorList={false}
            widgets={customWidgets}
            fields={customFields}
            formContext={{
              actions,
              loadingActions,
            }}
          />
        </Tab.Pane>
      ),
    };
  });

  return (
    <div className="tab-properties-panel">
      <Header as="h4" style={{ marginBottom: "16px" }}>
        {panelConfig.title || getNodeTypeDisplayName(selectedNode.type)}
        {panelConfig.description && (
          <Header.Subheader>{panelConfig.description}</Header.Subheader>
        )}
      </Header>

      {/* 移除节点ID和类型信息的单独展示 */}

      <Tab
        panes={panes}
        activeIndex={activeTabIndex}
        onTabChange={handleTabChange}
        menu={{ secondary: true, pointing: true }}
      />
    </div>
  );
};

// 获取节点类型显示名称
const getNodeTypeDisplayName = (type) => {
  switch (type) {
    case "START":
      return "开始节点";
    case "END":
      return "结束节点";
    case "HTTP":
      return "HTTP节点";
    case "SQL":
      return "SQL节点";
    case "REDIS":
      return "Redis节点";
    case "SCRIPT":
      return "脚本节点";
    case "SWITCH":
      return "分支节点";
    case "LOOP":
      return "循环节点";
    case "SET_VARIABLE":
      return "变量节点";
    default:
      return `${type}节点`;
  }
};

/**
 * 主面板组件 - 根据节点类型选择不同的面板组件
 */
const TabPropertiesPanel = ({ selectedNode, updateNodeProperties, nodes }) => {
  // 没有选中节点的情况
  if (!selectedNode) {
    return <EmptyPanel />;
  }

  // 循环节点使用特殊的面板
  if (selectedNode.type === "LOOP") {
    return (
      <LoopNodePanel
        node={selectedNode}
        updateNode={updateNodeProperties}
        nodes={nodes}
      />
    );
  }

  // 其他节点类型使用标准面板
  return (
    <StandardNodePanel
      selectedNode={selectedNode}
      updateNodeProperties={updateNodeProperties}
    />
  );
};

export default TabPropertiesPanel;



================================================================================
# 文件: src/NodeConfigLoader.js
# 行数: 220
================================================================================

// 直接修改NodeConfigLoader.js - 更直接的解决方案

import nodeConfigs from "./combined-node-config.json";

/**
 * 节点配置加载器
 * 负责加载和管理节点配置，增加了对HTTP节点的特殊处理
 */
class NodeConfigLoader {
  // 存储所有节点配置
  static configs = (() => {
    // 克隆配置，避免修改原始配置
    const clonedConfigs = JSON.parse(JSON.stringify(nodeConfigs));

    // 特殊处理HTTP节点，确保form-data和x-www-form-urlencoded使用KVTableField
    if (clonedConfigs.HTTP && clonedConfigs.HTTP.uiSchema) {
      // 直接修改HTTP body字段的UI Schema
      // 这种方法绕过了ui:dependencies的复杂性

      // 1. 为form-data内容类型创建特殊的schema路径
      if (!clonedConfigs.HTTP.uiSchema["ui:dependencies"]) {
        clonedConfigs.HTTP.uiSchema["ui:dependencies"] = {};
      }

      if (!clonedConfigs.HTTP.uiSchema["ui:dependencies"].contentType) {
        clonedConfigs.HTTP.uiSchema["ui:dependencies"].contentType = {};
      }

      // 确保form-data使用KVTableField
      clonedConfigs.HTTP.uiSchema["ui:dependencies"].contentType["form-data"] =
        {
          body: {
            "ui:field": "KVTableField",
            "ui:options": {
              keyPlaceholder: "name",
              valuePlaceholder: "value",
              label: "表单字段",
            },
            "ui:title": "Form Data表单字段",
          },
        };

      // 确保x-www-form-urlencoded使用KVTableField
      clonedConfigs.HTTP.uiSchema["ui:dependencies"].contentType[
        "x-www-form-urlencoded"
      ] = {
        body: {
          "ui:field": "KVTableField",
          "ui:options": {
            keyPlaceholder: "name",
            valuePlaceholder: "value",
            label: "表单字段",
          },
          "ui:title": "URL编码表单字段",
        },
      };

      console.log(
        "已直接修改HTTP节点配置，确保form-data和x-www-form-urlencoded使用KVTableField"
      );
    }

    return clonedConfigs;
  })();

  /**
   * 获取指定节点类型的Schema配置
   * @param {string} nodeType 节点类型
   * @returns 节点Schema配置
   */
  static getNodeSchema(nodeType) {
    return (this.configs[nodeType] && this.configs[nodeType].schema) || null;
  }

  /**
   * 获取指定节点类型的UI Schema配置
   * @param {string} nodeType 节点类型
   * @returns 节点UI Schema配置
   */
  static getNodeUiSchema(nodeType) {
    // 特殊处理HTTP节点的UI Schema
    if (nodeType === "HTTP") {
      const uiSchema =
        (this.configs[nodeType] && this.configs[nodeType].uiSchema) || null;

      // 确保HTTP节点的form-data和x-www-form-urlencoded内容类型使用KVTableField
      if (
        uiSchema &&
        uiSchema["ui:dependencies"] &&
        uiSchema["ui:dependencies"].contentType
      ) {
        const contentTypeDeps = uiSchema["ui:dependencies"].contentType;

        // 确认form-data和x-www-form-urlencoded配置正确
        if (contentTypeDeps["form-data"] && contentTypeDeps["form-data"].body) {
          console.log(
            "确认HTTP节点form-data配置:",
            contentTypeDeps["form-data"].body
          );
        }

        if (
          contentTypeDeps["x-www-form-urlencoded"] &&
          contentTypeDeps["x-www-form-urlencoded"].body
        ) {
          console.log(
            "确认HTTP节点x-www-form-urlencoded配置:",
            contentTypeDeps["x-www-form-urlencoded"].body
          );
        }
      }

      return uiSchema;
    }

    // 其他节点类型正常处理
    return (this.configs[nodeType] && this.configs[nodeType].uiSchema) || null;
  }

  // 在 NodeConfigLoader 类中添加此方法
  static getNodeDocPath(nodeType) {
    // 构建文档路径 - 使用与src同级的docs目录
    return `docs/${nodeType.toLowerCase()}_node.md`;
  }

  /**
   * 获取指定节点类型的面板配置
   * @param {string} nodeType 节点类型
   * @returns 节点面板配置
   */
  static getPanelConfig(nodeType) {
    return (
      (this.configs[nodeType] && this.configs[nodeType].panelConfig) || null
    );
  }

  /**
   * 获取指定节点类型的完整配置
   * @param {string} nodeType 节点类型
   * @returns 节点完整配置
   */
  static getNodeConfig(nodeType) {
    return this.configs[nodeType] || null;
  }

  /**
   * 获取所有节点类型
   * @returns 节点类型列表
   */
  static getNodeTypes() {
    return Object.keys(this.configs);
  }

  /**
   * 获取节点类型的默认配置
   * @param {string} nodeType 节点类型
   * @returns 节点默认配置
   */
  static getDefaultConfig(nodeType) {
    const schema = this.getNodeSchema(nodeType);
    if (!schema) return {};

    const defaultConfig = {};

    // 遍历schema中的属性，提取默认值
    if (schema.properties) {
      Object.entries(schema.properties).forEach(([key, prop]) => {
        // 跳过nodeType和nodeId字段
        if (key === "nodeType" || key === "nodeId") return;

        // 如果属性有默认值，使用它
        if (prop.default !== undefined) {
          defaultConfig[key] = prop.default;
        }
      });
    }

    return defaultConfig;
  }

  /**
   * 添加或更新节点配置
   * @param {string} nodeType 节点类型
   * @param {object} config 节点配置
   */
  static updateNodeConfig(nodeType, config) {
    this.configs[nodeType] = {
      ...this.configs[nodeType],
      ...config,
    };
  }

  /**
   * 特别为HTTP节点提供form-data和x-www-form-urlencoded的body配置
   * @param {string} contentType 内容类型
   * @returns 对应内容类型的body UI Schema
   */
  static getHttpBodyUiSchema(contentType) {
    if (
      contentType === "form-data" ||
      contentType === "x-www-form-urlencoded"
    ) {
      return {
        "ui:field": "KVTableField",
        "ui:options": {
          keyPlaceholder: "name",
          valuePlaceholder: "value",
          label:
            contentType === "form-data"
              ? "Form Data表单字段"
              : "URL编码表单字段",
        },
      };
    }
    return null;
  }
}

export default NodeConfigLoader;



================================================================================
# 文件: src/CodeEditorField.js
# 行数: 140
================================================================================

// CodeEditorField.js - 简化版 (不需要单独的CSS文件)
import React, { useState, useEffect, useRef } from "react";
import AceEditor from "react-ace";

// 导入必要的语言模式和主题
import "ace-builds/src-noconflict/mode-javascript";
import "ace-builds/src-noconflict/mode-python";
import "ace-builds/src-noconflict/mode-groovy";
import "ace-builds/src-noconflict/theme-github";

/**
 * 代码编辑器字段组件
 * 用于脚本节点的代码编辑，支持语法高亮和高度调整
 */
const CodeEditorField = (props) => {
  const { formData = "", onChange, uiSchema, formContext } = props;

  // 从表单上下文或UI模式中获取语言
  const language =
    formContext?.language || uiSchema?.["ui:options"]?.language || "javascript";

  // 使用ref保存编辑器实例
  const editorRef = useRef(null);

  // 初始高度和最小高度
  const initialHeight = uiSchema?.["ui:options"]?.height || "300px";
  const minHeight = 180;

  // 状态控制编辑器高度
  const [editorHeight, setEditorHeight] = useState(initialHeight);

  // 映射语言到ACE编辑器模式
  const getMode = (lang) => {
    switch (lang.toLowerCase()) {
      case "python":
        return "python";
      case "groovy":
        return "groovy";
      default:
        return "javascript";
    }
  };

  // 编辑器加载完成后的回调
  const onEditorLoad = (editor) => {
    editorRef.current = editor;

    // 调整行号颜色
    const gutter = editor.renderer.$gutterLayer.element;
    if (gutter) {
      gutter.style.backgroundColor = "#f8f9fa";
      gutter.style.color = "#aaaaaa";

      // 强制更新渲染
      editor.renderer.updateFull();
    }
  };

  // 处理大小调整
  const handleResize = (e) => {
    e.preventDefault();

    const startY = e.clientY;
    const startHeight = parseInt(editorHeight);

    const handleMouseMove = (moveEvent) => {
      const newHeight = startHeight + moveEvent.clientY - startY;
      if (newHeight >= minHeight) {
        setEditorHeight(`${newHeight}px`);
      }
    };

    const handleMouseUp = () => {
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseup", handleMouseUp);
    };

    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp);
  };

  return (
    <div
      className="code-editor-field"
      style={{
        border: "1px solid #dfdfe2",
        borderRadius: "6px",
        overflow: "hidden",
        display: "flex",
        flexDirection: "column",
      }}
    >
      <AceEditor
        mode={getMode(language)}
        theme="github"
        width="100%"
        height={editorHeight}
        value={formData || ""}
        onChange={onChange}
        name={`code-editor-${formContext?.nodeId || Date.now()}`}
        editorProps={{ $blockScrolling: true }}
        fontSize={14}
        showPrintMargin={false}
        showGutter={true}
        highlightActiveLine={true}
        onLoad={onEditorLoad}
        setOptions={{
          enableBasicAutocompletion: true,
          enableLiveAutocompletion: true,
          enableSnippets: true,
          showLineNumbers: true,
          tabSize: 2,
        }}
      />

      {/* 调整大小的手柄 */}
      <div
        style={{
          height: "6px",
          backgroundColor: "#f0f0f0",
          borderTop: "1px solid #dfdfe2",
          cursor: "ns-resize",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
        onMouseDown={handleResize}
        onMouseOver={(e) => (e.currentTarget.style.backgroundColor = "#e8e8e8")}
        onMouseOut={(e) => (e.currentTarget.style.backgroundColor = "#f0f0f0")}
      >
        <div
          style={{ width: "30px", height: "2px", backgroundColor: "#ccc" }}
        ></div>
      </div>
    </div>
  );
};

export default CodeEditorField;



================================================================================
# 文件: src/KVTableField.js
# 行数: 295
================================================================================

import React, { useState, useEffect, useRef } from "react";
import { Table, Checkbox, Input, Button } from "semantic-ui-react";

const TrashIcon = () => (
  <svg viewBox="0 0 1024 1024" width="20" height="20">
    <path
      d="M779.3 228.2h-113v-35.4c0-34.9-28.4-63.3-63.3-63.3H425c-34.9 0-63.3 28.4-63.3 63.3v35.4h-113c-32.9 0-59.7 26.8-59.7 59.7v38.5c0 32.9 26.8 59.7 59.7 59.7h1.8v412.8c0 54.1 44 98.1 98.1 98.1h330.9c54.1 0 98.1-44 98.1-98.1V386.1h1.8c32.9 0 59.7-26.8 59.7-59.7v-38.5c-0.1-32.9-26.8-59.7-59.8-59.7z m-374.9-35.4c0-11.4 9.2-20.6 20.6-20.6h178c11.4 0 20.6 9.2 20.6 20.6v35.4H404.4v-35.4z m330.4 606c0 30.5-24.8 55.4-55.4 55.4H348.5c-30.5 0-55.4-24.8-55.4-55.4V386.1h441.7v412.7z m61.5-472.4c0 9.4-7.6 17-17 17H248.7c-9.4 0-17-7.6-17-17v-38.5c0-9.4 7.6-17 17-17h530.7c9.4 0 17 7.6 17 17v38.5z"
      fill="#2c2c2c"
    />
    <path
      d="M377.9 462.3h42.7v317.5h-42.7zM492.6 462.3h42.7v317.5h-42.7zM607.4 462.3h42.7v317.5h-42.7z"
      fill="#2c2c2c"
    />
  </svg>
);

/**
 * KVTableField - 键值对表格组件
 * 用于HTTP节点的headers和params字段等
 *
 * 功能：
 * 1. 表格形式展示键值对
 * 2. 每行包含启用复选框、键、值和删除按钮
 * 3. 当编辑键或值时自动添加新行
 * 4. 支持删除行
 */
const KVTableField = (props) => {
  const { formData = {}, onChange, uiSchema } = props;

  // 从UI Schema获取配置
  const options = uiSchema?.["ui:options"] || {};
  const keyPlaceholder = options.keyPlaceholder || "键名";
  const valuePlaceholder = options.valuePlaceholder || "值";
  const label = options.label || "键值对";

  // 将formData对象转换为数组格式以便在表格中使用
  // 添加enabled字段来表示该行是否启用
  const [rows, setRows] = useState([]);

  // 使用ref跟踪是否需要更新formData
  const formDataRef = useRef(formData);

  // 使用ref跟踪是否正在更新，防止循环更新
  const isUpdatingRef = useRef(false);

  // 初始化设置一个默认空行，确保即使formData为空也有一行可以填写
  useEffect(() => {
    // 立即添加一个默认行，无需等待formData
    setRows([
      {
        id: `default-${Date.now()}-${Math.random()
          .toString(36)
          .substring(2, 9)}`,
        key: "",
        value: "",
        enabled: true,
      },
    ]);
  }, []);

  // 只在formData变化且非空时更新rows
  useEffect(() => {
    // 避免无限循环
    if (isUpdatingRef.current) return;

    // 如果formData为空，不处理（保留默认行）
    if (Object.keys(formData).length === 0) return;

    // 深度比较新旧formData是否相同
    const formDataStr = JSON.stringify(formData);
    const prevFormDataStr = JSON.stringify(formDataRef.current);

    // 如果相同，则不需要更新
    if (formDataStr === prevFormDataStr) return;

    // 更新引用值
    formDataRef.current = formData;

    // 转换formData为rows
    const initialRows = Object.entries(formData).map(([key, value]) => ({
      id: `${key}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
      key,
      value,
      enabled: true,
    }));

    // 总是确保有一个空行用于添加新条目
    if (
      initialRows.length === 0 ||
      initialRows[initialRows.length - 1].key !== ""
    ) {
      initialRows.push({
        id: `new-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
        key: "",
        value: "",
        enabled: true,
      });
    }

    setRows(initialRows);
  }, [formData]);

  // 当rows变化时更新formData
  useEffect(() => {
    // 如果rows为空或尚未初始化，则不更新
    if (rows.length === 0) return;

    // 设置更新标志，防止无限循环
    isUpdatingRef.current = true;

    try {
      // 只有启用的非空行才会被保存到formData
      const newFormData = {};
      rows.forEach((row) => {
        if (row.enabled && row.key.trim() !== "") {
          newFormData[row.key] = row.value;
        }
      });

      // 避免不必要的更新 - 深度比较
      const newFormDataStr = JSON.stringify(newFormData);
      const currentFormDataStr = JSON.stringify(formDataRef.current);

      if (newFormDataStr !== currentFormDataStr) {
        onChange(newFormData);
        // 更新引用
        formDataRef.current = newFormData;
      }
    } finally {
      // 确保标志被重置
      setTimeout(() => {
        isUpdatingRef.current = false;
      }, 0);
    }
  }, [rows, onChange]);

  // 处理行变更
  const handleRowChange = (index, field, value) => {
    const updatedRows = [...rows];
    updatedRows[index][field] = value;

    // 如果编辑的是最后一行，且键不为空，添加新行
    if (
      index === updatedRows.length - 1 &&
      field === "key" &&
      value.trim() !== ""
    ) {
      updatedRows.push({
        id: `new-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
        key: "",
        value: "",
        enabled: true,
      });
    }

    setRows(updatedRows);
  };

  // 处理启用/禁用状态变更
  const handleEnabledChange = (index, checked) => {
    const updatedRows = [...rows];
    updatedRows[index].enabled = checked;
    setRows(updatedRows);
  };

  // 处理删除行
  const handleDeleteRow = (index) => {
    // 不允许删除最后一个空行
    if (index === rows.length - 1 && rows[index].key === "") {
      return;
    }

    const updatedRows = [...rows];
    updatedRows.splice(index, 1);

    // 确保始终有一个空行用于添加
    if (
      updatedRows.length === 0 ||
      updatedRows[updatedRows.length - 1].key !== ""
    ) {
      updatedRows.push({
        id: `new-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
        key: "",
        value: "",
        enabled: true,
      });
    }

    setRows(updatedRows);
  };

  return (
    <div className="kv-table-field">
      <label className="field-label">{label}</label>

      <Table compact size="small" className="kv-table" celled>
        <Table.Header>
          <Table.Row>
            <Table.HeaderCell width={1} textAlign="center"></Table.HeaderCell>
            <Table.HeaderCell width={6}>Key</Table.HeaderCell>
            <Table.HeaderCell width={8}>Value</Table.HeaderCell>
            <Table.HeaderCell width={1}></Table.HeaderCell>
          </Table.Row>
        </Table.Header>

        <Table.Body>
          {rows.map((row, index) => (
            <Table.Row
              key={row.id}
              className={!row.enabled ? "disabled-row" : ""}
            >
              <Table.Cell
                className="checkbox-cell"
                style={{
                  padding: "0",
                  verticalAlign: "middle",
                  textAlign: "center",
                  height: "100%",
                  position: "relative",
                }}
              >
                <div
                  style={{
                    position: "absolute",
                    top: "0",
                    left: "0",
                    right: "0",
                    bottom: "0",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                  }}
                >
                  {/* 使用原生的input替代Semantic UI Checkbox */}
                  <input
                    type="checkbox"
                    checked={row.enabled}
                    onChange={(e) =>
                      handleEnabledChange(index, e.target.checked)
                    }
                    style={{
                      margin: 0,
                      padding: 0,
                      width: "16px",
                      height: "16px",
                    }}
                  />
                </div>
              </Table.Cell>
              <Table.Cell>
                <Input
                  fluid
                  transparent
                  placeholder={keyPlaceholder}
                  value={row.key}
                  onChange={(e, { value }) =>
                    handleRowChange(index, "key", value)
                  }
                  className={!row.enabled ? "disabled-input" : ""}
                />
              </Table.Cell>
              <Table.Cell>
                <Input
                  fluid
                  transparent
                  placeholder={valuePlaceholder}
                  value={row.value}
                  onChange={(e, { value }) =>
                    handleRowChange(index, "value", value)
                  }
                  className={!row.enabled ? "disabled-input" : ""}
                />
              </Table.Cell>
              <Table.Cell textAlign="center">
                <Button
                  basic
                  compact
                  size="tiny"
                  onClick={() => handleDeleteRow(index)}
                  disabled={index === rows.length - 1 && row.key === ""}
                  style={{ padding: "5px" }}
                >
                  <TrashIcon />
                </Button>
              </Table.Cell>
            </Table.Row>
          ))}
        </Table.Body>
      </Table>
    </div>
  );
};

export default KVTableField;



================================================================================
# 文件: src/NodeSidebar.js
# 行数: 120
================================================================================

import React from "react";
import {
  StartIcon,
  EndIcon,
  HttpIcon,
  SqlIcon,
  RedisIcon,
  SwitchIcon,
  LoopIcon,
  ScriptIcon,
  VariableIcon,
} from "./components/nodes";

const NodeSidebar = () => {
  const onDragStart = (event, nodeType) => {
    event.dataTransfer.setData("application/reactflow/type", nodeType);
    event.dataTransfer.effectAllowed = "move";
  };

  return (
    <div className="sidebar">
      <h3>业务节点</h3>
      <div
        className="node-template node-http"
        onDragStart={(e) => onDragStart(e, "HTTP")}
        draggable
      >
        <div className="template-icon">
          <HttpIcon />
        </div>
        <span>HTTP 节点</span>
      </div>
      <div
        className="node-template node-sql"
        onDragStart={(e) => onDragStart(e, "SQL")}
        draggable
      >
        <div className="template-icon">
          <SqlIcon />
        </div>
        <span>SQL 节点</span>
      </div>
      <div
        className="node-template node-redis"
        onDragStart={(e) => onDragStart(e, "REDIS")}
        draggable
      >
        <div className="template-icon">
          <RedisIcon />
        </div>
        <span>Redis 节点</span>
      </div>
      <div
        className="node-template node-script"
        onDragStart={(e) => onDragStart(e, "SCRIPT")}
        draggable
      >
        <div className="template-icon">
          <ScriptIcon />
        </div>
        <span>脚本节点</span>
      </div>

      <h3>逻辑节点</h3>
      <div
        className="node-template node-start"
        onDragStart={(e) => onDragStart(e, "START")}
        draggable
      >
        <div className="template-icon">
          <StartIcon />
        </div>
        <span>开始节点</span>
      </div>
      <div
        className="node-template node-end"
        onDragStart={(e) => onDragStart(e, "END")}
        draggable
      >
        <div className="template-icon">
          <EndIcon />
        </div>
        <span>结束节点</span>
      </div>
      <div
        className="node-template node-switch"
        onDragStart={(e) => onDragStart(e, "SWITCH")}
        draggable
      >
        <div className="template-icon">
          <SwitchIcon />
        </div>
        <span>条件分支节点</span>
      </div>
      <div
        className="node-template loop-node"
        onDragStart={(e) => onDragStart(e, "LOOP")}
        draggable
      >
        <div className="template-icon">
          <LoopIcon />
        </div>
        <span>循环节点</span>
      </div>
      <div
        className="node-template node-variable"
        onDragStart={(e) => onDragStart(e, "SET_VARIABLE")}
        draggable
      >
        <div className="template-icon">
          <VariableIcon />
        </div>
        <span>变量赋值节点</span>
      </div>
    </div>
  );
};

export default NodeSidebar;



================================================================================
# 文件: src/SimpleZoomIndicator.js
# 行数: 57
================================================================================

import React, { useState, useEffect } from "react";

// 简单的缩放指示器组件
const SimpleZoomIndicator = ({ reactFlowInstance }) => {
  const [zoom, setZoom] = useState(100); // 默认值为100%（从75%改为100%）

  useEffect(() => {
    // 仅在 reactFlowInstance 存在时执行
    if (!reactFlowInstance) return;

    // 初始化时更新缩放值
    const currentZoom = reactFlowInstance.getZoom();
    setZoom(Math.round(currentZoom * 100));

    // 创建一个监听函数来获取viewport变化
    const onViewportChange = () => {
      const currentZoom = reactFlowInstance.getZoom();
      setZoom(Math.round(currentZoom * 100));
    };

    // 添加一个事件监听器来检测鼠标滚轮事件，这会影响缩放
    const handleWheel = () => {
      // 延迟一点点执行，确保缩放已经完成
      setTimeout(() => {
        const currentZoom = reactFlowInstance.getZoom();
        setZoom(Math.round(currentZoom * 100));
      }, 10);
    };

    // 为窗口添加事件监听器
    window.addEventListener("wheel", handleWheel);

    // 如果用户使用控制按钮缩放，我们需要定期检查缩放值
    const intervalId = setInterval(() => {
      if (reactFlowInstance) {
        const currentZoom = reactFlowInstance.getZoom();
        const roundedZoom = Math.round(currentZoom * 100);
        if (roundedZoom !== zoom) {
          setZoom(roundedZoom);
        }
      }
    }, 200); // 200ms 间隔，足够频繁但不会造成性能问题

    // 清理函数
    return () => {
      window.removeEventListener("wheel", handleWheel);
      clearInterval(intervalId);
    };
  }, [reactFlowInstance, zoom]);

  if (!reactFlowInstance) return null;

  return <div className="simple-zoom-indicator">{zoom}%</div>;
};

export default SimpleZoomIndicator;



================================================================================
# 文件: src/combined-node-config.json
# 行数: 4000
================================================================================

{
  "START": {
    "schema": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "title": "节点类型",
          "default": "START",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "title": "节点ID",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "title": "节点描述",
          "description": "流程的起始点，描述该流程的主要功能和用途"
        },
        "tags": {
          "type": "string",
          "title": "流程标签",
          "description": "为流程添加标签，多个标签用逗号分隔，便于全局搜索"
        },
        "errorStrategy": {
          "type": "string",
          "title": "错误处理策略",
          "enum": ["FAIL", "IGNORE", "RETRY"],
          "enumNames": ["终止流程", "忽略错误", "重试执行"],
          "default": "FAIL",
          "description": "当节点执行失败时采取的策略"
        },
        "timeout": {
          "type": "integer",
          "title": "超时时间(毫秒)",
          "minimum": 1000,
          "maximum": 300000,
          "default": 30000,
          "description": "节点执行的最长等待时间"
        },
        "maxRetries": {
          "type": "integer",
          "title": "最大重试次数",
          "minimum": 1,
          "maximum": 10,
          "default": 3
        },
        "retryInterval": {
          "type": "integer",
          "title": "重试间隔(毫秒)",
          "minimum": 500,
          "maximum": 60000,
          "default": 3000
        },
        "exponentialBackoff": {
          "type": "boolean",
          "title": "启用指数退避",
          "default": true,
          "description": "每次重试时间间隔逐渐增加"
        },
        "fallbackResponse": {
          "type": "string",
          "title": "失败返回值",
          "description": "节点失败时返回的默认JSON数据",
          "default": "{}"
        },
        "debugParams": {
          "type": "string",
          "title": "调试参数"
        },
        "debugResult": {
          "type": "string",
          "title": "返回结果",
          "readOnly": true
        },
        "debugButton": {
          "type": "string",
          "title": "",
          "default": "debug"
        },
        "nodeJsonData": {
          "type": "string",
          "title": "节点数据定义",
          "readOnly": true
        }
      },
      "dependencies": {
        "errorStrategy": {
          "oneOf": [
            {
              "properties": {
                "errorStrategy": { "enum": ["RETRY"] }
              },
              "required": ["maxRetries", "retryInterval"]
            },
            {
              "properties": {
                "errorStrategy": { "enum": ["FAIL", "IGNORE"] }
              }
            }
          ]
        }
      }
    },
    "uiSchema": {
      "nodeType": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "nodeId": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default",
            "fontFamily": "monospace"
          }
        }
      },
      "description": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "请输入流程描述..."
      },
      "tags": {
        "ui:placeholder": "例如: 库存管理,订单处理,自动化",
        "ui:help": "添加标签，便于对流程进行分类和搜索"
      },
      "errorStrategy": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "timeout": {
        "ui:widget": "updown"
      },
      "maxRetries": {
        "ui:widget": "updown"
      },
      "retryInterval": {
        "ui:widget": "updown"
      },
      "exponentialBackoff": {
        "ui:widget": "checkbox"
      },
      "fallbackResponse": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "输入失败时的默认返回值，例如: {\"status\": \"error\", \"message\": \"处理失败\"}"
      },
      "debugParams": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "{\n  \"initialData\": {\n    \"userId\": 12345,\n    \"requestId\": \"req-123\"\n  },\n  \"environment\": \"dev\"\n}"
      },
      "debugResult": {
        "ui:widget": "textarea",
        "ui:disabled": true,
        "ui:options": {
          "rows": 8,
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "debugButton": {
        "ui:field": "ButtonField",
        "ui:options": {
          "label": "运行调试",
          "action": "debug",
          "color": "primary",
          "loadingText": "执行中..."
        }
      },
      "nodeJsonData": {
        "ui:widget": "textarea",
        "ui:readonly": true,
        "ui:options": {
          "rows": 20,
          "customStyle": {
            "fontFamily": "monospace",
            "fontSize": "12px",
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50"
          }
        }
      },
      "ui:submitButtonOptions": {
        "norender": true
      }
    },
    "panelConfig": {
      "title": "开始节点",
      "description": "流程的起始点",
      "tabs": [
        {
          "id": "basic",
          "title": "基本属性",
          "fields": ["nodeType", "nodeId", "description", "tags"]
        },
        {
          "id": "error",
          "title": "异常处理",
          "fields": [
            "errorStrategy",
            "timeout",
            "maxRetries",
            "retryInterval",
            "exponentialBackoff",
            "fallbackResponse"
          ]
        },
        {
          "id": "debug",
          "title": "节点调试",
          "fields": ["debugParams", "debugButton", "debugResult"]
        },
        {
          "id": "data",
          "title": "数据定义",
          "fields": ["nodeJsonData"]
        }
      ]
    }
  },
  "END": {
    "schema": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "title": "节点类型",
          "default": "END",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "title": "节点ID",
          "readOnly": true
        },
        "enableProcessScript": {
          "type": "boolean",
          "title": "启用返回处理脚本",
          "default": false
        },
        "errorStrategy": {
          "type": "string",
          "title": "错误处理策略",
          "enum": ["FAIL", "IGNORE"],
          "enumNames": ["终止流程", "忽略错误"],
          "default": "FAIL",
          "description": "当节点执行失败时采取的策略"
        },
        "timeout": {
          "type": "integer",
          "title": "超时时间(毫秒)",
          "minimum": 1000,
          "maximum": 300000,
          "default": 30000,
          "description": "节点执行的最长等待时间"
        },
        "fallbackResponse": {
          "type": "string",
          "title": "失败返回值",
          "description": "节点失败时返回的默认JSON数据",
          "default": "{}"
        },
        "debugParams": {
          "type": "string",
          "title": "调试参数",
          "description": "用于测试结束节点的输入参数（JSON格式）"
        },
        "debugResult": {
          "type": "string",
          "title": "返回结果",
          "readOnly": true
        },
        "debugButton": {
          "type": "string",
          "title": "",
          "default": "debug"
        },
        "nodeJsonData": {
          "type": "string",
          "title": "节点数据定义",
          "readOnly": true
        }
      },
      "dependencies": {
        "enableProcessScript": {
          "oneOf": [
            {
              "properties": {
                "enableProcessScript": { "enum": [true] },
                "scriptLanguage": {
                  "type": "string",
                  "title": "脚本语言",
                  "enum": ["javascript", "groovy", "python"],
                  "default": "javascript"
                },
                "processScript": {
                  "type": "string",
                  "title": "处理脚本",
                  "description": "结束节点的处理脚本，用于生成返回结果",
                  "default": "/**\n * 结束节点处理函数\n * @param {Object} input - 输入数据，包含流程上下文和所有变量\n * @param {Object} context - 执行上下文，包含节点信息和环境变量\n * @returns {Object} - 返回值对象，包含 statusCode, headers 和 body\n */\nfunction processEnd(input, context) {\n  // 访问流程变量\n  const { variables, payload } = input;\n  \n  // 默认成功返回\n  return {\n    statusCode: 200,\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      status: \"success\",\n      data: payload\n    })\n  };\n}"
                }
              },
              "required": ["scriptLanguage", "processScript"]
            },
            {
              "properties": {
                "enableProcessScript": { "enum": [false] }
              }
            }
          ]
        }
      }
    },
    "uiSchema": {
      "nodeType": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "nodeId": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default",
            "fontFamily": "monospace"
          }
        }
      },
      "enableProcessScript": {
        "ui:widget": "checkbox"
      },
      "scriptLanguage": {
        "ui:widget": "select"
      },
      "processScript": {
        "ui:field": "CodeEditorField",
        "ui:options": {
          "height": "300px"
        }
      },
      "errorStrategy": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "timeout": {
        "ui:widget": "updown"
      },
      "fallbackResponse": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "输入失败时的默认返回值，例如: {\"status\": \"error\", \"message\": \"执行失败\"}"
      },
      "debugParams": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "{\n  \"payload\": {\n    \"userId\": 123,\n    \"data\": {\n      \"status\": \"completed\",\n      \"results\": [1, 2, 3]\n    }\n  },\n  \"variables\": {\n    \"processId\": \"ABC-123\"\n  }\n}"
      },
      "debugResult": {
        "ui:widget": "textarea",
        "ui:disabled": true,
        "ui:options": {
          "rows": 8,
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "debugButton": {
        "ui:field": "ButtonField",
        "ui:options": {
          "label": "运行调试",
          "action": "debug",
          "color": "primary",
          "loadingText": "执行中..."
        }
      },
      "nodeJsonData": {
        "ui:widget": "textarea",
        "ui:readonly": true,
        "ui:options": {
          "rows": 20,
          "customStyle": {
            "fontFamily": "monospace",
            "fontSize": "12px",
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50"
          }
        }
      },
      "ui:submitButtonOptions": {
        "norender": true
      }
    },
    "panelConfig": {
      "title": "结束节点",
      "description": "流程的终止点",
      "tabs": [
        {
          "id": "basic",
          "title": "基本属性",
          "fields": [
            "nodeType",
            "nodeId",
            "enableProcessScript",
            "scriptLanguage",
            "processScript"
          ]
        },
        {
          "id": "error",
          "title": "异常处理",
          "fields": ["errorStrategy", "timeout", "fallbackResponse"]
        },
        {
          "id": "debug",
          "title": "节点调试",
          "fields": ["debugParams", "debugButton", "debugResult"]
        },
        {
          "id": "data",
          "title": "数据定义",
          "fields": ["nodeJsonData"]
        }
      ]
    }
  },
  "HTTP": {
    "schema": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "title": "节点类型",
          "default": "HTTP",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "title": "节点ID",
          "readOnly": true
        },
        "method": {
          "type": "string",
          "title": "请求方法",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "HEAD",
            "OPTIONS",
            "TRACE"
          ],
          "default": "GET"
        },
        "url": {
          "type": "string",
          "title": "URL",
          "description": "请求的目标URL"
        },
        "headers": {
          "type": "object",
          "title": "HTTP请求头",
          "description": "添加HTTP请求头，如Content-Type、Authorization等",
          "additionalProperties": {
            "type": "string"
          }
        },
        "params": {
          "type": "object",
          "title": "URL查询参数",
          "description": "添加URL查询参数(Query String)，将会附加到URL中(?key=value&key2=value2)",
          "additionalProperties": {
            "type": "string"
          }
        },
        "contentType": {
          "type": "string",
          "title": "请求体格式",
          "enum": [
            "none",
            "form-data",
            "x-www-form-urlencoded",
            "json",
            "text",
            "javascript",
            "html",
            "xml",
            "binary"
          ],
          "enumNames": [
            "none",
            "form-data",
            "x-www-form-urlencoded",
            "json",
            "text",
            "javascript",
            "html",
            "xml",
            "binary"
          ],
          "default": "none"
        },
        "enableAuth": {
          "type": "boolean",
          "title": "启用认证",
          "default": false
        },
        "enableAdvanced": {
          "type": "boolean",
          "title": "启用高级选项",
          "default": false
        },
        "errorStrategy": {
          "type": "string",
          "title": "错误处理策略",
          "enum": ["FAIL", "IGNORE", "RETRY"],
          "enumNames": ["终止流程", "忽略错误", "重试执行"],
          "default": "FAIL",
          "description": "当节点执行失败时采取的策略"
        },
        "timeout": {
          "type": "integer",
          "title": "超时时间(毫秒)",
          "minimum": 1000,
          "maximum": 300000,
          "default": 30000,
          "description": "节点执行的最长等待时间"
        },
        "maxRetries": {
          "type": "integer",
          "title": "最大重试次数",
          "minimum": 1,
          "maximum": 10,
          "default": 3
        },
        "retryInterval": {
          "type": "integer",
          "title": "重试间隔(毫秒)",
          "minimum": 500,
          "maximum": 60000,
          "default": 3000
        },
        "exponentialBackoff": {
          "type": "boolean",
          "title": "启用指数退避",
          "default": true,
          "description": "每次重试时间间隔逐渐增加"
        },
        "retryStatusCodes": {
          "type": "string",
          "title": "重试状态码",
          "description": "遇到这些状态码时进行重试",
          "default": "408,429,500,502,503,504"
        },
        "fallbackResponse": {
          "type": "string",
          "title": "失败返回值",
          "description": "节点失败时返回的默认JSON数据",
          "default": "{}"
        },
        "debugParams": {
          "type": "string",
          "title": "调试参数"
        },
        "debugResult": {
          "type": "string",
          "title": "返回结果",
          "readOnly": true
        },
        "debugButton": {
          "type": "string",
          "title": "",
          "default": "debug"
        },
        "nodeJsonData": {
          "type": "string",
          "title": "节点数据定义",
          "readOnly": true
        }
      },
      "required": ["url", "method"],
      "dependencies": {
        "enableAuth": {
          "oneOf": [
            {
              "properties": {
                "enableAuth": { "enum": [true] },
                "authType": {
                  "type": "string",
                  "title": "认证类型",
                  "enum": [
                    "no_auth",
                    "api_key",
                    "bearer_token",
                    "basic_auth",
                    "oauth2",
                    "jwt_bearer"
                  ],
                  "enumNames": [
                    "No Auth",
                    "API Key",
                    "Bearer Token",
                    "Basic Auth",
                    "OAuth 2.0",
                    "JWT Bearer"
                  ],
                  "default": "no_auth"
                }
              },
              "required": ["authType"],
              "allOf": [
                {
                  "if": {
                    "properties": { "authType": { "enum": ["basic_auth"] } }
                  },
                  "then": {
                    "properties": {
                      "username": {
                        "type": "string",
                        "title": "用户名",
                        "description": "Basic认证用户名"
                      },
                      "password": {
                        "type": "string",
                        "title": "密码",
                        "description": "Basic认证密码"
                      }
                    },
                    "required": ["username", "password"]
                  }
                },
                {
                  "if": {
                    "properties": {
                      "authType": { "enum": ["bearer_token", "jwt_bearer"] }
                    }
                  },
                  "then": {
                    "properties": {
                      "bearerToken": {
                        "type": "string",
                        "title": "Token",
                        "description": "认证令牌"
                      }
                    },
                    "required": ["bearerToken"]
                  }
                },
                {
                  "if": {
                    "properties": { "authType": { "enum": ["api_key"] } }
                  },
                  "then": {
                    "properties": {
                      "apiKeyName": {
                        "type": "string",
                        "title": "API Key名称",
                        "description": "API Key认证的键名"
                      },
                      "apiKeyValue": {
                        "type": "string",
                        "title": "API Key值",
                        "description": "API Key认证的键值"
                      },
                      "apiKeyLocation": {
                        "type": "string",
                        "title": "API Key位置",
                        "enum": ["header", "query"],
                        "enumNames": ["Header", "Query Parameter"],
                        "default": "header",
                        "description": "API Key添加位置"
                      }
                    },
                    "required": ["apiKeyName", "apiKeyValue", "apiKeyLocation"]
                  }
                },
                {
                  "if": {
                    "properties": { "authType": { "enum": ["oauth2"] } }
                  },
                  "then": {
                    "properties": {
                      "oauth2Token": {
                        "type": "string",
                        "title": "Access Token",
                        "description": "OAuth 2.0访问令牌"
                      },
                      "oauth2TokenType": {
                        "type": "string",
                        "title": "Token类型",
                        "enum": ["Bearer", "MAC"],
                        "default": "Bearer",
                        "description": "令牌类型"
                      }
                    },
                    "required": ["oauth2Token"]
                  }
                }
              ]
            },
            {
              "properties": {
                "enableAuth": { "enum": [false] }
              }
            }
          ]
        },
        "enableAdvanced": {
          "oneOf": [
            {
              "properties": {
                "enableAdvanced": { "enum": [true] },
                "followRedirects": {
                  "type": "boolean",
                  "title": "跟随重定向",
                  "default": true,
                  "description": "自动跟随3xx重定向响应"
                },
                "validateSSL": {
                  "type": "boolean",
                  "title": "验证SSL证书",
                  "default": true,
                  "description": "验证服务器SSL证书"
                },
                "responseType": {
                  "type": "string",
                  "title": "响应格式",
                  "enum": ["json", "text", "arraybuffer", "blob"],
                  "default": "json",
                  "description": "预期的响应数据格式"
                }
              },
              "required": ["followRedirects", "validateSSL", "responseType"]
            },
            {
              "properties": {
                "enableAdvanced": { "enum": [false] }
              }
            }
          ]
        },
        "errorStrategy": {
          "oneOf": [
            {
              "properties": {
                "errorStrategy": { "enum": ["RETRY"] }
              },
              "required": ["maxRetries", "retryInterval", "retryStatusCodes"]
            },
            {
              "properties": {
                "errorStrategy": { "enum": ["FAIL", "IGNORE"] }
              }
            }
          ]
        },
        "method": {
          "oneOf": [
            {
              "properties": {
                "method": { "enum": ["POST", "PUT", "PATCH"] }
              }
            },
            {
              "properties": {
                "method": {
                  "enum": ["GET", "DELETE", "HEAD", "OPTIONS", "TRACE"]
                },
                "contentType": { "enum": ["none"] }
              }
            }
          ]
        },
        "contentType": {
          "oneOf": [
            {
              "properties": {
                "contentType": { "enum": ["none"] }
              }
            },
            {
              "properties": {
                "contentType": { "enum": ["form-data"] },
                "formDataBody": {
                  "type": "object",
                  "title": "Form Data表单字段",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": ["formDataBody"]
            },
            {
              "properties": {
                "contentType": { "enum": ["x-www-form-urlencoded"] },
                "urlEncodedBody": {
                  "type": "object",
                  "title": "URL编码表单字段",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": ["urlEncodedBody"]
            },
            {
              "properties": {
                "contentType": { "enum": ["json"] },
                "jsonBody": {
                  "type": "string",
                  "title": "JSON数据",
                  "description": "请输入有效的JSON数据"
                }
              },
              "required": ["jsonBody"]
            },
            {
              "properties": {
                "contentType": { "enum": ["text"] },
                "textBody": {
                  "type": "string",
                  "title": "文本内容",
                  "description": "请输入纯文本内容"
                }
              },
              "required": ["textBody"]
            },
            {
              "properties": {
                "contentType": { "enum": ["javascript"] },
                "jsBody": {
                  "type": "string",
                  "title": "JavaScript代码",
                  "description": "请输入JavaScript代码"
                }
              },
              "required": ["jsBody"]
            },
            {
              "properties": {
                "contentType": { "enum": ["html"] },
                "htmlBody": {
                  "type": "string",
                  "title": "HTML代码",
                  "description": "请输入HTML标记语言"
                }
              },
              "required": ["htmlBody"]
            },
            {
              "properties": {
                "contentType": { "enum": ["xml"] },
                "xmlBody": {
                  "type": "string",
                  "title": "XML数据",
                  "description": "请输入XML标记语言"
                }
              },
              "required": ["xmlBody"]
            },
            {
              "properties": {
                "contentType": { "enum": ["binary"] },
                "binaryBody": {
                  "type": "string",
                  "title": "二进制文件",
                  "description": "选择要上传的文件",
                  "format": "binary"
                }
              },
              "required": ["binaryBody"]
            }
          ]
        }
      }
    },
    "uiSchema": {
      "ui:order": [
        "nodeType",
        "nodeId",
        "method",
        "url",
        "headers",
        "params",
        "contentType",
        "formDataBody",
        "urlEncodedBody",
        "jsonBody",
        "textBody",
        "jsBody",
        "htmlBody",
        "xmlBody",
        "binaryBody",
        "enableAuth",
        "authType",
        "username",
        "password",
        "bearerToken",
        "apiKeyName",
        "apiKeyValue",
        "apiKeyLocation",
        "oauth2Token",
        "oauth2TokenType",
        "enableAdvanced",
        "followRedirects",
        "validateSSL",
        "responseType",
        "*"
      ],
      "nodeType": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "nodeId": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default",
            "fontFamily": "monospace"
          }
        }
      },
      "method": {
        "ui:widget": "select"
      },
      "url": {
        "ui:placeholder": "https://api.example.com/v1/resource",
        "ui:options": {
          "inputType": "url"
        }
      },
      "headers": {
        "ui:field": "KVTableField",
        "ui:options": {
          "keyPlaceholder": "Content-Type",
          "valuePlaceholder": "application/json",
          "label": "HTTP请求头"
        }
      },
      "params": {
        "ui:field": "KVTableField",
        "ui:options": {
          "keyPlaceholder": "param1",
          "valuePlaceholder": "value1",
          "label": "URL查询参数"
        }
      },
      "contentType": {
        "ui:widget": "select",
        "ui:help": "选择请求体的数据格式"
      },
      "formDataBody": {
        "ui:field": "KVTableField",
        "ui:options": {
          "keyPlaceholder": "name",
          "valuePlaceholder": "value",
          "label": "表单字段"
        }
      },
      "urlEncodedBody": {
        "ui:field": "KVTableField",
        "ui:options": {
          "keyPlaceholder": "name",
          "valuePlaceholder": "value",
          "label": "表单字段"
        }
      },
      "jsonBody": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 8
        },
        "ui:placeholder": "请输入有效的JSON数据，例如: {\n  \"key\": \"value\"\n}"
      },
      "textBody": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 8
        },
        "ui:placeholder": "请输入纯文本内容"
      },
      "jsBody": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 8
        },
        "ui:placeholder": "请输入JavaScript代码"
      },
      "htmlBody": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 8
        },
        "ui:placeholder": "请输入HTML代码"
      },
      "xmlBody": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 8
        },
        "ui:placeholder": "请输入XML代码"
      },
      "binaryBody": {
        "ui:widget": "file",
        "ui:options": {
          "accept": "*/*"
        },
        "ui:help": "选择要上传的文件"
      },
      "enableAuth": {
        "ui:widget": "checkbox"
      },
      "authType": {
        "ui:widget": "select"
      },
      "username": {
        "ui:placeholder": "请输入用户名"
      },
      "password": {
        "ui:widget": "password",
        "ui:placeholder": "请输入密码"
      },
      "bearerToken": {
        "ui:placeholder": "请输入Token"
      },
      "apiKeyName": {
        "ui:placeholder": "请输入API Key名称"
      },
      "apiKeyValue": {
        "ui:placeholder": "请输入API Key值"
      },
      "apiKeyLocation": {
        "ui:widget": "select"
      },
      "oauth2Token": {
        "ui:placeholder": "请输入OAuth 2.0访问令牌"
      },
      "oauth2TokenType": {
        "ui:widget": "select"
      },
      "enableAdvanced": {
        "ui:widget": "checkbox"
      },
      "followRedirects": {
        "ui:widget": "checkbox"
      },
      "validateSSL": {
        "ui:widget": "checkbox"
      },
      "responseType": {
        "ui:widget": "select"
      },
      "errorStrategy": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "timeout": {
        "ui:widget": "updown"
      },
      "maxRetries": {
        "ui:widget": "updown"
      },
      "retryInterval": {
        "ui:widget": "updown"
      },
      "exponentialBackoff": {
        "ui:widget": "checkbox"
      },
      "retryStatusCodes": {
        "ui:placeholder": "例如: 408,429,500,502,503,504"
      },
      "fallbackResponse": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "输入失败时的默认返回值，例如: {\"status\": \"error\", \"message\": \"请求失败\"}"
      },
      "debugParams": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "{\n  \"mockStatusCode\": 200,\n  \"mockResponse\": {\n    \"data\": \"示例响应数据\",\n    \"status\": \"success\"\n  }\n}"
      },
      "debugResult": {
        "ui:widget": "textarea",
        "ui:disabled": true,
        "ui:options": {
          "rows": 8,
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "debugButton": {
        "ui:field": "ButtonField",
        "ui:options": {
          "label": "运行调试",
          "action": "debug",
          "color": "primary",
          "loadingText": "执行中..."
        }
      },
      "nodeJsonData": {
        "ui:widget": "textarea",
        "ui:readonly": true,
        "ui:options": {
          "rows": 20,
          "customStyle": {
            "fontFamily": "monospace",
            "fontSize": "12px",
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50"
          }
        }
      },
      "ui:submitButtonOptions": {
        "norender": true
      }
    },
    "panelConfig": {
      "title": "HTTP 请求",
      "description": "发送HTTP请求到外部API",
      "tabs": [
        {
          "id": "basic",
          "title": "请求配置",
          "fields": [
            "nodeType",
            "nodeId",
            "method",
            "url",
            "headers",
            "params",
            "contentType",
            "formDataBody",
            "urlEncodedBody",
            "jsonBody",
            "textBody",
            "jsBody",
            "htmlBody",
            "xmlBody",
            "binaryBody",
            "enableAuth",
            "authType",
            "username",
            "password",
            "bearerToken",
            "apiKeyName",
            "apiKeyValue",
            "apiKeyLocation",
            "oauth2Token",
            "oauth2TokenType",
            "enableAdvanced",
            "followRedirects",
            "validateSSL",
            "responseType"
          ]
        },
        {
          "id": "error",
          "title": "异常处理",
          "fields": [
            "errorStrategy",
            "timeout",
            "maxRetries",
            "retryInterval",
            "exponentialBackoff",
            "retryStatusCodes",
            "fallbackResponse"
          ]
        },
        {
          "id": "debug",
          "title": "节点调试",
          "fields": ["debugParams", "debugButton", "debugResult"]
        },
        {
          "id": "data",
          "title": "数据定义",
          "fields": ["nodeJsonData"]
        }
      ]
    }
  },
  "SQL": {
    "schema": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "title": "节点类型",
          "default": "SQL",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "title": "节点ID",
          "readOnly": true
        },
        "databaseType": {
          "type": "string",
          "title": "数据库类型",
          "enum": ["MySQL", "PostgreSQL", "Oracle", "SQLServer", "SQLite"],
          "default": "MySQL"
        },
        "hostname": {
          "type": "string",
          "title": "主机地址",
          "description": "数据库服务器地址或IP"
        },
        "port": {
          "type": "integer",
          "title": "端口",
          "default": 3306
        },
        "database": {
          "type": "string",
          "title": "数据库名",
          "description": "要连接的数据库名称"
        },
        "username": {
          "type": "string",
          "title": "用户名"
        },
        "password": {
          "type": "string",
          "title": "密码"
        },
        "operation": {
          "type": "string",
          "title": "操作类型",
          "enum": ["QUERY", "UPDATE", "INSERT", "DELETE"],
          "default": "QUERY"
        },
        "sql": {
          "type": "string",
          "title": "SQL语句",
          "description": "支持#{变量}参数化，例如: SELECT * FROM users WHERE id = #{userId}"
        },
        "maxRows": {
          "type": "integer",
          "title": "最大行数",
          "description": "限制查询返回的最大记录数，系统会自动添加相应的LIMIT子句",
          "default": 100,
          "minimum": 1,
          "maximum": 200
        },
        "errorStrategy": {
          "type": "string",
          "title": "错误处理策略",
          "enum": ["FAIL", "IGNORE", "RETRY"],
          "enumNames": ["终止流程", "忽略错误", "重试执行"],
          "default": "FAIL",
          "description": "当节点执行失败时采取的策略"
        },
        "timeout": {
          "type": "integer",
          "title": "超时时间(毫秒)",
          "minimum": 1000,
          "maximum": 300000,
          "default": 30000,
          "description": "节点执行的最长等待时间"
        },
        "maxRetries": {
          "type": "integer",
          "title": "最大重试次数",
          "minimum": 1,
          "maximum": 10,
          "default": 3
        },
        "retryInterval": {
          "type": "integer",
          "title": "重试间隔(毫秒)",
          "minimum": 500,
          "maximum": 60000,
          "default": 3000
        },
        "exponentialBackoff": {
          "type": "boolean",
          "title": "启用指数退避",
          "default": true,
          "description": "每次重试时间间隔逐渐增加"
        },
        "fallbackResponse": {
          "type": "string",
          "title": "失败返回值",
          "description": "节点失败时返回的默认JSON数据",
          "default": "{}"
        },
        "debugParams": {
          "type": "string",
          "title": "调试参数"
        },
        "debugResult": {
          "type": "string",
          "title": "返回结果",
          "readOnly": true
        },
        "debugButton": {
          "type": "string",
          "title": "",
          "default": "debug"
        },
        "nodeJsonData": {
          "type": "string",
          "title": "节点数据定义",
          "readOnly": true
        }
      },
      "required": [
        "databaseType",
        "hostname",
        "port",
        "database",
        "username",
        "password",
        "operation",
        "sql"
      ],
      "dependencies": {
        "errorStrategy": {
          "oneOf": [
            {
              "properties": {
                "errorStrategy": { "enum": ["RETRY"] }
              },
              "required": ["maxRetries", "retryInterval"]
            },
            {
              "properties": {
                "errorStrategy": { "enum": ["FAIL", "IGNORE"] }
              }
            }
          ]
        }
      }
    },
    "uiSchema": {
      "nodeType": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "nodeId": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default",
            "fontFamily": "monospace"
          }
        }
      },
      "databaseType": {
        "ui:widget": "select"
      },
      "hostname": {
        "ui:placeholder": "例如: localhost 或 db.example.com"
      },
      "port": {
        "ui:widget": "updown"
      },
      "database": {
        "ui:placeholder": "例如: my_database"
      },
      "username": {
        "ui:placeholder": "例如: dbuser"
      },
      "password": {
        "ui:widget": "password",
        "ui:placeholder": "请输入数据库密码"
      },
      "operation": {
        "ui:widget": "select"
      },
      "sql": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "SELECT * FROM users WHERE user_id = #{userId} AND status = #{status}",
        "ui:help": "可使用#{变量}引用流程变量，${}用于动态表名等"
      },
      "maxRows": {
        "ui:widget": "updown"
      },
      "errorStrategy": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "timeout": {
        "ui:widget": "updown"
      },
      "maxRetries": {
        "ui:widget": "updown"
      },
      "retryInterval": {
        "ui:widget": "updown"
      },
      "exponentialBackoff": {
        "ui:widget": "checkbox"
      },
      "fallbackResponse": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "输入失败时的默认返回值，例如: {\"status\": \"error\", \"message\": \"查询失败\"}"
      },
      "debugParams": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "{\n  \"userId\": 123,\n  \"status\": \"active\",\n  \"mockResult\": [...]\n}"
      },
      "debugResult": {
        "ui:widget": "textarea",
        "ui:disabled": true,
        "ui:options": {
          "rows": 8,
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "debugButton": {
        "ui:field": "ButtonField",
        "ui:options": {
          "label": "运行调试",
          "action": "debug",
          "color": "primary",
          "loadingText": "执行中..."
        }
      },
      "nodeJsonData": {
        "ui:widget": "textarea",
        "ui:readonly": true,
        "ui:options": {
          "rows": 20,
          "customStyle": {
            "fontFamily": "monospace",
            "fontSize": "12px",
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50"
          }
        }
      },
      "ui:submitButtonOptions": {
        "norender": true
      }
    },
    "panelConfig": {
      "title": "SQL 节点",
      "description": "执行SQL数据库操作",
      "tabs": [
        {
          "id": "basic",
          "title": "基本属性",
          "fields": [
            "nodeType",
            "nodeId",
            "databaseType",
            "hostname",
            "port",
            "database",
            "username",
            "password",
            "operation",
            "sql",
            "maxRows"
          ]
        },
        {
          "id": "error",
          "title": "异常处理",
          "fields": [
            "errorStrategy",
            "timeout",
            "maxRetries",
            "retryInterval",
            "exponentialBackoff",
            "fallbackResponse"
          ]
        },
        {
          "id": "debug",
          "title": "节点调试",
          "fields": ["debugParams", "debugButton", "debugResult"]
        },
        {
          "id": "data",
          "title": "数据定义",
          "fields": ["nodeJsonData"]
        }
      ]
    }
  },
  "REDIS": {
    "schema": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "title": "节点类型",
          "default": "REDIS",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "title": "节点ID",
          "readOnly": true
        },
        "hostname": {
          "type": "string",
          "title": "主机地址",
          "description": "Redis服务器地址",
          "default": "localhost"
        },
        "port": {
          "type": "integer",
          "title": "端口",
          "default": 6379
        },
        "password": {
          "type": "string",
          "title": "密码",
          "description": "Redis服务器密码，如不需要可留空"
        },
        "database": {
          "type": "integer",
          "title": "数据库索引",
          "description": "Redis数据库索引，默认为0",
          "default": 0,
          "minimum": 0,
          "maximum": 15
        },
        "dataType": {
          "type": "string",
          "title": "数据类型",
          "enum": [
            "STRING",
            "HASH",
            "LIST",
            "SET",
            "ZSET",
            "BITMAP",
            "HYPERLOGLOG",
            "KEY"
          ],
          "enumNames": [
            "字符串 (String)",
            "哈希表 (Hash)",
            "列表 (List)",
            "集合 (Set)",
            "有序集合 (Sorted Set)",
            "位图 (Bitmap)",
            "基数统计 (HyperLogLog)",
            "键操作 (Key)"
          ],
          "default": "STRING"
        },
        "key": {
          "type": "string",
          "title": "键名",
          "description": "操作的键名称，支持#{变量}引用"
        },
        "errorStrategy": {
          "type": "string",
          "title": "错误处理策略",
          "enum": ["FAIL", "IGNORE", "RETRY"],
          "enumNames": ["终止流程", "忽略错误", "重试执行"],
          "default": "FAIL",
          "description": "当节点执行失败时采取的策略"
        },
        "timeout": {
          "type": "integer",
          "title": "超时时间(毫秒)",
          "minimum": 1000,
          "maximum": 300000,
          "default": 5000,
          "description": "节点执行的最长等待时间"
        },
        "maxRetries": {
          "type": "integer",
          "title": "最大重试次数",
          "minimum": 1,
          "maximum": 10,
          "default": 3
        },
        "retryInterval": {
          "type": "integer",
          "title": "重试间隔(毫秒)",
          "minimum": 500,
          "maximum": 60000,
          "default": 3000
        },
        "exponentialBackoff": {
          "type": "boolean",
          "title": "启用指数退避",
          "default": true,
          "description": "每次重试时间间隔逐渐增加"
        },
        "fallbackResponse": {
          "type": "string",
          "title": "失败返回值",
          "description": "节点失败时返回的默认JSON数据",
          "default": "{}"
        },
        "debugParams": {
          "type": "string",
          "title": "调试参数"
        },
        "debugResult": {
          "type": "string",
          "title": "返回结果",
          "readOnly": true
        },
        "debugButton": {
          "type": "string",
          "title": "",
          "default": "debug"
        },
        "nodeJsonData": {
          "type": "string",
          "title": "节点数据定义",
          "readOnly": true
        }
      },
      "required": ["hostname", "port", "dataType", "key"],

      "dependencies": {
        "dataType": {
          "oneOf": [
            {
              "properties": {
                "dataType": { "enum": ["STRING"] },
                "operation": {
                  "type": "string",
                  "title": "操作命令",
                  "enum": [
                    "GET",
                    "SET",
                    "MGET",
                    "MSET",
                    "SETEX",
                    "SETNX",
                    "GETSET",
                    "APPEND",
                    "STRLEN"
                  ],
                  "enumNames": [
                    "获取值 (GET)",
                    "设置值 (SET)",
                    "批量获取值 (MGET) (谨慎操作)",
                    "批量设置值 (MSET) (谨慎操作)",
                    "设置带过期时间的值 (SETEX)",
                    "不存在才设置 (SETNX)",
                    "设置并返回旧值 (GETSET) (谨慎操作)",
                    "追加字符串 (APPEND)",
                    "获取字符串长度 (STRLEN)"
                  ],
                  "default": "GET"
                }
              },
              "required": ["operation"]
            },
            {
              "properties": {
                "dataType": { "enum": ["HASH"] },
                "operation": {
                  "type": "string",
                  "title": "操作命令",
                  "enum": [
                    "HGET",
                    "HSET",
                    "HMGET",
                    "HMSET",
                    "HDEL",
                    "HLEN",
                    "HEXISTS",
                    "HINCRBY",
                    "HINCRBYFLOAT",
                    "HKEYS",
                    "HVALS"
                  ],
                  "enumNames": [
                    "获取哈希字段值 (HGET)",
                    "设置哈希字段值 (HSET)",
                    "批量获取哈希字段值 (HMGET)",
                    "批量设置哈希字段值 (HMSET)",
                    "删除哈希字段 (HDEL)",
                    "获取哈希字段数量 (HLEN)",
                    "判断哈希字段是否存在 (HEXISTS)",
                    "增加哈希整数字段值 (HINCRBY)",
                    "增加哈希浮点字段值 (HINCRBYFLOAT)",
                    "获取所有哈希字段名 (HKEYS) (谨慎操作)",
                    "获取所有哈希值 (HVALS) (谨慎操作)"
                  ],
                  "default": "HGET"
                }
              },
              "required": ["operation"]
            },
            {
              "properties": {
                "dataType": { "enum": ["LIST"] },
                "operation": {
                  "type": "string",
                  "title": "操作命令",
                  "enum": [
                    "LPUSH",
                    "RPUSH",
                    "LPOP",
                    "RPOP",
                    "LRANGE",
                    "LREM",
                    "LLEN",
                    "LINDEX",
                    "LTRIM",
                    "LSET"
                  ],
                  "enumNames": [
                    "左侧添加元素 (LPUSH)",
                    "右侧添加元素 (RPUSH)",
                    "左侧弹出元素 (LPOP)",
                    "右侧弹出元素 (RPOP)",
                    "获取列表范围 (LRANGE) (谨慎操作)",
                    "删除列表元素 (LREM)",
                    "获取列表长度 (LLEN)",
                    "获取列表索引值 (LINDEX)",
                    "裁剪列表 (LTRIM)",
                    "设置列表索引值 (LSET)"
                  ],
                  "default": "LPUSH"
                }
              },
              "required": ["operation"]
            },
            {
              "properties": {
                "dataType": { "enum": ["SET"] },
                "operation": {
                  "type": "string",
                  "title": "操作命令",
                  "enum": [
                    "SADD",
                    "SREM",
                    "SMEMBERS",
                    "SCARD",
                    "SISMEMBER",
                    "SPOP",
                    "SRANDMEMBER"
                  ],
                  "enumNames": [
                    "添加集合成员 (SADD)",
                    "删除集合成员 (SREM)",
                    "获取所有集合成员 (SMEMBERS) (谨慎操作)",
                    "获取集合成员数量 (SCARD)",
                    "判断元素是否在集合中 (SISMEMBER)",
                    "随机移除集合成员 (SPOP) (谨慎操作)",
                    "随机获取集合成员 (SRANDMEMBER) (谨慎操作)"
                  ],
                  "default": "SADD"
                }
              },
              "required": ["operation"]
            },
            {
              "properties": {
                "dataType": { "enum": ["ZSET"] },
                "operation": {
                  "type": "string",
                  "title": "操作命令",
                  "enum": [
                    "ZADD",
                    "ZREM",
                    "ZSCORE",
                    "ZRANGE",
                    "ZREVRANGE",
                    "ZRANGEBYSCORE",
                    "ZREMRANGEBYSCORE",
                    "ZCARD",
                    "ZINCRBY"
                  ],
                  "enumNames": [
                    "添加有序集合成员 (ZADD)",
                    "删除有序集合成员 (ZREM)",
                    "获取成员分数 (ZSCORE)",
                    "按索引范围获取成员 (ZRANGE) (谨慎操作)",
                    "按索引范围反向获取成员 (ZREVRANGE) (谨慎操作)",
                    "按分数范围获取成员 (ZRANGEBYSCORE) (谨慎操作)",
                    "按分数范围删除成员 (ZREMRANGEBYSCORE)",
                    "获取有序集合成员数量 (ZCARD)",
                    "增加成员分数 (ZINCRBY)"
                  ],
                  "default": "ZADD"
                }
              },
              "required": ["operation"]
            },
            {
              "properties": {
                "dataType": { "enum": ["BITMAP"] },
                "operation": {
                  "type": "string",
                  "title": "操作命令",
                  "enum": ["SETBIT", "GETBIT", "BITCOUNT", "BITOP"],
                  "enumNames": [
                    "设置位图的位 (SETBIT)",
                    "获取位图的位 (GETBIT)",
                    "统计位图中1的数量 (BITCOUNT)",
                    "位图操作 (BITOP)"
                  ],
                  "default": "GETBIT"
                }
              },
              "required": ["operation"]
            },
            {
              "properties": {
                "dataType": { "enum": ["HYPERLOGLOG"] },
                "operation": {
                  "type": "string",
                  "title": "操作命令",
                  "enum": ["PFADD", "PFCOUNT", "PFMERGE"],
                  "enumNames": [
                    "添加元素 (PFADD)",
                    "获取基数估算值 (PFCOUNT)",
                    "合并多个HyperLogLog (PFMERGE)"
                  ],
                  "default": "PFADD"
                }
              },
              "required": ["operation"]
            },
            {
              "properties": {
                "dataType": { "enum": ["KEY"] },
                "operation": {
                  "type": "string",
                  "title": "操作命令",
                  "enum": [
                    "DEL",
                    "UNLINK",
                    "EXPIRE",
                    "TTL",
                    "PERSIST",
                    "EXISTS",
                    "TYPE"
                  ],
                  "enumNames": [
                    "删除键 (DEL) (谨慎操作)",
                    "异步删除键 (UNLINK)",
                    "设置过期时间 (EXPIRE)",
                    "获取剩余过期时间 (TTL)",
                    "移除过期时间 (PERSIST)",
                    "检查键是否存在 (EXISTS)",
                    "获取键类型 (TYPE) (谨慎操作)"
                  ],
                  "default": "EXISTS"
                }
              },
              "required": ["operation"]
            }
          ]
        },
        "operation": {
          "oneOf": [
            {
              "properties": {
                "operation": {
                  "enum": [
                    "GET",
                    "STRLEN",
                    "LPOP",
                    "RPOP",
                    "LLEN",
                    "SCARD",
                    "SMEMBERS",
                    "ZCARD",
                    "TTL",
                    "PERSIST",
                    "EXISTS",
                    "TYPE",
                    "GETBIT",
                    "BITCOUNT",
                    "PFCOUNT"
                  ]
                }
              }
            },
            {
              "properties": {
                "operation": {
                  "enum": ["SET", "GETSET", "APPEND"]
                },
                "value": {
                  "type": "string",
                  "title": "值",
                  "description": "要设置的值，支持#{变量}引用"
                }
              },
              "required": ["value"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["SETEX"]
                },
                "value": {
                  "type": "string",
                  "title": "值",
                  "description": "要设置的值，支持#{变量}引用"
                },
                "expireTime": {
                  "type": "integer",
                  "title": "过期时间(秒)",
                  "description": "键的过期时间",
                  "default": 60,
                  "minimum": 1
                }
              },
              "required": ["value", "expireTime"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["SETNX"]
                },
                "value": {
                  "type": "string",
                  "title": "值",
                  "description": "键不存在时要设置的值，支持#{变量}引用"
                }
              },
              "required": ["value"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["EXPIRE"]
                },
                "expireTime": {
                  "type": "integer",
                  "title": "过期时间(秒)",
                  "description": "键的过期时间",
                  "default": 60,
                  "minimum": 1
                }
              },
              "required": ["expireTime"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["MGET"]
                },
                "keys": {
                  "type": "string",
                  "title": "键列表",
                  "description": "JSON格式数组，例如: [\"key1\", \"key2\"]"
                }
              },
              "required": ["keys"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["MSET"]
                },
                "keyValues": {
                  "type": "string",
                  "title": "键值映射",
                  "description": "JSON格式对象，例如: {\"key1\": \"value1\", \"key2\": \"value2\"}"
                }
              },
              "required": ["keyValues"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["DEL", "UNLINK"]
                }
              }
            },
            {
              "properties": {
                "operation": {
                  "enum": ["LRANGE", "ZRANGE", "ZREVRANGE"]
                },
                "startIndex": {
                  "type": "integer",
                  "title": "起始索引",
                  "description": "列表或有序集合的起始索引",
                  "default": 0
                },
                "endIndex": {
                  "type": "integer",
                  "title": "结束索引",
                  "description": "列表或有序集合的结束索引",
                  "default": -1
                }
              },
              "required": ["startIndex", "endIndex"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["ZRANGEBYSCORE", "ZREMRANGEBYSCORE"]
                },
                "minScore": {
                  "type": "number",
                  "title": "最小分数",
                  "description": "有序集合的最小分数",
                  "default": 0
                },
                "maxScore": {
                  "type": "number",
                  "title": "最大分数",
                  "description": "有序集合的最大分数",
                  "default": 100
                }
              },
              "required": ["minScore", "maxScore"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["HGET", "HEXISTS"]
                },
                "field": {
                  "type": "string",
                  "title": "字段名",
                  "description": "哈希表字段名称，支持#{变量}引用"
                }
              },
              "required": ["field"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["HSET"]
                },
                "field": {
                  "type": "string",
                  "title": "字段名",
                  "description": "哈希表字段名称，支持#{变量}引用"
                },
                "value": {
                  "type": "string",
                  "title": "值",
                  "description": "要设置的值，支持#{变量}引用"
                }
              },
              "required": ["field", "value"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["HINCRBY"]
                },
                "field": {
                  "type": "string",
                  "title": "字段名",
                  "description": "哈希表字段名称，支持#{变量}引用"
                },
                "increment": {
                  "type": "integer",
                  "title": "增量",
                  "description": "整数增量值",
                  "default": 1
                }
              },
              "required": ["field", "increment"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["HINCRBYFLOAT"]
                },
                "field": {
                  "type": "string",
                  "title": "字段名",
                  "description": "哈希表字段名称，支持#{变量}引用"
                },
                "increment": {
                  "type": "number",
                  "title": "增量",
                  "description": "浮点数增量值",
                  "default": 1.0
                }
              },
              "required": ["field", "increment"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["HMGET", "HDEL"]
                },
                "fields": {
                  "type": "string",
                  "title": "字段列表",
                  "description": "JSON格式数组，例如: [\"field1\", \"field2\"]"
                }
              },
              "required": ["fields"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["HMSET"]
                },
                "fieldValues": {
                  "type": "string",
                  "title": "字段值映射",
                  "description": "JSON格式对象，例如: {\"field1\": \"value1\", \"field2\": \"value2\"}"
                }
              },
              "required": ["fieldValues"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["LPUSH", "RPUSH", "SADD", "SREM", "PFADD"]
                },
                "members": {
                  "type": "string",
                  "title": "成员列表",
                  "description": "JSON格式数组，例如: [\"member1\", \"member2\"]"
                }
              },
              "required": ["members"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["LREM"]
                },
                "count": {
                  "type": "integer",
                  "title": "数量",
                  "description": "要移除的元素数量 (0表示全部)",
                  "default": 0
                },
                "value": {
                  "type": "string",
                  "title": "值",
                  "description": "要移除的元素值"
                }
              },
              "required": ["count", "value"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["LTRIM"]
                },
                "startIndex": {
                  "type": "integer",
                  "title": "起始索引",
                  "description": "列表的起始索引",
                  "default": 0
                },
                "endIndex": {
                  "type": "integer",
                  "title": "结束索引",
                  "description": "列表的结束索引",
                  "default": -1
                }
              },
              "required": ["startIndex", "endIndex"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["LINDEX"]
                },
                "index": {
                  "type": "integer",
                  "title": "索引",
                  "description": "列表的索引位置",
                  "default": 0
                }
              },
              "required": ["index"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["LSET"]
                },
                "index": {
                  "type": "integer",
                  "title": "索引",
                  "description": "列表的索引位置",
                  "default": 0
                },
                "value": {
                  "type": "string",
                  "title": "值",
                  "description": "要设置的元素值"
                }
              },
              "required": ["index", "value"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["SISMEMBER"]
                },
                "member": {
                  "type": "string",
                  "title": "成员",
                  "description": "要检查的集合成员"
                }
              },
              "required": ["member"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["SPOP", "SRANDMEMBER"]
                },
                "count": {
                  "type": "integer",
                  "title": "数量",
                  "description": "要获取的成员数量",
                  "default": 1,
                  "minimum": 1
                }
              },
              "required": ["count"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["ZADD"]
                },
                "member": {
                  "type": "string",
                  "title": "成员",
                  "description": "有序集合成员"
                },
                "score": {
                  "type": "number",
                  "title": "分数",
                  "description": "有序集合成员的分数",
                  "default": 1.0
                }
              },
              "required": ["member", "score"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["ZREM", "ZSCORE"]
                },
                "member": {
                  "type": "string",
                  "title": "成员",
                  "description": "有序集合成员"
                }
              },
              "required": ["member"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["ZINCRBY"]
                },
                "member": {
                  "type": "string",
                  "title": "成员",
                  "description": "有序集合成员"
                },
                "increment": {
                  "type": "number",
                  "title": "增量",
                  "description": "分数增量",
                  "default": 1.0
                }
              },
              "required": ["member", "increment"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["SETBIT"]
                },
                "offset": {
                  "type": "integer",
                  "title": "偏移量",
                  "description": "位图的位偏移量",
                  "default": 0,
                  "minimum": 0
                },
                "value": {
                  "type": "integer",
                  "title": "值",
                  "description": "位的值 (0或1)",
                  "enum": [0, 1],
                  "default": 1
                }
              },
              "required": ["offset", "value"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["GETBIT"]
                },
                "offset": {
                  "type": "integer",
                  "title": "偏移量",
                  "description": "位图的位偏移量",
                  "default": 0,
                  "minimum": 0
                }
              },
              "required": ["offset"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["BITOP"]
                },
                "operation_type": {
                  "type": "string",
                  "title": "操作类型",
                  "enum": ["AND", "OR", "XOR", "NOT"],
                  "enumNames": [
                    "与操作 (AND)",
                    "或操作 (OR)",
                    "异或操作 (XOR)",
                    "非操作 (NOT)"
                  ],
                  "default": "AND"
                },
                "destkey": {
                  "type": "string",
                  "title": "目标键",
                  "description": "存储结果的键名"
                },
                "sourcekeys": {
                  "type": "string",
                  "title": "源键列表",
                  "description": "JSON格式数组，例如: [\"key1\", \"key2\"]"
                }
              },
              "required": ["operation_type", "destkey", "sourcekeys"]
            },
            {
              "properties": {
                "operation": {
                  "enum": ["PFMERGE"]
                },
                "destkey": {
                  "type": "string",
                  "title": "目标键",
                  "description": "存储合并结果的键名"
                },
                "sourcekeys": {
                  "type": "string",
                  "title": "源键列表",
                  "description": "JSON格式数组，例如: [\"key1\", \"key2\"]"
                }
              },
              "required": ["destkey", "sourcekeys"]
            }
          ]
        },
        "errorStrategy": {
          "oneOf": [
            {
              "properties": {
                "errorStrategy": { "enum": ["RETRY"] },
                "maxRetries": { "type": "integer" },
                "retryInterval": { "type": "integer" }
              },
              "required": ["maxRetries", "retryInterval"]
            },
            {
              "properties": {
                "errorStrategy": { "enum": ["FAIL", "IGNORE"] }
              }
            }
          ]
        }
      }
    },
    "uiSchema": {
      "ui:order": [
        "nodeType",
        "nodeId",
        "hostname",
        "port",
        "password",
        "database",
        "dataType",
        "operation",
        "key",
        "field",
        "fields",
        "value",
        "expireTime",
        "fieldValues",
        "member",
        "members",
        "startIndex",
        "endIndex",
        "minScore",
        "maxScore",
        "score",
        "increment",
        "index",
        "count",
        "keys",
        "keyValues",
        "offset",
        "operation_type",
        "destkey",
        "sourcekeys",
        "*"
      ],
      "nodeType": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "nodeId": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default",
            "fontFamily": "monospace"
          }
        }
      },
      "hostname": {
        "ui:placeholder": "例如: localhost 或 redis.example.com"
      },
      "port": {
        "ui:widget": "updown"
      },
      "password": {
        "ui:widget": "password",
        "ui:placeholder": "请输入Redis密码，如无则留空"
      },
      "database": {
        "ui:widget": "updown"
      },
      "dataType": {
        "ui:widget": "select"
      },
      "operation": {
        "ui:widget": "select"
      },
      "operation_type": {
        "ui:widget": "select"
      },
      "key": {
        "ui:placeholder": "例如: user:profile:#{userId}"
      },
      "keys": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "例如: [\"key1\", \"key2\", \"key3\"]"
      },
      "keyValues": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "例如: {\"key1\": \"value1\", \"key2\": \"value2\"}"
      },
      "field": {
        "ui:placeholder": "例如: username"
      },
      "fields": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "例如: [\"field1\", \"field2\", \"field3\"]"
      },
      "fieldValues": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "例如: {\"field1\": \"value1\", \"field2\": \"value2\"}"
      },
      "value": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "例如: #{user.name} 或 JSON格式数据"
      },
      "expireTime": {
        "ui:widget": "updown"
      },
      "startIndex": {
        "ui:widget": "updown"
      },
      "endIndex": {
        "ui:widget": "updown"
      },
      "index": {
        "ui:widget": "updown"
      },
      "count": {
        "ui:widget": "updown"
      },
      "minScore": {
        "ui:widget": "updown"
      },
      "maxScore": {
        "ui:widget": "updown"
      },
      "score": {
        "ui:widget": "updown"
      },
      "increment": {
        "ui:widget": "updown"
      },
      "offset": {
        "ui:widget": "updown"
      },
      "member": {
        "ui:placeholder": "例如: member1"
      },
      "members": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "例如: [\"member1\", \"member2\", \"member3\"]"
      },
      "destkey": {
        "ui:placeholder": "例如: result_key"
      },
      "sourcekeys": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "例如: [\"key1\", \"key2\", \"key3\"]"
      },
      "errorStrategy": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "timeout": {
        "ui:widget": "updown"
      },
      "maxRetries": {
        "ui:widget": "updown"
      },
      "retryInterval": {
        "ui:widget": "updown"
      },
      "exponentialBackoff": {
        "ui:widget": "checkbox"
      },
      "fallbackResponse": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "输入失败时的默认返回值，例如: {\"status\": \"error\", \"message\": \"缓存操作失败\"}"
      },
      "debugParams": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "{\n  \"key\": \"user:profile:123\",\n  \"value\": \"测试值\",\n  \"mockResult\": \"OK\"\n}"
      },
      "debugResult": {
        "ui:widget": "textarea",
        "ui:disabled": true,
        "ui:options": {
          "rows": 8,
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "debugButton": {
        "ui:field": "ButtonField",
        "ui:options": {
          "label": "运行调试",
          "action": "debug",
          "color": "primary",
          "loadingText": "执行中..."
        }
      },
      "nodeJsonData": {
        "ui:widget": "textarea",
        "ui:readonly": true,
        "ui:options": {
          "rows": 20,
          "customStyle": {
            "fontFamily": "monospace",
            "fontSize": "12px",
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50"
          }
        }
      },
      "ui:submitButtonOptions": {
        "norender": true
      }
    },
    "panelConfig": {
      "title": "Redis 节点",
      "description": "执行Redis缓存操作",
      "tabs": [
        {
          "id": "basic",
          "title": "基本属性",
          "fields": [
            "nodeType",
            "nodeId",
            "hostname",
            "port",
            "password",
            "database",
            "dataType",
            "operation",
            "key",
            "keys",
            "keyValues",
            "value",
            "expireTime",
            "field",
            "fields",
            "fieldValues",
            "member",
            "members",
            "startIndex",
            "endIndex",
            "minScore",
            "maxScore",
            "score",
            "increment",
            "index",
            "count",
            "offset",
            "operation_type",
            "destkey",
            "sourcekeys"
          ]
        },
        {
          "id": "error",
          "title": "异常处理",
          "fields": [
            "errorStrategy",
            "timeout",
            "maxRetries",
            "retryInterval",
            "exponentialBackoff",
            "fallbackResponse"
          ]
        },
        {
          "id": "debug",
          "title": "节点调试",
          "fields": ["debugParams", "debugButton", "debugResult"]
        },
        {
          "id": "data",
          "title": "数据定义",
          "fields": ["nodeJsonData"]
        }
      ]
    }
  },
  "SWITCH": {
    "schema": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "title": "节点类型",
          "default": "SWITCH",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "title": "节点ID",
          "readOnly": true
        },
        "expression": {
          "type": "string",
          "title": "表达式",
          "default": "#{payload}"
        },
        "evaluationMode": {
          "type": "string",
          "title": "条件评估模式",
          "enum": ["VALUE", "EXPRESSION"],
          "enumNames": ["值比较", "表达式匹配"],
          "default": "VALUE"
        },
        "cases": {
          "type": "array",
          "title": "分支条件列表",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "condition": {
                "type": "string",
                "title": "条件"
              },
              "target": {
                "type": "string",
                "title": "目标"
              }
            }
          }
        },
        "errorStrategy": {
          "type": "string",
          "title": "错误处理策略",
          "enum": ["FAIL", "IGNORE", "DEFAULT_BRANCH"],
          "enumNames": ["终止流程", "忽略错误", "使用默认分支"],
          "default": "FAIL",
          "description": "当节点执行失败时采取的策略"
        },
        "timeout": {
          "type": "integer",
          "title": "超时时间(毫秒)",
          "minimum": 1000,
          "maximum": 300000,
          "default": 5000,
          "description": "节点执行的最长等待时间"
        },
        "fallbackResponse": {
          "type": "string",
          "title": "失败返回值",
          "description": "节点失败时返回的默认JSON数据",
          "default": "{}"
        },
        "debugParams": {
          "type": "string",
          "title": "调试参数"
        },
        "debugResult": {
          "type": "string",
          "title": "返回结果",
          "readOnly": true
        },
        "debugButton": {
          "type": "string",
          "title": "",
          "default": "debug"
        },
        "nodeJsonData": {
          "type": "string",
          "title": "节点数据定义",
          "readOnly": true
        }
      },
      "dependencies": {
        "defaultBehavior": {
          "oneOf": [
            {
              "properties": {
                "defaultBehavior": { "enum": ["USE_DEFAULT"] },
                "defaultTarget": {
                  "type": "string",
                  "title": "默认分支目标",
                  "description": "默认分支连接的目标节点"
                }
              }
            },
            {
              "properties": {
                "defaultBehavior": { "enum": ["THROW_ERROR", "IGNORE"] }
              }
            }
          ]
        }
      }
    },
    "uiSchema": {
      "nodeType": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "nodeId": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default",
            "fontFamily": "monospace"
          }
        }
      },
      "expression": {
        "ui:placeholder": "请输入表达式 (例如: #{payload.status})"
      },
      "evaluationMode": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "cases": {
        "ui:field": "BranchConditionsField"
      },
      "errorStrategy": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "timeout": {
        "ui:widget": "updown"
      },
      "fallbackResponse": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "输入失败时的默认返回值，例如: {\"status\": \"error\", \"message\": \"条件分支失败\"}"
      },
      "debugParams": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "{\n  \"payload\": {\n    \"status\": \"success\"\n  }\n}"
      },
      "debugResult": {
        "ui:widget": "textarea",
        "ui:disabled": true,
        "ui:options": {
          "rows": 8,
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "debugButton": {
        "ui:field": "ButtonField",
        "ui:options": {
          "label": "运行调试",
          "action": "debug",
          "color": "primary",
          "loadingText": "执行中..."
        }
      },
      "nodeJsonData": {
        "ui:widget": "textarea",
        "ui:readonly": true,
        "ui:options": {
          "rows": 20,
          "customStyle": {
            "fontFamily": "monospace",
            "fontSize": "12px",
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50"
          }
        }
      },
      "ui:submitButtonOptions": {
        "norender": true
      }
    },
    "panelConfig": {
      "title": "分支节点",
      "description": "条件分支路由",
      "tabs": [
        {
          "id": "basic",
          "title": "基本属性",
          "fields": [
            "nodeType",
            "nodeId",
            "expression",
            "evaluationMode",
            "cases",
            "defaultBehavior",
            "defaultTarget"
          ]
        },
        {
          "id": "error",
          "title": "异常处理",
          "fields": ["errorStrategy", "timeout", "fallbackResponse"]
        },
        {
          "id": "debug",
          "title": "节点调试",
          "fields": ["debugParams", "debugButton", "debugResult"]
        },
        {
          "id": "data",
          "title": "数据定义",
          "fields": ["nodeJsonData"]
        }
      ]
    }
  },
  "LOOP": {
    "schema": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "title": "节点类型",
          "default": "LOOP",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "title": "节点ID",
          "readOnly": true
        },
        "mode": {
          "type": "string",
          "title": "循环模式",
          "enum": ["WHILE", "FOR", "FOR_EACH"],
          "enumNames": ["WHILE循环", "FOR循环", "FOR_EACH遍历"],
          "default": "WHILE"
        },
        "errorStrategy": {
          "type": "string",
          "title": "错误处理策略",
          "enum": ["FAIL", "CONTINUE", "RETRY"],
          "enumNames": ["终止流程", "继续执行", "重试执行"],
          "default": "FAIL"
        },
        "timeout": {
          "type": "integer",
          "title": "超时时间(毫秒)",
          "minimum": 1000,
          "maximum": 300000,
          "default": 60000
        },
        "maxRetries": {
          "type": "integer",
          "title": "最大重试次数",
          "minimum": 1,
          "maximum": 10,
          "default": 3
        },
        "retryInterval": {
          "type": "integer",
          "title": "重试间隔(毫秒)",
          "minimum": 500,
          "maximum": 60000,
          "default": 3000
        },
        "exponentialBackoff": {
          "type": "boolean",
          "title": "启用指数退避",
          "default": true
        },
        "fallbackResponse": {
          "type": "string",
          "title": "失败返回值",
          "default": "{}"
        },
        "outputSeparator": {
          "type": "string",
          "title": "循环输出配置"
        },
        "outputMode": {
          "type": "string",
          "title": "输出模式",
          "enum": ["COLLECT", "LAST", "NONE"],
          "enumNames": ["收集所有结果", "仅最后结果", "不输出"],
          "default": "COLLECT"
        },
        "debugParams": {
          "type": "string",
          "title": "调试参数"
        },
        "debugResult": {
          "type": "string",
          "title": "返回结果",
          "readOnly": true
        },
        "debugButton": {
          "type": "string",
          "title": "",
          "default": "debug"
        },
        "nodeJsonData": {
          "type": "string",
          "title": "节点数据定义",
          "readOnly": true
        },
        "subflow": {
          "type": "object",
          "title": "子流程配置",
          "properties": {
            "height": {
              "type": "integer",
              "title": "高度",
              "default": 154
            },
            "width": {
              "type": "integer",
              "title": "宽度",
              "default": 320
            }
          }
        }
      },
      "required": ["mode"],
      "dependencies": {
        "mode": {
          "oneOf": [
            {
              "properties": {
                "mode": { "enum": ["WHILE"] },
                "conditionVariable": {
                  "type": "string",
                  "title": "条件变量名",
                  "default": "index"
                },
                "condition": {
                  "type": "string",
                  "title": "循环条件",
                  "default": "#{index < 10}"
                },
                "maxIterations": {
                  "type": "integer",
                  "title": "最大迭代次数",
                  "default": 10000,
                  "minimum": 1,
                  "maximum": 100000
                }
              },
              "required": ["condition", "maxIterations"]
            },
            {
              "properties": {
                "mode": { "enum": ["FOR_EACH"] },
                "collection": {
                  "type": "string",
                  "title": "集合表达式",
                  "default": "#{payload.items}"
                },
                "itemVariable": {
                  "type": "string",
                  "title": "元素变量名",
                  "default": "item"
                },
                "indexVariable": {
                  "type": "string",
                  "title": "索引变量名",
                  "default": "index"
                },
                "maxIterations": {
                  "type": "integer",
                  "title": "最大迭代次数",
                  "default": 10000,
                  "minimum": 1,
                  "maximum": 100000
                }
              },
              "required": ["collection", "itemVariable", "maxIterations"]
            },
            {
              "properties": {
                "mode": { "enum": ["FOR"] },
                "iteratorVariable": {
                  "type": "string",
                  "title": "迭代变量名",
                  "default": "index"
                },
                "initialization": {
                  "type": "string",
                  "title": "初始化表达式",
                  "default": "#{index = 0}"
                },
                "condition": {
                  "type": "string",
                  "title": "条件表达式",
                  "default": "#{index < 10}"
                },
                "increment": {
                  "type": "string",
                  "title": "增量表达式",
                  "default": "#{index++}"
                },
                "maxIterations": {
                  "type": "integer",
                  "title": "最大迭代次数",
                  "default": 10000,
                  "minimum": 1,
                  "maximum": 100000
                }
              },
              "required": [
                "iteratorVariable",
                "initialization",
                "condition",
                "increment",
                "maxIterations"
              ]
            }
          ]
        },
        "errorStrategy": {
          "oneOf": [
            {
              "properties": {
                "errorStrategy": { "enum": ["RETRY"] }
              },
              "required": ["maxRetries", "retryInterval"]
            },
            {
              "properties": {
                "errorStrategy": { "enum": ["FAIL", "CONTINUE"] }
              }
            }
          ]
        },
        "outputMode": {
          "oneOf": [
            {
              "properties": {
                "outputMode": { "enum": ["NONE"] }
              }
            },
            {
              "properties": {
                "outputMode": { "enum": ["COLLECT", "LAST"] },
                "outputVariable": {
                  "type": "string",
                  "title": "输出变量名",
                  "default": "loopResult"
                },
                "resultMergeStrategy": {
                  "type": "string",
                  "title": "结果合并策略",
                  "enum": ["ARRAY", "MERGE"],
                  "enumNames": ["数组列表", "对象合并"],
                  "default": "ARRAY"
                }
              },
              "required": ["outputVariable"]
            }
          ]
        }
      }
    },
    "uiSchema": {
      "ui:order": [
        "nodeType",
        "nodeId",
        "mode",
        "conditionVariable",
        "condition",
        "collection",
        "itemVariable",
        "indexVariable",
        "iteratorVariable",
        "initialization",
        "condition",
        "increment",
        "maxIterations",
        "outputSeparator",
        "outputMode",
        "outputVariable",
        "resultMergeStrategy",
        "*"
      ],
      "nodeType": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "nodeId": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default",
            "fontFamily": "monospace"
          }
        }
      },
      "mode": {
        "ui:widget": "select",
        "ui:help": "选择不同的循环模式将显示对应的配置选项"
      },
      "conditionVariable": {
        "ui:placeholder": "请输入条件变量名（例如：index）"
      },
      "iteratorVariable": {
        "ui:placeholder": "请输入迭代变量名（例如：index）"
      },
      "itemVariable": {
        "ui:placeholder": "请输入元素变量名（例如：item）"
      },
      "indexVariable": {
        "ui:placeholder": "请输入索引变量名（例如：index）"
      },
      "condition": {
        "ui:placeholder": "请输入循环条件（例如：#{index < 10}）"
      },
      "collection": {
        "ui:placeholder": "请输入集合表达式（例如：#{payload.items}）"
      },
      "initialization": {
        "ui:placeholder": "请输入初始化表达式（例如：#{index = 0}）"
      },
      "increment": {
        "ui:placeholder": "请输入增量表达式（例如：#{index++}）"
      },
      "maxIterations": {
        "ui:widget": "updown",
        "ui:help": "设置过高的迭代次数可能影响性能和资源使用"
      },
      "outputSeparator": {
        "ui:widget": "hidden",
        "ui:options": {
          "classNames": "section-title"
        }
      },
      "outputMode": {
        "ui:widget": "select",
        "ui:help": "选择循环结果的输出方式",
        "ui:options": {
          "classNames": "output-section"
        }
      },
      "outputVariable": {
        "ui:placeholder": "请输入输出变量名（例如：loopResult）"
      },
      "resultMergeStrategy": {
        "ui:widget": "select",
        "ui:help": "选择多次迭代结果的合并方式"
      },
      "errorStrategy": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "timeout": {
        "ui:widget": "updown"
      },
      "maxRetries": {
        "ui:widget": "updown"
      },
      "retryInterval": {
        "ui:widget": "updown"
      },
      "exponentialBackoff": {
        "ui:widget": "checkbox"
      },
      "fallbackResponse": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "输入失败时的默认返回值，例如: {\"status\": \"error\", \"message\": \"循环执行失败\"}"
      },
      "debugParams": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "{\n  \"index\": 0,\n  \"payload\": {\n    \"items\": [1, 2, 3, 4, 5]\n  }\n}"
      },
      "debugResult": {
        "ui:widget": "textarea",
        "ui:disabled": true,
        "ui:options": {
          "rows": 8,
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "debugButton": {
        "ui:field": "ButtonField",
        "ui:options": {
          "label": "运行调试",
          "action": "debug",
          "color": "primary",
          "loadingText": "执行中..."
        }
      },
      "nodeJsonData": {
        "ui:widget": "textarea",
        "ui:readonly": true,
        "ui:options": {
          "rows": 20,
          "customStyle": {
            "fontFamily": "monospace",
            "fontSize": "12px",
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50"
          }
        }
      },
      "ui:submitButtonOptions": {
        "norender": true
      }
    },
    "panelConfig": {
      "title": "循环节点",
      "description": "循环执行子流程",
      "tabs": [
        {
          "id": "basic",
          "title": "基本属性",
          "fields": [
            "nodeType",
            "nodeId",
            "mode",
            "conditionVariable",
            "condition",
            "collection",
            "itemVariable",
            "indexVariable",
            "iteratorVariable",
            "initialization",
            "condition",
            "increment",
            "maxIterations",
            "outputSeparator",
            "outputMode",
            "outputVariable",
            "resultMergeStrategy"
          ]
        },
        {
          "id": "error",
          "title": "异常处理",
          "fields": [
            "errorStrategy",
            "timeout",
            "maxRetries",
            "retryInterval",
            "exponentialBackoff",
            "fallbackResponse"
          ]
        },
        {
          "id": "debug",
          "title": "节点调试",
          "fields": ["debugParams", "debugButton", "debugResult"]
        },
        {
          "id": "data",
          "title": "数据定义",
          "fields": ["nodeJsonData"]
        }
      ]
    }
  },
  "SCRIPT": {
    "schema": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "title": "节点类型",
          "default": "SCRIPT",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "title": "节点ID",
          "readOnly": true
        },
        "language": {
          "type": "string",
          "title": "脚本语言",
          "enum": ["javascript", "groovy", "python"],
          "default": "javascript"
        },
        "code": {
          "type": "string",
          "title": "脚本代码",
          "default": "// 在此编写脚本代码\nfunction process(input) {\n  // 处理输入数据\n  return input;\n}"
        },
        "errorStrategy": {
          "type": "string",
          "title": "错误处理策略",
          "enum": ["FAIL", "IGNORE", "RETRY"],
          "enumNames": ["终止流程", "忽略错误", "重试执行"],
          "default": "FAIL",
          "description": "当节点执行失败时采取的策略"
        },
        "timeout": {
          "type": "integer",
          "title": "超时时间(毫秒)",
          "minimum": 1000,
          "maximum": 300000,
          "default": 30000,
          "description": "节点执行的最长等待时间"
        },
        "maxRetries": {
          "type": "integer",
          "title": "最大重试次数",
          "minimum": 1,
          "maximum": 10,
          "default": 3
        },
        "retryInterval": {
          "type": "integer",
          "title": "重试间隔(毫秒)",
          "minimum": 500,
          "maximum": 60000,
          "default": 3000
        },
        "exponentialBackoff": {
          "type": "boolean",
          "title": "启用指数退避",
          "default": true,
          "description": "每次重试时间间隔逐渐增加"
        },
        "fallbackResponse": {
          "type": "string",
          "title": "失败返回值",
          "description": "节点失败时返回的默认JSON数据",
          "default": "{}"
        },
        "debugParams": {
          "type": "string",
          "title": "调试参数",
          "description": "用于测试脚本执行的输入参数（JSON格式）"
        },
        "debugResult": {
          "type": "string",
          "title": "返回结果",
          "readOnly": true
        },
        "debugButton": {
          "type": "string",
          "title": "",
          "default": "debug"
        },
        "nodeJsonData": {
          "type": "string",
          "title": "节点数据定义",
          "readOnly": true
        }
      },
      "dependencies": {
        "errorStrategy": {
          "oneOf": [
            {
              "properties": {
                "errorStrategy": {
                  "enum": ["RETRY"]
                }
              },
              "required": ["maxRetries", "retryInterval"]
            },
            {
              "properties": {
                "errorStrategy": {
                  "enum": ["FAIL", "IGNORE"]
                }
              }
            }
          ]
        },
        "language": {
          "oneOf": [
            {
              "properties": {
                "language": {
                  "enum": ["javascript"]
                },
                "code": {
                  "title": "JavaScript代码"
                }
              }
            },
            {
              "properties": {
                "language": {
                  "enum": ["python"]
                },
                "code": {
                  "title": "Python代码"
                }
              }
            },
            {
              "properties": {
                "language": {
                  "enum": ["groovy"]
                },
                "code": {
                  "title": "Groovy代码"
                }
              }
            }
          ]
        }
      }
    },
    "uiSchema": {
      "nodeType": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "nodeId": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default",
            "fontFamily": "monospace"
          }
        }
      },
      "language": {
        "ui:widget": "select"
      },
      "code": {
        "ui:field": "CodeEditorField",
        "ui:options": {
          "rows": 15
        },
        "ui:placeholder": "// 在此编写脚本代码..."
      },
      "errorStrategy": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "timeout": {
        "ui:widget": "updown"
      },
      "maxRetries": {
        "ui:widget": "updown"
      },
      "retryInterval": {
        "ui:widget": "updown"
      },
      "exponentialBackoff": {
        "ui:widget": "checkbox"
      },
      "fallbackResponse": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "输入失败时的默认返回值，例如: {\"status\": \"error\", \"message\": \"脚本执行失败\"}"
      },
      "debugParams": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "{\n  \"input\": {\n    \"data\": \"示例数据\"\n  }\n}"
      },
      "debugResult": {
        "ui:widget": "textarea",
        "ui:disabled": true,
        "ui:options": {
          "rows": 8,
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "debugButton": {
        "ui:field": "ButtonField",
        "ui:options": {
          "label": "运行调试",
          "action": "debug",
          "color": "primary",
          "loadingText": "执行中..."
        }
      },
      "nodeJsonData": {
        "ui:widget": "textarea",
        "ui:readonly": true,
        "ui:options": {
          "rows": 20,
          "customStyle": {
            "fontFamily": "monospace",
            "fontSize": "12px",
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50"
          }
        }
      },
      "ui:submitButtonOptions": {
        "norender": true
      }
    },
    "panelConfig": {
      "title": "脚本节点",
      "description": "执行自定义脚本",
      "tabs": [
        {
          "id": "basic",
          "title": "基本属性",
          "fields": ["nodeType", "nodeId", "language", "code"]
        },
        {
          "id": "error",
          "title": "异常处理",
          "fields": [
            "errorStrategy",
            "timeout",
            "maxRetries",
            "retryInterval",
            "exponentialBackoff",
            "fallbackResponse"
          ]
        },
        {
          "id": "debug",
          "title": "节点调试",
          "fields": ["debugParams", "debugButton", "debugResult"]
        },
        {
          "id": "data",
          "title": "数据定义",
          "fields": ["nodeJsonData"]
        }
      ]
    }
  },
  "SET_VARIABLE": {
    "schema": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "title": "节点类型",
          "default": "SET_VARIABLE",
          "readOnly": true
        },
        "nodeId": {
          "type": "string",
          "title": "节点ID",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "title": "节点描述",
          "description": "为此变量赋值节点添加说明"
        },
        "variables": {
          "type": "object",
          "title": "变量定义",
          "description": "定义节点将设置的变量，支持表达式语法: #{表达式}",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string",
          "title": "变量作用域",
          "description": "设置变量的可见范围",
          "enum": ["FLOW", "LOCAL"],
          "enumNames": [
            "流程作用域 (整个流程可见)",
            "局部作用域 (仅当前分支或子流程可见)"
          ],
          "default": "FLOW"
        },
        "errorStrategy": {
          "type": "string",
          "title": "错误处理策略",
          "enum": ["FAIL", "IGNORE"],
          "enumNames": ["终止流程", "忽略错误"],
          "default": "FAIL",
          "description": "当节点执行失败时采取的策略"
        },
        "timeout": {
          "type": "integer",
          "title": "超时时间(毫秒)",
          "minimum": 1000,
          "maximum": 300000,
          "default": 5000,
          "description": "节点执行的最长等待时间"
        },
        "fallbackResponse": {
          "type": "string",
          "title": "失败返回值",
          "description": "节点失败时返回的默认JSON数据",
          "default": "{}"
        },
        "debugParams": {
          "type": "string",
          "title": "调试参数"
        },
        "debugResult": {
          "type": "string",
          "title": "返回结果",
          "readOnly": true
        },
        "debugButton": {
          "type": "string",
          "title": "",
          "default": "debug"
        },
        "nodeJsonData": {
          "type": "string",
          "title": "节点数据定义",
          "readOnly": true
        }
      },
      "required": ["variables"]
    },
    "uiSchema": {
      "nodeType": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "nodeId": {
        "ui:readonly": true,
        "ui:options": {
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default",
            "fontFamily": "monospace"
          }
        }
      },
      "description": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "请输入节点描述..."
      },
      "variables": {
        "ui:field": "KVTableField",
        "ui:options": {
          "keyPlaceholder": "变量名",
          "valuePlaceholder": "变量值或表达式",
          "label": "变量定义"
        },
        "ui:help": "变量值支持表达式语法：#{表达式} - 可在表达式中引用其他变量：#{user.id} - 可使用JavaScript表达式：#{price * quantity}"
      },
      "scope": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "errorStrategy": {
        "ui:widget": "select",
        "ui:options": {
          "inline": false
        }
      },
      "timeout": {
        "ui:widget": "updown"
      },
      "fallbackResponse": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 3
        },
        "ui:placeholder": "输入失败时的默认返回值，例如: {\"status\": \"error\", \"message\": \"变量设置失败\"}"
      },
      "debugParams": {
        "ui:widget": "textarea",
        "ui:options": {
          "rows": 5
        },
        "ui:placeholder": "{\n  \"context\": {\n    \"existingVar\": \"value\"\n  }\n}"
      },
      "debugResult": {
        "ui:widget": "textarea",
        "ui:disabled": true,
        "ui:options": {
          "rows": 8,
          "customStyle": {
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50",
            "cursor": "default"
          }
        }
      },
      "debugButton": {
        "ui:field": "ButtonField",
        "ui:options": {
          "label": "运行调试",
          "action": "debug",
          "color": "primary",
          "loadingText": "执行中..."
        }
      },
      "nodeJsonData": {
        "ui:widget": "textarea",
        "ui:readonly": true,
        "ui:options": {
          "rows": 20,
          "customStyle": {
            "fontFamily": "monospace",
            "fontSize": "12px",
            "backgroundColor": "#f8f9fa",
            "border": "1px solid #dde2e6",
            "color": "#2c3e50"
          }
        }
      },
      "ui:submitButtonOptions": {
        "norender": true
      }
    },
    "panelConfig": {
      "title": "变量节点",
      "description": "设置流程变量",
      "tabs": [
        {
          "id": "basic",
          "title": "基本属性",
          "fields": ["nodeType", "nodeId", "description", "variables", "scope"]
        },
        {
          "id": "error",
          "title": "异常处理",
          "fields": ["errorStrategy", "timeout", "fallbackResponse"]
        },
        {
          "id": "debug",
          "title": "节点调试",
          "fields": ["debugParams", "debugButton", "debugResult"]
        },
        {
          "id": "data",
          "title": "数据定义",
          "fields": ["nodeJsonData"]
        }
      ]
    }
  }
}



================================================================================
# 文件: src/WorkflowEditor.js
# 行数: 1328
================================================================================

// WorkflowEditor.js - 完整文件
import React, {
  useState,
  useRef,
  useCallback,
  useEffect,
  useMemo,
} from "react";
import ReactFlow, {
  ReactFlowProvider,
  Controls,
  MiniMap,
  addEdge,
  applyEdgeChanges,
  applyNodeChanges,
  MarkerType,
  useReactFlow,
  Background,
} from "reactflow";
import "reactflow/dist/style.css";

import { Icon } from "semantic-ui-react";

// 导入子组件
import NodeSidebar from "./NodeSidebar";
import AdvancedResizablePanel from "./AdvancedResizablePanel";
import { nodeTypes } from "./components/nodes";
import LoopProperties from "./components/LoopProperties";
import { generateUUID } from "./utils";
import SimpleZoomIndicator from "./SimpleZoomIndicator";
import GridBackground from "./GridBackground";
import SubflowLoopNode from "./components/SubflowLoopNode";

import { Link } from "react-router-dom";

// 导入节点配置加载器
import NodeConfigLoader from "./NodeConfigLoader";

// 添加边界保护常量
const BOUNDARY_PADDING = 8; // 距离边界的保护距离

// 添加一些基本的流程样式 - 更小的箭头
const edgeOptions = {
  animated: true,
  style: {
    stroke: "#aaaaaa", // 修改为灰色
    strokeWidth: 1.2, // 更细的线
  },
  markerEnd: {
    type: MarkerType.ArrowClosed,
    color: "#aaaaaa", // 箭头颜色也改为灰色
    width: 8, // 更小的箭头
    height: 8, // 更小的箭头
  },
};

// 设置默认视图配置
const defaultViewport = {
  x: 0,
  y: 0,
  zoom: 1, // 默认缩放为100%（从0.75改为1.0）
};

// 获取节点默认配置 - 使用NodeConfigLoader
const getDefaultConfig = (type) => {
  const defaultConfig = NodeConfigLoader.getDefaultConfig(type);
  return JSON.parse(JSON.stringify(defaultConfig));
};

// 自定义连线渲染器组件 - 用于确保连线显示
const CustomEdgeRenderer = () => {
  useEffect(() => {
    // 应用样式确保连线可见
    const applyEdgeStyles = () => {
      const edgePaths = document.querySelectorAll(".react-flow__edge-path");
      edgePaths.forEach((path) => {
        path.style.strokeWidth = "2px";
        path.style.stroke = "#aaaaaa";
        path.style.strokeOpacity = "1";
        // 通过改变属性强制更新渲染
        path.style.strokeDasharray = path.style.strokeDasharray || "none";
      });
    };

    // 初始应用并在短暂延迟后再次应用，以捕获ReactFlow内部更新
    applyEdgeStyles();
    const timer = setTimeout(applyEdgeStyles, 300);

    return () => clearTimeout(timer);
  }, []);

  return null; // 无需渲染任何内容
};

// 主应用组件
const WorkflowEditor = () => {
  // 工作流名称状态
  const [workflowName, setWorkflowName] = useState("新业务流程");

  // 节点和边缘状态
  const [nodes, setNodes] = useState([]);
  const [edges, setEdges] = useState([]);

  // 选中节点状态
  const [selectedNode, setSelectedNode] = useState(null);

  // 选中边状态
  const [selectedEdges, setSelectedEdges] = useState([]);

  // 添加无效连接状态
  const [invalidConnection, setInvalidConnection] = useState(null);
  const invalidConnectionTimeoutRef = useRef(null);

  // 当前处理的子流程状态
  const [activeSubflow, setActiveSubflow] = useState(null);

  // 循环节点入口图标状态
  const [loopEntryIcon, setLoopEntryIcon] = useState(true);

  // 拖拽状态参考
  const reactFlowWrapper = useRef(null);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);

  // 防止重复拖放的引用标志
  const isDroppingRef = useRef(false);

  // 添加一次性CSS样式，而不是持续操作DOM
  useEffect(() => {
    const style = document.createElement("style");
    style.type = "text/css";
    style.innerHTML = `
      /* 关键的连线可见性修复 */
      .react-flow__edges {
        z-index: 1000 !important;
      }
      
      .react-flow__edge {
        z-index: 1000 !important;
        pointer-events: all !important;
        visibility: visible !important;
        opacity: 1 !important;
      }
      
      .react-flow__edge-path {
        stroke: #aaaaaa !important;
        stroke-width: 1.2px !important;
        stroke-opacity: 1 !important;
      }
      
      /* 确保节点层级低于连线 */
      .react-flow__nodes {
        z-index: 10 !important;
      }
      
      /* 确保连接点可以被点击 */
      .react-flow__handle {
        z-index: 2000 !important;
      }
      
      /* 循环节点内部区域 */
      .loop-subflow-area {
        z-index: 5 !important;
      }
      
      .loop-background-dots {
        z-index: 1 !important;
      }
      
      /* 确保处于调整大小状态的节点不会遮挡连线 */
      .loop-container.resizing {
        z-index: 20 !important;
      }
      
      /* 连接点超过一切其他元素 */
      .entry-handle-out, .react-flow__handle {
        z-index: 2000 !important;
      }
      
      /* 添加选中状态样式 */
      .react-flow__edge.selected .react-flow__edge-path {
        stroke: #1a73e8 !important; /* 选中后蓝色 */
        stroke-width: 2px !important;
      }
      
      /* 确保选中状态的边在其他边上方 */
      .react-flow__edge.selected {
        z-index: 1001 !important;
      }
    `;
    document.head.appendChild(style);

    // 应用一次性样式，但不进行持续操作
    const applyInitialStyles = () => {
      // 修复所有连线路径
      const edgePaths = document.querySelectorAll(".react-flow__edge-path");
      edgePaths.forEach((path) => {
        path.style.strokeWidth = "1.2px";
        path.style.stroke = "#aaaaaa";
        path.style.strokeOpacity = "1";
      });

      // 确保连线容器在节点上方
      const edgesContainer = document.querySelector(".react-flow__edges");
      if (edgesContainer) {
        edgesContainer.style.zIndex = "1000";
      }
    };

    // 初始应用样式
    applyInitialStyles();

    // 在短暂延迟后再次应用，以应对初始渲染后的情况
    const timeoutId = setTimeout(applyInitialStyles, 500);

    return () => {
      // 清理函数
      document.head.removeChild(style);
      clearTimeout(timeoutId);
    };
  }, []); // 只在组件挂载时执行一次

  // 加载图标 - 直接设置为true
  const loadEntryIcon = useCallback(() => {
    setLoopEntryIcon(true);
  }, []);

  // 在组件挂载时加载图标
  useEffect(() => {
    loadEntryIcon();
  }, [loadEntryIcon]);

  // 动态创建nodeTypes以传递循环入口图标
  const customNodeTypes = useMemo(
    () => ({
      START: nodeTypes.START,
      END: nodeTypes.END,
      HTTP: nodeTypes.HTTP,
      SQL: nodeTypes.SQL,
      REDIS: nodeTypes.REDIS,
      SWITCH: nodeTypes.SWITCH,
      LOOP: (props) => <SubflowLoopNode {...props} entryIcon={loopEntryIcon} />,
      SCRIPT: nodeTypes.SCRIPT,
      SET_VARIABLE: nodeTypes.SET_VARIABLE,
    }),
    [loopEntryIcon]
  );

  // 边样式计算函数
  const getEdgeStyle = useCallback(
    (edge) => {
      // 基本样式
      const style = {
        ...edgeOptions.style,
      };

      // 如果边被选中，则使用蓝色
      if (selectedEdges.includes(edge.id)) {
        style.stroke = "#1a73e8";
        style.strokeWidth = 2;
      }

      return style;
    },
    [selectedEdges]
  );

  // 显示无效连接提示
  const showInvalidConnection = (connection, message) => {
    setInvalidConnection({ ...connection, message });

    // 清除已有的超时
    if (invalidConnectionTimeoutRef.current) {
      clearTimeout(invalidConnectionTimeoutRef.current);
    }

    // 设置新的超时以清除无效连接消息
    invalidConnectionTimeoutRef.current = setTimeout(() => {
      setInvalidConnection(null);
    }, 3000);
  };

  // 更新节点内部配置
  const updateNodeInternally = useCallback(
    (nodeId, newData) => {
      console.log("Updating node internally:", nodeId, newData);

      // 确保配置数据中不包含 nodeType 和 nodeId
      if (newData.config) {
        const {
          nodeType,
          nodeId: configNodeId,
          ...configWithoutMetadata
        } = newData.config;

        // 添加调试日志，确认移除的ID
        console.log("更新节点内部 - ID检查:", {
          actualNodeId: nodeId,
          configNodeId: configNodeId, // 被移除的ID
          newConfig: configWithoutMetadata,
        });

        // 使用过滤后的配置数据
        newData.config = configWithoutMetadata;
      }

      // 使用 requestAnimationFrame 优化性能
      requestAnimationFrame(() => {
        setNodes((nds) =>
          nds.map((node) => {
            if (node.id === nodeId) {
              // 深度合并配置
              let updatedConfig = { ...node.data.config };

              // 确保配置中没有nodeType和nodeId字段
              delete updatedConfig.nodeType;
              delete updatedConfig.nodeId;

              // 如果新数据包含 config
              if (newData.config) {
                // 处理常规配置属性
                Object.keys(newData.config).forEach((key) => {
                  if (key !== "subflow") {
                    updatedConfig[key] = newData.config[key];
                  }
                });

                // 单独处理 subflow，确保深度合并
                if (newData.config.subflow) {
                  updatedConfig.subflow = {
                    ...updatedConfig.subflow,
                    ...newData.config.subflow,
                  };
                }
              }

              // 创建更新后的节点数据
              const updatedData = {
                ...node.data,
                ...newData,
                config: updatedConfig,
                // 保留 updateNodeInternally 函数引用
                updateNodeInternally,
              };

              return {
                ...node,
                data: updatedData,
              };
            }
            return node;
          })
        );

        // 如果选中的节点是当前更新的节点，也更新选中状态
        if (selectedNode && selectedNode.id === nodeId) {
          setSelectedNode((prevNode) => {
            if (!prevNode) return null;

            // 深度合并配置
            let updatedConfig = { ...prevNode.data.config };

            // 确保配置中没有nodeType和nodeId字段
            delete updatedConfig.nodeType;
            delete updatedConfig.nodeId;

            // 如果新数据包含 config
            if (newData.config) {
              // 处理常规配置属性
              Object.keys(newData.config).forEach((key) => {
                if (key !== "subflow") {
                  updatedConfig[key] = newData.config[key];
                }
              });

              // 单独处理 subflow，确保深度合并
              if (newData.config.subflow) {
                updatedConfig.subflow = {
                  ...updatedConfig.subflow,
                  ...newData.config.subflow,
                };
              }
            }

            // 创建更新后的节点数据
            const updatedData = {
              ...prevNode.data,
              ...newData,
              config: updatedConfig,
              // 保留 updateNodeInternally 函数引用
              updateNodeInternally,
            };

            return {
              ...prevNode,
              data: updatedData,
            };
          });
        }
      });
    },
    [selectedNode, setNodes, setSelectedNode]
  );

  // 更新节点属性
  const updateNodeProperties = useCallback(
    (nodeId, newData) => {
      // 确保配置数据中不包含 nodeType 和 nodeId
      if (newData.config) {
        const {
          nodeType,
          nodeId: configNodeId,
          ...configData
        } = newData.config;

        // 添加调试日志，确认移除的ID
        console.log("更新节点属性 - ID检查:", {
          actualNodeId: nodeId,
          configNodeId: configNodeId, // 被移除的ID
          newConfig: configData,
        });

        // 使用过滤后的配置数据
        newData.config = configData;
      }

      // 检查是否在更新循环节点的子流程配置
      if (
        newData.config?.subflow?.nodes &&
        newData.config.subflow.nodes.length > 0
      ) {
        // 检查重复节点
        const uniqueNodes = [];
        const nodeIds = new Set();

        newData.config.subflow.nodes.forEach((node) => {
          if (!nodeIds.has(node.id)) {
            nodeIds.add(node.id);
            uniqueNodes.push(node);
          }
        });

        // 使用过滤后的唯一节点列表
        newData.config.subflow.nodes = uniqueNodes;
      }

      setNodes((nds) =>
        nds.map((node) => {
          if (node.id === nodeId) {
            return {
              ...node,
              data: {
                ...node.data,
                ...newData,
                // 保留updateNodeInternally引用
                updateNodeInternally,
              },
            };
          }
          return node;
        })
      );

      // 更新选中节点的信息
      if (selectedNode && selectedNode.id === nodeId) {
        setSelectedNode((prevNode) => {
          if (!prevNode) return null;
          return {
            ...prevNode,
            data: {
              ...prevNode.data,
              ...newData,
              updateNodeInternally,
            },
          };
        });
      }
    },
    [selectedNode, updateNodeInternally]
  );

  // 处理节点变化
  const onNodesChange = useCallback(
    (changes) => {
      setNodes((nds) => {
        const newNodes = applyNodeChanges(changes, nds);

        // 检查节点移动是否超出父节点边界
        changes.forEach((change) => {
          if (change.type === "position" && change.dragging) {
            const node = nds.find((n) => n.id === change.id);
            if (node && node.parentNode) {
              const parentNode = nds.find((n) => n.id === node.parentNode);
              if (parentNode && parentNode.type === "LOOP") {
                // 父节点的子流程区域尺寸
                const parentWidth =
                  parentNode.data.config?.subflow?.width || 320;
                const parentHeight =
                  parentNode.data.config?.subflow?.height || 154;

                // 获取子节点的准确尺寸 - 更精确获取
                let nodeWidth = 220;
                let nodeHeight;

                // 根据节点类型调整预估尺寸
                switch (node.type) {
                  case "SWITCH":
                    // 分支节点高度取决于分支数量
                    const casesCount = node.data?.config?.cases?.length || 0;
                    nodeHeight = 24 + (casesCount + 1) * 24;
                    break;
                  case "LOOP":
                    // 循环节点高度包括头部、子流程区域和底部
                    const subflowHeight =
                      node.data?.config?.subflow?.height || 154;
                    const headerHeight = 34;
                    const footerHeight = 12;
                    nodeHeight = headerHeight + subflowHeight + footerHeight;
                    break;
                  case "SCRIPT":
                    nodeHeight = 80; // 脚本节点固定高度
                    break;
                  case "HTTP":
                    nodeHeight = 80; // HTTP节点固定高度
                    break;
                  case "SQL":
                    nodeHeight = 80; // SQL节点固定高度
                    break;
                  case "REDIS":
                    nodeHeight = 80; // Redis节点固定高度
                    break;
                  case "SET_VARIABLE":
                    nodeHeight = 80; // 变量节点固定高度
                    break;
                  case "END":
                    nodeHeight = 70; // 结束节点可能较小
                    break;
                  default:
                    nodeHeight = 80; // 默认高度
                }

                // 如果节点有明确的宽高定义，使用实际尺寸
                if (node.width && node.height) {
                  nodeWidth = node.width;
                  nodeHeight = node.height;
                }

                // 计算边界，添加保护距离，并考虑节点自身的尺寸
                const minX = BOUNDARY_PADDING + 15;
                const minY = BOUNDARY_PADDING + 34;
                // 注意：对于底部边界，我们需要确保不超出
                const maxX = parentWidth - nodeWidth - BOUNDARY_PADDING - 10;
                const maxY = parentHeight - nodeHeight - BOUNDARY_PADDING + 34;

                // 检查并调整节点位置，确保子节点完全在边界内
                let correctedX = Math.max(
                  minX,
                  Math.min(maxX, change.position.x)
                );
                let correctedY = Math.max(
                  minY,
                  Math.min(maxY, change.position.y)
                );

                // 查找并更新节点位置
                const nodeIndex = newNodes.findIndex((n) => n.id === change.id);
                if (nodeIndex >= 0) {
                  newNodes[nodeIndex].position = {
                    x: correctedX,
                    y: correctedY,
                  };
                }
              }
            }
          }
        });

        return newNodes;
      });

      // 清除选择如果节点被删除
      changes.forEach((change) => {
        if (
          change.type === "remove" &&
          selectedNode &&
          selectedNode.id === change.id
        ) {
          setSelectedNode(null);
        }
      });
    },
    [selectedNode]
  );

  // 处理连接
  const onConnect = useCallback(
    (connection) => {
      console.log("连接请求:", connection);

      // 获取源节点和目标节点
      const sourceNode = nodes.find((node) => node.id === connection.source);
      const targetNode = nodes.find((node) => node.id === connection.target);

      if (!sourceNode || !targetNode) {
        console.log("未找到源节点或目标节点，取消连接");
        return;
      }

      // 检查是否从入口点连接
      const isEntryPointConnection = connection.sourceHandle === "entry-out";

      // 获取父节点信息
      const sourceParent = sourceNode.parentNode;
      const targetParent = targetNode.parentNode;

      console.log("连接详情:", {
        sourceId: connection.source,
        sourceType: sourceNode.type,
        sourceParent,
        targetId: connection.target,
        targetType: targetNode.type,
        targetParent,
        isEntryPointConnection,
        sourceHandle: connection.sourceHandle,
      });

      // 检查连接约束条件

      // 规则1: 结束节点不能有输出连接
      if (sourceNode.type === "END") {
        showInvalidConnection(connection, "结束节点不能有输出连接");
        console.log("结束节点不能有输出连接，取消连接");
        return;
      }

      // 关键修复: 入口点连接的特殊处理
      if (isEntryPointConnection) {
        // 对于入口点连接，源节点是循环节点本身，目标节点应该是该循环节点的子节点
        // 所以要检查: 源节点ID === 目标节点的父节点
        if (connection.source === targetParent) {
          console.log("循环入口点连接到子节点，允许连接");
          // 允许连接，继续处理
        } else {
          console.log("循环入口点只能连接到同一循环内的节点，取消连接");
          showInvalidConnection(
            connection,
            "循环入口点只能连接到同一循环内的节点"
          );
          return;
        }
      }
      // 循环内节点连接循环内节点 - 允许同一循环内部的节点互相连接
      else if (sourceParent && targetParent && sourceParent === targetParent) {
        // 同一个循环内的节点可以互相连接，直接通过这个判断，不做限制
        console.log("同一循环内的节点连接，允许连接");
      }
      // 规则3: 循环外部节点不能连接到循环内部节点
      else if (!sourceParent && targetParent && !isEntryPointConnection) {
        // 注意: 这里添加 !isEntryPointConnection 避免与入口点连接规则冲突
        console.log("外部节点不能连接到循环内部节点，取消连接");
        showInvalidConnection(
          connection,
          "不允许从循环外部节点连接到循环内部节点"
        );
        return;
      }
      // 规则4: 循环内部节点不能连接到循环外部节点
      else if (sourceParent && !targetParent) {
        console.log("循环内部节点不能连接到外部节点，取消连接");
        showInvalidConnection(
          connection,
          "不允许从循环内部节点连接到循环外部节点"
        );
        return;
      }
      // 规则5: 不同循环内的节点不能相互连接
      else if (sourceParent && targetParent && sourceParent !== targetParent) {
        console.log("不同循环内的节点不能相互连接，取消连接");
        showInvalidConnection(connection, "不允许连接不同循环内的节点");
        return;
      }

      // 所有检查通过，添加边缘
      console.log("所有检查通过，添加连接");
      // 添加唯一ID便于识别
      const edgeId = `e-${connection.source}-${
        connection.target
      }-${Date.now()}`;

      setEdges((edges) =>
        addEdge(
          {
            ...connection,
            ...edgeOptions,
            id: edgeId,
          },
          edges
        )
      );

      // 如果连接是入口点到循环内节点，添加到子流程配置
      if (isEntryPointConnection && connection.source === targetParent) {
        const loopNode = nodes.find((node) => node.id === connection.source);
        if (loopNode && loopNode.type === "LOOP") {
          // 检查边是否已存在
          const newEdgeId = `e-entry-${connection.target}`;
          const existingEdges = loopNode.data.config?.subflow?.edges || [];

          // 如果边不存在，才添加
          if (
            !existingEdges.some(
              (edge) =>
                edge.source === connection.source &&
                edge.sourceHandle === "entry-out" &&
                edge.target === connection.target
            )
          ) {
            // 添加到子流程边缘
            const newEdge = {
              id: newEdgeId,
              source: connection.source,
              sourceHandle: "entry-out",
              target: connection.target,
              targetHandle: connection.targetHandle,
              ...edgeOptions,
            };

            const updatedSubflowEdges = [...existingEdges, newEdge];

            // 更新循环节点配置
            console.log("更新循环节点子流程边缘配置 - 入口点连接");
            updateNodeProperties(loopNode.id, {
              config: {
                ...loopNode.data.config,
                subflow: {
                  ...loopNode.data.config?.subflow,
                  edges: updatedSubflowEdges,
                },
              },
            });
          }
        }
      }
      // 如果连接是在同一循环内的节点之间，更新循环节点的子流程配置
      else if (sourceParent && targetParent && sourceParent === targetParent) {
        // 在相同循环节点内部的连接，更新循环节点配置
        const loopNode = nodes.find((node) => node.id === sourceParent);
        if (loopNode && loopNode.type === "LOOP") {
          // 检查边是否已存在
          const newEdgeId = `e-${connection.source}-${connection.target}`;
          const existingEdges = loopNode.data.config?.subflow?.edges || [];

          // 如果边不存在，才添加
          if (
            !existingEdges.some(
              (edge) =>
                edge.source === connection.source &&
                edge.target === connection.target
            )
          ) {
            // 添加到子流程边缘
            const newEdge = {
              id: newEdgeId,
              source: connection.source,
              target: connection.target,
              sourceHandle: connection.sourceHandle,
              targetHandle: connection.targetHandle,
              ...edgeOptions,
            };

            const updatedSubflowEdges = [...existingEdges, newEdge];

            // 更新循环节点配置
            console.log("更新循环节点子流程边缘配置 - 内部节点连接");
            updateNodeProperties(loopNode.id, {
              config: {
                ...loopNode.data.config,
                subflow: {
                  ...loopNode.data.config?.subflow,
                  edges: updatedSubflowEdges,
                },
              },
            });
          }
        }
      }

      // 连接成功后强制应用样式以确保边缘可见
      setTimeout(() => {
        // 找到所有边缘路径元素并应用样式
        const edgePaths = document.querySelectorAll(".react-flow__edge-path");
        edgePaths.forEach((path) => {
          path.style.strokeWidth = "1.2px";
          path.style.stroke = "#aaaaaa";
          path.style.strokeOpacity = "1";

          // 通过改变一个属性来强制更新渲染
          const currentStrokeDasharray = path.style.strokeDasharray;
          path.style.strokeDasharray = currentStrokeDasharray || "none";
        });

        // 确保边缘容器在正确的层级
        const edgesContainer = document.querySelector(".react-flow__edges");
        if (edgesContainer) {
          edgesContainer.style.zIndex = "1000";
        }
      }, 50);
    },
    [nodes, updateNodeProperties]
  );

  // 处理边缘变更
  const onEdgesChange = useCallback(
    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),
    []
  );

  // 处理边缘点击
  const onEdgeClick = useCallback((event, edge) => {
    // 设置被点击的边为选中状态
    setSelectedEdges([edge.id]);

    // 阻止事件冒泡，避免触发画布点击事件
    event.stopPropagation();
  }, []);

  // 处理节点点击
  const onNodeClick = useCallback(
    (event, node) => {
      // Add updateNodeInternally function to the node data
      const nodeWithUpdater = {
        ...node,
        data: {
          ...node.data,
          updateNodeInternally,
        },
      };

      // Always set the clicked node as selected, regardless of whether it's a child or parent
      setSelectedNode(nodeWithUpdater);
    },
    [updateNodeInternally]
  );

  // 处理节点拖动
  const onNodeDrag = useCallback((event, node) => {
    // 在拖动时添加标记类，可用于CSS选择器优化渲染
    document
      .querySelectorAll(`.react-flow__node[data-id="${node.id}"]`)
      .forEach((el) => {
        el.classList.add("dragging");
      });

    // 发布节点拖动事件，用于在SubflowLoopNode中捕获和显示坐标
    if (node.parentNode) {
      const customEvent = new CustomEvent("node-drag", {
        detail: {
          nodeId: node.id,
          parentId: node.parentNode,
          position: node.position,
          type: node.type,
        },
      });
      document.dispatchEvent(customEvent);
    }
  }, []);

  // 处理节点拖动开始
  const onNodeDragStart = useCallback((event, node) => {
    // 发布节点拖动开始事件
    if (node.parentNode) {
      const customEvent = new CustomEvent("node-drag-start", {
        detail: {
          nodeId: node.id,
          parentId: node.parentNode,
          position: node.position,
          type: node.type,
        },
      });
      document.dispatchEvent(customEvent);
    }
  }, []);

  // 处理节点拖动结束
  const onNodeDragStop = useCallback((event, node) => {
    // 停止拖动时移除标记类
    document.querySelectorAll(".react-flow__node.dragging").forEach((el) => {
      el.classList.remove("dragging");
    });

    // 发布节点拖动结束事件
    if (node.parentNode) {
      const customEvent = new CustomEvent("node-drag-stop", {
        detail: {
          nodeId: node.id,
          parentId: node.parentNode,
          position: node.position,
          type: node.type,
        },
      });
      document.dispatchEvent(customEvent);
    }
  }, []);

  // 处理背景点击
  const onPaneClick = () => {
    setSelectedNode(null);
    // 清除线条选中状态
    setSelectedEdges([]);
    // 取消活动子流程
    setActiveSubflow(null);
  };

  // 处理背景拖拽完成
  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
  }, []);

  // 处理拖拽释放
  const onDrop = useCallback(
    (event) => {
      // 检查是否来自子流程区域的事件冒泡，如果是则忽略
      const isSubflowDrop = event.target.closest(".loop-subflow-area");
      if (isSubflowDrop) {
        return;
      }

      // 防止重复处理同一事件
      if (isDroppingRef.current) return;
      isDroppingRef.current = true;

      event.preventDefault();

      // 获取拖拽数据
      const nodeType = event.dataTransfer.getData("application/reactflow/type");
      if (!nodeType) {
        isDroppingRef.current = false;
        return;
      }

      // 获取拖拽位置
      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();
      const position = reactFlowInstance.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });

      // 创建唯一ID，避免ID冲突 - 使用独立的32位字符串
      const uniqueId = generateUUID();

      // 创建新节点
      const newNode = {
        id: uniqueId,
        type: nodeType,
        position,
        // 明确设置为非子节点
        parentNode: null,
        draggable: true,
        data: {
          label: getNodeTypeDisplayName(nodeType),
          config: getDefaultConfig(nodeType),
          // 添加updateNodeInternally函数到节点数据
          updateNodeInternally,
        },
      };

      // 创建节点前的约束检查
      if (
        nodeType === "START" &&
        nodes.some((node) => node.type === "START" && !node.parentNode)
      ) {
        alert("流程中只能有一个开始节点!");
        isDroppingRef.current = false;
        return;
      }

      if (
        nodeType === "END" &&
        nodes.some((node) => node.type === "END" && !node.parentNode)
      ) {
        alert("流程中只能有一个结束节点!");
        isDroppingRef.current = false;
        return;
      }

      // 添加新节点
      setNodes((nds) => nds.concat(newNode));

      // 自动选择新创建的节点
      setSelectedNode(newNode);

      // 使用setTimeout重置标志，确保当前事件循环结束后再重置
      setTimeout(() => {
        isDroppingRef.current = false;
      }, 100);
    },
    [reactFlowInstance, nodes, updateNodeInternally]
  );

  // 获取节点类型显示名称
  const getNodeTypeDisplayName = (type) => {
    switch (type) {
      case "START":
        return "开始";
      case "END":
        return "结束";
      case "HTTP":
        return "HTTP";
      case "SQL":
        return "SQL";
      case "REDIS":
        return "Redis";
      case "SCRIPT":
        return "脚本";
      case "SWITCH":
        return "分支";
      case "LOOP":
        return "循环";
      case "SET_VARIABLE":
        return "变量";
      default:
        return type;
    }
  };

  // 保存工作流
  const saveWorkflow = () => {
    // 移除节点数据中的函数引用，以便正确序列化
    const cleanNodes = nodes.map((node) => ({
      ...node,
      data: {
        ...node.data,
        updateNodeInternally: undefined, // 移除函数引用
      },
    }));

    const workflow = {
      name: workflowName,
      version: 1,
      nodes: cleanNodes,
      edges: edges,
    };

    alert("流程已准备好保存!");
    console.log("工作流数据:", workflow);
    document.getElementById("workflow-json").value = JSON.stringify(
      workflow,
      null,
      2
    );
  };

  // 加载工作流
  const loadWorkflow = () => {
    try {
      const jsonContent = document.getElementById("workflow-json").value;
      if (!jsonContent) {
        alert("请先导出或输入JSON");
        return;
      }

      const workflow = JSON.parse(jsonContent);
      setWorkflowName(workflow.name || "新业务流程");

      // 添加updateNodeInternally函数到所有节点
      const nodesWithUpdater = (workflow.nodes || []).map((node) => ({
        ...node,
        data: {
          ...node.data,
          updateNodeInternally,
        },
      }));

      setNodes(nodesWithUpdater);
      setEdges(workflow.edges || []);
      alert("工作流加载成功!");
    } catch (e) {
      alert("JSON格式错误: " + e.message);
    }
  };

  // 清空工作区
  const clearWorkspace = () => {
    if (window.confirm("确定要清空工作区吗？所有未保存的内容将丢失。")) {
      setNodes([]);
      setEdges([]);
      setSelectedNode(null);
      setActiveSubflow(null);
      document.getElementById("workflow-json").value = "";
    }
  };

  // 验证工作流
  const validateWorkflow = () => {
    const errors = [];

    // 检查开始节点
    const startNodes = nodes.filter(
      (node) => node.type === "START" && !node.parentNode
    );
    if (startNodes.length === 0) {
      errors.push("流程缺少开始节点");
    } else if (startNodes.length > 1) {
      errors.push("流程有多个开始节点");
    }

    // 检查结束节点
    const endNodes = nodes.filter(
      (node) => node.type === "END" && !node.parentNode
    );
    if (endNodes.length === 0) {
      errors.push("流程缺少结束节点");
    } else if (endNodes.length > 1) {
      errors.push("流程有多个结束节点");
    }

    // 检查悬空节点（无输入无输出）
    nodes
      .filter((node) => !node.parentNode)
      .forEach((node) => {
        if (node.type !== "START" && node.type !== "END") {
          const incomingEdges = edges.filter((edge) => edge.target === node.id);
          const outgoingEdges = edges.filter((edge) => edge.source === node.id);

          if (incomingEdges.length === 0 && outgoingEdges.length === 0) {
            errors.push(
              `节点"${node.data.label}"(${node.id})悬空，未连接到流程中`
            );
          }
        }
      });

    // 显示验证结果
    if (errors.length === 0) {
      alert("✓ 验证通过：工作流符合所有约束条件。");
    } else {
      alert("✗ 验证失败，请修复以下问题：\n\n" + errors.join("\n"));
    }
  };

  // 处理删除分支边的函数
  const handleDeleteEdge = (nodeId, sourceHandle) => {
    // 找到所有以该节点为源且使用指定sourceHandle的边
    const edgesToDelete = edges.filter(
      (edge) => edge.source === nodeId && edge.sourceHandle === sourceHandle
    );

    if (edgesToDelete.length > 0) {
      // 过滤掉要删除的边
      setEdges((eds) =>
        eds.filter(
          (edge) =>
            !(edge.source === nodeId && edge.sourceHandle === sourceHandle)
        )
      );
    }
  };

  // 初始化时处理
  const onInit = (instance) => {
    setReactFlowInstance(instance);

    // 设置默认缩放为100%
    instance.setViewport({
      x: 0,
      y: 0,
      zoom: 1,
    });
  };

  return (
    <div className="workflow-editor">
      <Link to="/flows" className="toolbar-button">
        <Icon name="arrow left" /> 返回列表
      </Link>
      {/* 工具栏 */}
      <div className="toolbar">
        <input
          type="text"
          value={workflowName}
          onChange={(e) => setWorkflowName(e.target.value)}
          placeholder="输入流程名称"
          className="workflow-name-input"
        />
        <button onClick={saveWorkflow} className="toolbar-button">
          保存流程
        </button>
        <button onClick={loadWorkflow} className="toolbar-button">
          加载流程
        </button>
        <button onClick={clearWorkspace} className="toolbar-button warning">
          清空工作区
        </button>
        <button onClick={validateWorkflow} className="toolbar-button primary">
          验证工作流
        </button>
      </div>

      {/* 主容器 */}
      <div className="container">
        {/* 侧边栏 */}
        <NodeSidebar />

        {/* 工作流区域 */}
        <div className="workflow-area" ref={reactFlowWrapper}>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onNodeClick={onNodeClick}
            onEdgeClick={onEdgeClick}
            onPaneClick={onPaneClick}
            onInit={onInit}
            onDrop={onDrop}
            onDragOver={onDragOver}
            onNodeDrag={onNodeDrag}
            onNodeDragStart={onNodeDragStart}
            onNodeDragStop={onNodeDragStop}
            nodeTypes={customNodeTypes}
            defaultEdgeOptions={edgeOptions}
            edgesFocusable={true}
            defaultViewport={defaultViewport}
            minZoom={0.2}
            maxZoom={2}
            fitView={false}
            fitViewOptions={{ padding: 0.2 }}
            snapToGrid={false}
            nodesDraggable={true}
            elementsSelectable={true}
            proOptions={{
              hideAttribution: true,
              elevateEdgesOnSelect: true,
            }}
            style={{ zIndex: 0 }}
            className="alternate-dots-flow edge-priority-flow"
          >
            <CustomEdgeRenderer />
            <Controls
              showZoom={true}
              showFitView={true}
              showLock={true}
              position="bottom-left"
              style={{ left: 10, bottom: 10 }}
            />
            <MiniMap
              style={{ right: 10, bottom: 10 }}
              className="workflow-minimap"
              nodeColor={(node) => {
                switch (node.type) {
                  case "START":
                    return "#27ae60";
                  case "END":
                    return "#e74c3c";
                  case "HTTP":
                    return "#3498db";
                  case "SQL":
                    return "#f39c12";
                  case "REDIS":
                    return "#9b59b6";
                  case "SWITCH":
                    return "#1abc9c";
                  case "LOOP":
                    return "#3498db";
                  case "SCRIPT":
                    return "#34495e";
                  case "SET_VARIABLE":
                    return "#f1c40f";
                  default:
                    return "#ccc";
                }
              }}
              maskColor="rgba(255, 255, 255, 0.8)"
            />
            <GridBackground size={16} color="#c0c0c0" bgColor="#f0f0f0" />
          </ReactFlow>
          {reactFlowInstance && (
            <SimpleZoomIndicator reactFlowInstance={reactFlowInstance} />
          )}

          {/* 无效连接提示 */}
          {invalidConnection && (
            <div
              style={{
                position: "absolute",
                top: "20px",
                left: "50%",
                transform: "translateX(-50%)",
                backgroundColor: "#f44336",
                color: "white",
                padding: "10px 20px",
                borderRadius: "4px",
                zIndex: 1000,
                boxShadow: "0 2px 10px rgba(0, 0, 0, 0.2)",
              }}
            >
              <strong>连接限制：</strong> {invalidConnection.message}
            </div>
          )}
        </div>

        {/* 属性面板 */}
        <AdvancedResizablePanel
          selectedNode={selectedNode}
          updateNodeProperties={updateNodeProperties}
          nodes={nodes}
          edges={edges}
          onDeleteEdge={handleDeleteEdge}
        />
      </div>

      {/* JSON显示 */}
      <div id="json-display">
        <h3>流程JSON</h3>
        <textarea id="workflow-json"></textarea>
      </div>
    </div>
  );
};

// 导出为 ReactFlowProvider 包装的组件
export default () => (
  <ReactFlowProvider>
    <WorkflowEditor />
  </ReactFlowProvider>
);



================================================================================
# 文件: src/ButtonField.js
# 行数: 95
================================================================================

// ButtonField.js - 依赖优化版本

import React from "react";
import { Button, Icon } from "semantic-ui-react";

/**
 * 自定义按钮字段组件，通过JSON配置生成按钮
 * 优化版本 - 移除条件表达式判断，依赖schema的dependencies机制来控制显示
 *
 * 支持配置项：
 * - label: 按钮文本
 * - action: 按钮动作类型 (debug, export, test 等)
 * - className: 自定义CSS类名
 * - color: 按钮颜色 (primary, secondary 等，支持 Semantic UI 的颜色)
 * - size: 按钮大小 (mini, tiny, small, medium, large, big, huge, massive)
 * - icon: 按钮图标名称 (如 "play", "bug" 等，支持 Semantic UI 的图标)
 * - fluid: 是否占满容器宽度 (true/false)
 * - position: 按钮位置 (bottom, top, right, left)
 * - loadingText: 加载状态下的按钮文本
 */
const ButtonField = (props) => {
  const {
    uiSchema = {},
    formData = {}, // 提供默认值避免undefined
    formContext = {},
    idSchema,
    registry,
  } = props;

  // 获取按钮配置
  const buttonConfig = uiSchema["ui:options"] || {};

  // 通过日志帮助调试
  console.log("ButtonField渲染:", {
    fieldId: idSchema?.$id,
    formData,
    buttonConfig,
    hasContext: !!formContext,
    hasActions: !!(formContext && formContext.actions),
    actionName: buttonConfig.action,
  });

  // 根据按钮类型获取处理函数
  const getActionHandler = (actionType) => {
    // 如果 formContext 中有对应的处理函数，则使用它
    if (formContext.actions && formContext.actions[actionType]) {
      return () => formContext.actions[actionType](formData);
    }

    // 默认处理函数
    return () => {
      console.log(`按钮动作 ${actionType} 被点击，但没有找到对应的处理函数`);
    };
  };

  // 检查是否处于加载状态
  const isLoading =
    formContext.loadingActions &&
    formContext.loadingActions[buttonConfig.action];

  // 构建按钮属性
  const buttonProps = {
    type: "button",
    className: buttonConfig.className,
    onClick: getActionHandler(buttonConfig.action),
    disabled: isLoading || formContext.disabled,
    loading: isLoading,
    color: buttonConfig.color || "primary",
    size: buttonConfig.size || "medium",
    fluid: buttonConfig.fluid === true,
  };

  // 生成按钮的样式，考虑定位
  const buttonStyle = {
    marginTop: "16px",
    ...(buttonConfig.style || {}),
  };

  return (
    <div
      className={`button-field-container ${buttonConfig.position || "bottom"}`}
      style={buttonStyle}
    >
      <Button {...buttonProps}>
        {buttonConfig.icon && <Icon name={buttonConfig.icon} />}
        {isLoading
          ? buttonConfig.loadingText || "处理中..."
          : buttonConfig.label}
      </Button>
    </div>
  );
};

export default ButtonField;



================================================================================
# 文件: src/BranchConditionsField.js
# 行数: 204
================================================================================

// BranchConditionsField.js
import React, { useState, useEffect } from "react";
import { Table, Button, Input } from "semantic-ui-react";

// 自定义删除图标组件
const TrashIcon = () => (
  <svg viewBox="0 0 1024 1024" width="20" height="20">
    <path
      d="M779.3 228.2h-113v-35.4c0-34.9-28.4-63.3-63.3-63.3H425c-34.9 0-63.3 28.4-63.3 63.3v35.4h-113c-32.9 0-59.7 26.8-59.7 59.7v38.5c0 32.9 26.8 59.7 59.7 59.7h1.8v412.8c0 54.1 44 98.1 98.1 98.1h330.9c54.1 0 98.1-44 98.1-98.1V386.1h1.8c32.9 0 59.7-26.8 59.7-59.7v-38.5c-0.1-32.9-26.8-59.7-59.8-59.7z m-374.9-35.4c0-11.4 9.2-20.6 20.6-20.6h178c11.4 0 20.6 9.2 20.6 20.6v35.4H404.4v-35.4z m330.4 606c0 30.5-24.8 55.4-55.4 55.4H348.5c-30.5 0-55.4-24.8-55.4-55.4V386.1h441.7v412.7z m61.5-472.4c0 9.4-7.6 17-17 17H248.7c-9.4 0-17-7.6-17-17v-38.5c0-9.4 7.6-17 17-17h530.7c9.4 0 17 7.6 17 17v38.5z"
      fill="#2c2c2c"
    />
    <path
      d="M377.9 462.3h42.7v317.5h-42.7zM492.6 462.3h42.7v317.5h-42.7zM607.4 462.3h42.7v317.5h-42.7z"
      fill="#2c2c2c"
    />
  </svg>
);

/**
 * 分支条件配置组件
 * 使用表格布局展示分支条件，支持添加、编辑、删除分支
 * 显示连接状态：绿色表示已连接，灰色表示未连接
 */
const BranchConditionsField = (props) => {
  const { formData = [], onChange, uiSchema = {}, formContext = {} } = props;

  // 使用formContext中的connections获取连接状态和删除边的回调
  const connections = formContext.connections || {};
  const onDeleteBranchEdge = formContext.onDeleteBranchEdge;
  const nodeId = formContext.nodeId;

  // 添加新分支
  const addBranch = () => {
    const newIndex = formData.length + 1;
    const newBranch = {
      id: `branch-${Date.now()}`, // 生成唯一ID
      name: `case${newIndex}`,
      condition: "",
      target: "",
    };

    const updatedBranches = [...formData, newBranch];
    onChange(updatedBranches);
  };

  // 删除分支
  const deleteBranch = (index) => {
    // 首先调用回调函数删除相关的边
    if (onDeleteBranchEdge && nodeId) {
      // 将索引传递给删除边的函数
      onDeleteBranchEdge(nodeId, `case-${index}`);
    }

    const updatedBranches = [...formData];
    updatedBranches.splice(index, 1);

    // 重新编号后续分支
    for (let i = index; i < updatedBranches.length; i++) {
      updatedBranches[i].name = `case${i + 1}`;
    }

    onChange(updatedBranches);
  };

  // 更新分支条件
  const updateCondition = (index, value) => {
    const updatedBranches = [...formData];
    updatedBranches[index].condition = value;
    onChange(updatedBranches);
  };

  // 获取连接状态
  const getConnectionStatus = (branchId, index) => {
    // 检查分支ID或索引对应的连接状态
    return connections[branchId] || connections[`case-${index}`] || false;
  };

  // 获取默认分支连接状态
  const getDefaultConnectionStatus = () => {
    return connections["default"] || false;
  };

  return (
    <div
      className="branch-conditions-field"
      style={{
        marginTop: "35px",
      }}
    >
      <Table compact celled>
        <Table.Header>
          <Table.Row>
            <Table.HeaderCell width={3} textAlign="center">
              状态
            </Table.HeaderCell>
            <Table.HeaderCell width={3}>名称</Table.HeaderCell>
            <Table.HeaderCell width={10}>条件表达式</Table.HeaderCell>
            <Table.HeaderCell width={1}></Table.HeaderCell>
          </Table.Row>
        </Table.Header>

        <Table.Body>
          {formData.map((branch, index) => (
            <Table.Row key={branch.id || index}>
              <Table.Cell textAlign="center">
                <div
                  className="connection-indicator"
                  style={{
                    width: "10px",
                    height: "10px",
                    borderRadius: "50%",
                    backgroundColor: getConnectionStatus(branch.id, index)
                      ? "#27ae60" // 绿色表示已连接
                      : "#bdc3c7", // 灰色表示未连接
                    display: "inline-block",
                  }}
                  title={
                    getConnectionStatus(branch.id, index) ? "已连接" : "未连接"
                  }
                />
              </Table.Cell>
              <Table.Cell>{branch.name || `case${index + 1}`}</Table.Cell>
              <Table.Cell>
                <Input
                  fluid
                  transparent
                  value={branch.condition || ""}
                  onChange={(e, { value }) => updateCondition(index, value)}
                  placeholder="输入条件表达式..."
                />
              </Table.Cell>
              <Table.Cell textAlign="center">
                <div
                  onClick={() => deleteBranch(index)}
                  style={{
                    cursor: "pointer",
                    display: "inline-flex",
                    alignItems: "center",
                    justifyContent: "center",
                    padding: "5px",
                  }}
                >
                  <TrashIcon />
                </div>
              </Table.Cell>
            </Table.Row>
          ))}

          {/* 默认分支行 */}
          <Table.Row>
            <Table.Cell textAlign="center">
              <div
                className="connection-indicator"
                style={{
                  width: "10px",
                  height: "10px",
                  borderRadius: "50%",
                  backgroundColor: getDefaultConnectionStatus()
                    ? "#27ae60" // 绿色表示已连接
                    : "#bdc3c7", // 灰色表示未连接
                  display: "inline-block",
                }}
                title={getDefaultConnectionStatus() ? "已连接" : "未连接"}
              />
            </Table.Cell>
            <Table.Cell>默认分支</Table.Cell>
            <Table.Cell colSpan="2">
              <div className="switch-default-label">
                当所有条件都不满足时执行
              </div>
            </Table.Cell>
          </Table.Row>
        </Table.Body>
      </Table>

      <Button
        fluid
        onClick={addBranch}
        style={{
          backgroundColor: "#f2f3f4",
          color: "#2c3e50",
          marginTop: "5px",
        }}
      >
        <svg
          viewBox="0 0 1024 1024"
          version="1.1"
          xmlns="http://www.w3.org/2000/svg"
          width="10"
          height="10"
        >
          <path
            d="M970.745 459.367 566.614 459.367 566.614 55.251C566.614 25.842 542.771 2 513.361 2c-29.411 0-53.253 23.841-53.253 53.251l0 404.116L55.975 459.367c-29.411 0-53.253 23.841-53.253 53.25 0 29.41 23.842 53.253 53.253 53.253l404.133 0 0 404.115c0 29.407 23.842 53.249 53.253 53.249 29.41 0 53.253-23.842 53.253-53.249L566.614 565.87l404.131 0c29.413 0 53.255-23.843 53.255-53.253C1024 483.208 1000.158 459.367 970.745 459.367z"
            fill="#272636"
          ></path>
        </svg>
        {" 添加分支"}
      </Button>
    </div>
  );
};

export default BranchConditionsField;



================================================================================
# 文件: src/MarkdownDocField.js
# 行数: 123
================================================================================

// MarkdownDocField.js - 修复版本
import React, { useState, useEffect } from "react";
import { Message, Loader } from "semantic-ui-react";
import ReactMarkdown from "react-markdown";

/**
 * Markdown文档显示组件
 * 用于从指定路径加载并显示Markdown格式的文档
 */
const MarkdownDocField = (props) => {
  const { formData = {}, uiSchema = {} } = props;
  const [content, setContent] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  // 从UI Schema中获取文档路径
  const docPath = uiSchema?.["ui:options"]?.docPath || "";

  // 加载文档内容
  useEffect(() => {
    if (!docPath) {
      setIsLoading(false);
      setError("未指定文档路径");
      return;
    }

    console.log("尝试加载文档:", docPath);

    // 尝试加载文档
    setIsLoading(true);
    setError(null);

    // 从指定路径加载文档 - 修复路径问题
    fetch(docPath)
      .then((response) => {
        if (!response.ok) {
          throw new Error(
            `无法加载文档: ${response.status} ${response.statusText}`
          );
        }
        return response.text();
      })
      .then((text) => {
        console.log("文档加载成功, 内容长度:", text.length);
        setContent(text);
        setIsLoading(false);
      })
      .catch((err) => {
        console.error("加载文档失败:", err);
        setError(`加载文档失败: ${err.message}`);
        setIsLoading(false);

        // 设置默认内容，以防加载失败
        setContent(
          `# ${getNodeTypeFromPath(
            docPath
          )} 节点使用说明\n\n暂无详细文档，这是自动生成的默认内容。`
        );
      });
  }, [docPath]);

  // 从路径中提取节点类型名称
  const getNodeTypeFromPath = (path) => {
    const match = path.match(/\/(\w+)_node\.md$/);
    if (match && match[1]) {
      return match[1].toUpperCase();
    }
    return "节点";
  };

  // 显示加载状态
  if (isLoading) {
    return (
      <div style={{ padding: "20px", textAlign: "center" }}>
        <Loader active inline="centered" content="正在加载文档..." />
      </div>
    );
  }

  // 如果有错误但有内容，优先显示内容
  if (content) {
    return (
      <div className="markdown-documentation" style={{ padding: "5px 0" }}>
        <ReactMarkdown>{content}</ReactMarkdown>

        {error && (
          <Message warning size="small" style={{ marginTop: "15px" }}>
            <Message.Header>注意</Message.Header>
            <p>使用默认文档内容，因为: {error}</p>
          </Message>
        )}
      </div>
    );
  }

  // 显示错误信息
  if (error) {
    return (
      <Message negative>
        <Message.Header>文档加载失败</Message.Header>
        <p>{error}</p>
        <p>文档路径: {docPath || "未指定"}</p>
      </Message>
    );
  }

  // 显示文档内容
  return (
    <div className="markdown-documentation" style={{ padding: "5px 0" }}>
      {content ? (
        <ReactMarkdown>{content}</ReactMarkdown>
      ) : (
        <Message info>
          <Message.Header>没有文档</Message.Header>
          <p>当前节点没有可用的文档内容</p>
        </Message>
      )}
    </div>
  );
};

export default MarkdownDocField;



================================================================================
# 文件: src/utils.js
# 行数: 13
================================================================================

// 修改 utils.js 文件中的 generateUUID 函数，生成纯32位字符串而不带前缀后缀

// 工具函数文件

// 生成纯32位字符串形式的唯一ID（不带前缀和后缀）
export const generateUUID = () => {
  // 生成32位的随机字符串
  return Array.from({ length: 32 }, () => {
    const randomChar = Math.floor(Math.random() * 16).toString(16);
    return randomChar;
  }).join("");
};



================================================================================
# 文件: src/TabPropertiesPanel.js
# 行数: 643
================================================================================

// TabPropertiesPanel.js - 完整代码
import React, { useState, useEffect } from "react";
import { Form } from "@rjsf/semantic-ui";
import validator from "@rjsf/validator-ajv8";
import { Tab, Message, Header } from "semantic-ui-react";

// 导入自定义字段和小部件
import { customFields, customWidgets } from "./components/fields/schemaLoader";
import LoopProperties from "./components/LoopProperties";
import ErrorHandlingTab from "./ErrorHandlingTab";

// 导入节点配置加载器
import NodeConfigLoader from "./NodeConfigLoader";

// 获取节点的连接信息
const getNodeConnections = (nodeId, edges) => {
  // 找到所有以这个节点为源的边
  const nodeEdges = edges.filter((edge) => edge.source === nodeId);

  // 创建连接信息映射
  const connections = {};

  nodeEdges.forEach((edge) => {
    if (edge.sourceHandle) {
      // 对于SWITCH节点
      if (edge.sourceHandle.startsWith("case-")) {
        // 提取case索引，格式为case-0, case-1等
        connections[edge.sourceHandle] = true;
      } else if (edge.sourceHandle === "default") {
        connections["default"] = true;
      }
    }
  });

  return connections;
};

// 空面板组件
const EmptyPanel = () => {
  return (
    <div className="properties-panel">
      <h3>节点属性</h3>
      <div id="properties-content">
        <p>请选择一个节点进行编辑</p>
      </div>
    </div>
  );
};

// 错误面板组件
const ErrorPanel = ({ nodeType }) => {
  return (
    <div className="properties-panel">
      <h3>节点属性</h3>
      <div id="properties-content">
        <Message negative>
          <Message.Header>配置错误</Message.Header>
          <p>未找到节点类型 "{nodeType}" 的配置信息</p>
        </Message>
      </div>
    </div>
  );
};

// 循环节点面板
const LoopNodePanel = ({ node, updateNode, nodes }) => {
  return (
    <div>
      <LoopProperties node={node} updateNode={updateNode} nodes={nodes} />
    </div>
  );
};

// 标准节点面板
const StandardNodePanel = ({
  selectedNode,
  updateNodeProperties,
  allNodes,
  allEdges,
  onDeleteEdge,
}) => {
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const [loadingActions, setLoadingActions] = useState({});
  const [debugError, setDebugError] = useState(null);
  const [nodeDataJson, setNodeDataJson] = useState("{}");
  const [formKey, setFormKey] = useState(0);

  // 从配置加载器获取节点类型对应的配置
  const nodeSchema = NodeConfigLoader.getNodeSchema(selectedNode.type);
  const nodeUiSchema = NodeConfigLoader.getNodeUiSchema(selectedNode.type);
  const panelConfig = NodeConfigLoader.getPanelConfig(selectedNode.type);

  // 获取节点连接状态
  const connections = getNodeConnections(selectedNode.id, allEdges || []);

  // 处理删除分支边的回调
  const handleDeleteBranchEdge = (nodeId, sourceHandle) => {
    if (onDeleteEdge) {
      onDeleteEdge(nodeId, sourceHandle);
    }
  };

  // 如果没有找到配置，显示错误信息
  if (!nodeSchema || !nodeUiSchema || !panelConfig) {
    return <ErrorPanel nodeType={selectedNode.type} />;
  }

  // 准备表单数据
  const baseFormData = selectedNode.data.config || {};
  const formData = {
    ...baseFormData,
    nodeType: selectedNode.type,
    nodeId: selectedNode.id,
  };

  // 更新节点JSON数据
  useEffect(() => {
    try {
      // 创建节点数据的JSON表示，排除内部实现细节
      const nodeDataForJson = {
        id: selectedNode.id,
        type: selectedNode.type,
        label: selectedNode.data.label,
        config: { ...selectedNode.data.config },
      };

      // 删除不需要在JSON中显示的内部属性
      if (nodeDataForJson.config) {
        delete nodeDataForJson.config.nodeJsonData;
        delete nodeDataForJson.config.debugResult;
      }

      // 格式化JSON字符串
      const jsonStr = JSON.stringify(nodeDataForJson, null, 2);
      setNodeDataJson(jsonStr);

      // 更新节点属性中的nodeJsonData字段
      if (formData.nodeJsonData !== jsonStr) {
        updateNodeProperties(selectedNode.id, {
          config: {
            ...selectedNode.data.config,
            nodeJsonData: jsonStr,
          },
        });
      }
    } catch (error) {
      console.error("创建节点JSON数据时出错:", error);
    }
  }, [selectedNode, updateNodeProperties]);

  // 当内容类型变化时重新渲染表单
  useEffect(() => {
    if (
      selectedNode.type === "HTTP" &&
      selectedNode.data?.config?.contentType
    ) {
      setFormKey((prev) => prev + 1);
    }
  }, [selectedNode.id, selectedNode.data?.config?.contentType]);

  // 从schema中提取特定标签页需要的属性
  const createPanelSchema = (schema, fieldList, tabId) => {
    if (!schema || !schema.properties) {
      return { type: "object", properties: {} };
    }

    const filteredProperties = {};

    // 特殊处理文档标签页
    if (tabId === "docs") {
      filteredProperties.documentation = {
        type: "string",
        title: "文档",
        default: "",
      };
      return {
        type: "object",
        properties: filteredProperties,
      };
    }

    // 添加标签页中指定的字段
    fieldList.forEach((field) => {
      if (schema.properties[field]) {
        filteredProperties[field] = schema.properties[field];
      }
    });

    // 处理dependencies
    const dependencies = {};
    if (schema.dependencies) {
      Object.keys(schema.dependencies).forEach((key) => {
        if (fieldList.includes(key)) {
          dependencies[key] = schema.dependencies[key];
        }
      });
    }

    return {
      ...schema,
      properties: filteredProperties,
      required: (schema.required || []).filter((prop) =>
        fieldList.includes(prop)
      ),
      dependencies:
        Object.keys(dependencies).length > 0 ? dependencies : undefined,
    };
  };

  // 从uiSchema中提取特定标签页需要的配置
  const createPanelUiSchema = (uiSchema, fieldList, tabId, nodeType) => {
    if (!uiSchema) return {};

    // 特殊处理文档标签页
    if (tabId === "docs") {
      // 获取节点文档路径
      const docPath = NodeConfigLoader.getNodeDocPath(nodeType);
      return {
        documentation: {
          "ui:field": "MarkdownDocField",
          "ui:options": {
            docPath,
          },
        },
        // 添加这一行来隐藏提交按钮
        "ui:submitButtonOptions": {
          norender: true,
        },
      };
    }

    const filteredUiSchema = {};

    // 复制全局UI配置
    Object.keys(uiSchema).forEach((key) => {
      if (key.startsWith("ui:")) {
        filteredUiSchema[key] = uiSchema[key];
      }
    });

    // 只复制指定字段的UI配置
    fieldList.forEach((field) => {
      if (uiSchema[field]) {
        filteredUiSchema[field] = uiSchema[field];
      }
    });

    // 处理contentType的特殊依赖
    if (
      fieldList.includes("contentType") &&
      uiSchema["ui:dependencies"]?.contentType
    ) {
      if (!filteredUiSchema["ui:dependencies"]) {
        filteredUiSchema["ui:dependencies"] = {};
      }
      filteredUiSchema["ui:dependencies"].contentType =
        uiSchema["ui:dependencies"].contentType;
    }

    return filteredUiSchema;
  };

  // 处理表单变更
  const handleChange = ({ formData: newFormData }, panelName) => {
    // 从表单数据中移除不需要存储的字段
    const { nodeJsonData, ...configData } = newFormData;

    // 特殊处理HTTP节点的form-data和x-www-form-urlencoded请求体
    if (selectedNode.type === "HTTP") {
      if (
        configData.contentType === "form-data" ||
        configData.contentType === "x-www-form-urlencoded"
      ) {
        // 确保body是对象类型
        if (
          typeof configData.body === "string" &&
          configData.body.trim() !== ""
        ) {
          try {
            // 尝试将字符串解析为对象
            configData.body = JSON.parse(configData.body);
          } catch (e) {
            console.warn("无法解析body字符串为对象:", configData.body);
            // 如果无法解析，使用空对象
            configData.body = {};
          }
        } else if (!configData.body || typeof configData.body !== "object") {
          configData.body = {};
        }
      }

      // 检查内容类型是否变更
      const contentTypeChanged =
        selectedNode.data.config?.contentType !== configData.contentType;
      if (contentTypeChanged) {
        // 内容类型变更，在下一个执行周期重新渲染表单
        setTimeout(() => setFormKey((prev) => prev + 1), 0);
      }
    }

    // 合并当前节点的配置与新的表单数据
    const currentConfig = selectedNode.data.config || {};
    const updatedConfig = { ...currentConfig, ...configData };

    updateNodeProperties(selectedNode.id, {
      config: updatedConfig,
    });
  };

  // 处理调试按钮点击
  const handleDebug = async (formData) => {
    // 设置正在加载的动作
    setLoadingActions((prev) => ({ ...prev, debug: true }));
    setDebugError(null);

    try {
      // 模拟调试API调用
      const debugParams = formData.debugParams || "{}";
      let parsedParams;

      try {
        parsedParams = JSON.parse(debugParams);
      } catch (e) {
        throw new Error("调试参数必须是有效的JSON格式");
      }

      // 这里实际项目中应该是一个API调用
      // 模拟API调用延迟
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // 根据节点类型生成不同的模拟调试结果
      let debugResult;

      switch (selectedNode.type) {
        case "HTTP":
          debugResult = {
            success: true,
            data: {
              statusCode: 200,
              headers: {
                "content-type": "application/json",
              },
              body: {
                message: "操作成功",
                data: parsedParams,
              },
              executionTime: 120,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SQL":
          debugResult = {
            success: true,
            data: {
              results: [
                { id: 1, name: "示例数据1" },
                { id: 2, name: "示例数据2" },
              ],
              affectedRows: 2,
              executionTime: 85,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "REDIS":
          debugResult = {
            success: true,
            data: {
              result: formData.operation === "GET" ? "缓存数据示例" : "OK",
              executionTime: 15,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SWITCH":
          debugResult = {
            success: true,
            data: {
              evaluatedExpression: formData.expression,
              result: "条件分支1",
              selectedPath: "分支1",
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SCRIPT":
          debugResult = {
            success: true,
            data: {
              result: { processedData: "脚本执行结果" },
              executionTime: 45,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SET_VARIABLE":
          debugResult = {
            success: true,
            data: {
              variables: formData.variables || {},
              context: "变量设置完成",
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "START":
          debugResult = {
            success: true,
            data: {
              flowStarted: true,
              initialPayload: parsedParams,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
              sessionId: "debug-" + Math.random().toString(36).substring(2, 11),
            },
          };
          break;

        default:
          debugResult = {
            success: true,
            data: {
              result: "节点执行完成",
              params: parsedParams,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
      }

      // 更新节点属性，写入调试结果
      const { nodeJsonData, ...configData } = formData;

      // 合并当前节点的配置与调试结果
      const currentConfig = selectedNode.data.config || {};
      const updatedConfig = {
        ...currentConfig,
        ...configData,
        debugResult: JSON.stringify(debugResult, null, 2),
      };

      updateNodeProperties(selectedNode.id, {
        config: updatedConfig,
      });
    } catch (error) {
      setDebugError(error.message || "调试过程中发生错误");

      // 更新节点属性，写入错误信息
      const { nodeJsonData, ...configData } = formData;

      // 合并当前节点的配置与错误信息
      const currentConfig = selectedNode.data.config || {};
      const updatedConfig = {
        ...currentConfig,
        ...configData,
        debugResult: JSON.stringify(
          {
            success: false,
            error: error.message || "调试过程中发生错误",
          },
          null,
          2
        ),
      };

      updateNodeProperties(selectedNode.id, {
        config: updatedConfig,
      });
    } finally {
      // 清除加载状态
      setLoadingActions((prev) => ({ ...prev, debug: false }));
    }
  };

  // 构建动作处理函数集合
  const actions = {
    debug: handleDebug,
    export: () => console.log("导出操作"),
    test: () => console.log("测试操作"),
  };

  // 处理Tab切换
  const handleTabChange = (e, { activeIndex }) => {
    setActiveTabIndex(activeIndex);
  };

  // 根据面板配置创建标签页
  const panes = panelConfig.tabs.map((tab) => {
    // 对于异常处理标签页，使用自定义组件
    if (tab.id === "error") {
      return {
        menuItem: tab.title,
        render: () => (
          <Tab.Pane attached={false}>
            <ErrorHandlingTab
              selectedNode={selectedNode}
              updateNodeProperties={updateNodeProperties}
            />
          </Tab.Pane>
        ),
      };
    }

    // 创建该标签页的schema和uiSchema
    const tabSchema = createPanelSchema(nodeSchema, tab.fields, tab.id);
    const tabUiSchema = createPanelUiSchema(
      nodeUiSchema,
      tab.fields,
      tab.id,
      selectedNode.type
    );

    // 使用tab.id和formKey生成唯一的表单key
    const tabFormKey = `${selectedNode.type}-${tab.id}-${formKey}`;

    return {
      menuItem: tab.title,
      render: () => (
        <Tab.Pane attached={false}>
          {tab.id === "debug" && debugError && (
            <Message negative>
              <Message.Header>调试错误</Message.Header>
              <p>{debugError}</p>
            </Message>
          )}
          <Form
            key={tabFormKey}
            schema={tabSchema}
            uiSchema={tabUiSchema}
            formData={formData}
            validator={validator}
            onChange={(formData) => handleChange(formData, tab.id)}
            liveValidate={true}
            showErrorList={false}
            widgets={customWidgets}
            fields={customFields}
            formContext={{
              actions,
              loadingActions,
              language: formData.language,
              contentType: formData.contentType,
              nodeType: selectedNode.type,
              connections: connections, // 添加连接信息
              onDeleteBranchEdge: handleDeleteBranchEdge, // 添加删除边的回调
              nodeId: selectedNode.id, // 传递节点ID
            }}
          />
        </Tab.Pane>
      ),
    };
  });

  return (
    <div className="tab-properties-panel">
      <Tab
        panes={panes}
        activeIndex={activeTabIndex}
        onTabChange={handleTabChange}
        menu={{ secondary: true, pointing: true }}
      />
    </div>
  );
};

// 获取节点类型显示名称
const getNodeTypeDisplayName = (type) => {
  switch (type) {
    case "START":
      return "开始节点";
    case "END":
      return "结束节点";
    case "HTTP":
      return "HTTP节点";
    case "SQL":
      return "SQL节点";
    case "REDIS":
      return "Redis节点";
    case "SCRIPT":
      return "脚本节点";
    case "SWITCH":
      return "分支节点";
    case "LOOP":
      return "循环节点";
    case "SET_VARIABLE":
      return "变量节点";
    default:
      return `${type}节点`;
  }
};

/**
 * 主面板组件 - 根据节点类型选择不同的面板组件
 */
const TabPropertiesPanel = ({
  selectedNode,
  updateNodeProperties,
  nodes,
  edges,
  onDeleteEdge,
}) => {
  // 没有选中节点的情况
  if (!selectedNode) {
    return <EmptyPanel />;
  }

  // 循环节点使用特殊的面板
  if (selectedNode.type === "LOOP") {
    return (
      <LoopNodePanel
        node={selectedNode}
        updateNode={updateNodeProperties}
        nodes={nodes}
      />
    );
  }

  // 其他节点类型使用标准面板
  return (
    <StandardNodePanel
      selectedNode={selectedNode}
      updateNodeProperties={updateNodeProperties}
      allNodes={nodes}
      allEdges={edges}
      onDeleteEdge={onDeleteEdge}
    />
  );
};

export default TabPropertiesPanel;



================================================================================
# 文件: src/PropertiesPanel.js
# 行数: 395
================================================================================

// 修复 PropertiesPanel.js 确保HTTP节点的form-data和x-www-form-urlencoded使用KVTableField

import React, { useMemo, useState, useEffect } from "react";
import { Form } from "@rjsf/semantic-ui"; // 使用 Semantic UI 主题
import validator from "@rjsf/validator-ajv8";
import { Message } from "semantic-ui-react";

// 导入节点配置、自定义字段和小部件
import {
  nodeSchemaConfigs,
  customFields,
  customWidgets,
} from "./components/fields/schemaLoader";
import LoopProperties from "./components/LoopProperties";

const PropertiesPanel = ({ selectedNode, updateNodeProperties, nodes }) => {
  const [loadingActions, setLoadingActions] = useState({});
  const [debugError, setDebugError] = useState(null);
  const [formKey, setFormKey] = useState(0); // 添加key强制表单重新渲染

  // 添加调试日志以诊断问题
  console.log("PropertiesPanel渲染:", {
    selectedNode: selectedNode?.type,
    contentType: selectedNode?.data?.config?.contentType,
    hasFields: !!customFields,
    KVTableField: !!customFields.KVTableField,
    body: selectedNode?.data?.config?.body,
  });

  // 当selectedNode或contentType改变时,强制表单重新渲染
  useEffect(() => {
    if (selectedNode?.type === "HTTP") {
      setFormKey((prev) => prev + 1);
      console.log(
        "HTTP节点contentType改变:",
        selectedNode?.data?.config?.contentType
      );
    }
  }, [selectedNode?.id, selectedNode?.data?.config?.contentType]);

  if (!selectedNode) {
    return (
      <div className="properties-panel">
        <h3>节点属性</h3>
        <div id="properties-content">
          <p>请选择一个节点进行编辑</p>
        </div>
      </div>
    );
  }

  // 检查是否为子节点，获取父节点信息用于显示
  const isChildNode = Boolean(selectedNode.parentNode);
  let parentNode = null;

  if (isChildNode) {
    parentNode = nodes.find((n) => n.id === selectedNode.parentNode);
  }

  // 对于循环节点使用特殊的属性面板组件
  if (selectedNode.type === "LOOP") {
    return (
      <div>
        <LoopProperties
          node={selectedNode}
          updateNode={updateNodeProperties}
          nodes={nodes}
        />
      </div>
    );
  }

  // 获取节点类型对应的schema
  const nodeConfig = nodeSchemaConfigs[selectedNode.type] || {
    schema: {},
    uiSchema: {},
  };
  const { schema, uiSchema } = nodeConfig;

  // 记录uiSchema以检查按钮配置
  console.log(`${selectedNode.type}节点的uiSchema:`, uiSchema);

  // 特殊处理: 记录HTTP节点contentType相关的uiSchema配置
  if (selectedNode.type === "HTTP") {
    console.log(
      "HTTP节点ui:dependencies配置:",
      uiSchema["ui:dependencies"]?.contentType
    );
    const contentType = selectedNode.data.config?.contentType;
    if (contentType) {
      console.log(
        `当前contentType(${contentType})的body配置:`,
        uiSchema["ui:dependencies"]?.contentType?.[contentType]?.body
      );
    }
  }

  // 准备表单数据，包括节点类型和ID
  const formData = useMemo(() => {
    // 从节点获取配置数据
    const baseFormData = selectedNode.data.config || {};

    // 添加节点类型和ID
    return {
      ...baseFormData,
      nodeType: selectedNode.type,
      nodeId: selectedNode.id,
    };
  }, [selectedNode.data.config, selectedNode.type, selectedNode.id]);

  // 记录表单数据以检查请求体内容
  console.log(`${selectedNode.type}节点的formData:`, formData);
  if (selectedNode.type === "HTTP" && formData.contentType) {
    console.log(`HTTP节点body数据(${formData.contentType}):`, formData.body);
  }

  // 处理表单变更
  const handleChange = ({ formData: newFormData }) => {
    console.log("表单变更:", newFormData);

    // 从表单数据中移除 nodeType 和 nodeId，因为这些不应该被存储在实际配置中
    const { nodeType, nodeId, ...configData } = newFormData;

    // 检查contentType是否改变
    const contentTypeChanged =
      selectedNode.type === "HTTP" &&
      selectedNode.data.config?.contentType !== configData.contentType;

    // 特殊处理form-data和x-www-form-urlencoded
    if (selectedNode.type === "HTTP") {
      if (
        configData.contentType === "form-data" ||
        configData.contentType === "x-www-form-urlencoded"
      ) {
        // 确保body是对象类型
        if (typeof configData.body === "string") {
          try {
            // 尝试将字符串解析为对象
            configData.body = JSON.parse(configData.body);
          } catch (e) {
            // 如果解析失败，初始化为空对象
            configData.body = {};
          }
        } else if (!configData.body) {
          configData.body = {};
        }
        console.log(`转换后的${configData.contentType} body:`, configData.body);
      }
    }

    updateNodeProperties(selectedNode.id, {
      config: configData,
    });

    // 如果contentType改变，强制表单重新渲染
    if (contentTypeChanged) {
      setFormKey((prev) => prev + 1);
    }
  };

  // 处理调试按钮点击
  const handleDebug = async (formData) => {
    console.log("调试按钮被点击，formData:", formData);

    if (!formData.debug) {
      console.log("调试未启用，返回");
      return;
    }

    // 设置正在加载的动作
    setLoadingActions((prev) => ({ ...prev, debug: true }));
    setDebugError(null);

    try {
      // 模拟调试API调用
      const debugParams = formData.debugParams || "{}";
      let parsedParams;

      try {
        parsedParams = JSON.parse(debugParams);
      } catch (e) {
        throw new Error("调试参数必须是有效的JSON格式");
      }

      // 这里实际项目中应该是一个API调用
      // 模拟API调用延迟
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // 根据节点类型生成不同的模拟调试结果
      let debugResult;

      switch (selectedNode.type) {
        case "HTTP":
          debugResult = {
            success: true,
            data: {
              statusCode: 200,
              headers: {
                "content-type": "application/json",
              },
              body: {
                message: "操作成功",
                data: parsedParams,
              },
              executionTime: 120,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SQL":
          debugResult = {
            success: true,
            data: {
              results: [
                { id: 1, name: "示例数据1" },
                { id: 2, name: "示例数据2" },
              ],
              affectedRows: 2,
              executionTime: 85,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "REDIS":
          debugResult = {
            success: true,
            data: {
              result: formData.operation === "GET" ? "缓存数据示例" : "OK",
              executionTime: 15,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SWITCH":
          debugResult = {
            success: true,
            data: {
              evaluatedExpression: formData.expression,
              result: "条件分支1",
              selectedPath: "分支1",
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SCRIPT":
          debugResult = {
            success: true,
            data: {
              result: { processedData: "脚本执行结果" },
              executionTime: 45,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "SET_VARIABLE":
          debugResult = {
            success: true,
            data: {
              variables: formData.variables || {},
              context: "变量设置完成",
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
          break;

        case "START":
          debugResult = {
            success: true,
            data: {
              flowStarted: true,
              initialPayload: parsedParams,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
              sessionId: "debug-" + Math.random().toString(36).substring(2, 11),
            },
          };
          break;

        default:
          debugResult = {
            success: true,
            data: {
              result: "节点执行完成",
              params: parsedParams,
              timestamp: new Date().toISOString(),
              nodeId: selectedNode.id,
            },
          };
      }

      console.log("生成的调试结果:", debugResult);

      // 更新节点属性，写入调试结果
      const { nodeType, nodeId, ...configData } = formData;
      updateNodeProperties(selectedNode.id, {
        config: {
          ...configData,
          debugResult: JSON.stringify(debugResult, null, 2),
        },
      });
    } catch (error) {
      setDebugError(error.message || "调试过程中发生错误");

      // 更新节点属性，写入错误信息
      const { nodeType, nodeId, ...configData } = formData;
      updateNodeProperties(selectedNode.id, {
        config: {
          ...configData,
          debugResult: JSON.stringify(
            {
              success: false,
              error: error.message || "调试过程中发生错误",
            },
            null,
            2
          ),
        },
      });
    } finally {
      // 清除加载状态
      setLoadingActions((prev) => ({ ...prev, debug: false }));
    }
  };

  // 预留其他可能的按钮动作处理函数
  const handleExport = (formData) => {
    console.log("导出操作", formData);
    // 实现导出功能...
  };

  const handleTest = (formData) => {
    console.log("测试操作", formData);
    // 实现测试功能...
  };

  // 构建动作处理函数集合
  const actions = {
    debug: handleDebug,
    export: handleExport,
    test: handleTest,
  };

  // 添加日志以跟踪表单渲染和动作传递
  console.log("表单将被渲染，动作:", Object.keys(actions));
  console.log("可用字段组件:", Object.keys(customFields));

  return (
    <div>
      {debugError && (
        <Message negative>
          <Message.Header>调试错误</Message.Header>
          <p>{debugError}</p>
        </Message>
      )}

      {/* 使用key来强制表单在contentType改变时重新渲染 */}
      <Form
        key={formKey}
        schema={schema}
        uiSchema={uiSchema}
        formData={formData}
        validator={validator}
        onChange={handleChange}
        liveValidate={true}
        showErrorList={false}
        widgets={customWidgets}
        fields={customFields}
        // 提供表单上下文，让自定义字段可以访问动作和状态
        formContext={{
          actions,
          loadingActions,
          // 添加更多上下文数据帮助调试
          contentType: formData.contentType,
          nodeType: selectedNode.type,
        }}
        // 这里添加一个ID也有助于调试
        id={`${selectedNode.type}-form-${selectedNode.id}`}
      />
    </div>
  );
};

export default PropertiesPanel;



================================================================================
# 文件: src/FlowListPage.js
# 行数: 954
================================================================================

import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import {
  Layout,
  Table,
  Button,
  Input,
  Modal,
  message,
  Select,
  Pagination,
  Spin,
  Card,
  Tag,
  Space,
  Typography,
  Tooltip,
  Badge,
  Drawer,
  Form,
  Row,
  Col,
  Statistic,
  Avatar,
  Divider,
  Empty,
  Dropdown,
  Menu,
} from "antd";
import {
  PlusOutlined,
  SearchOutlined,
  EditOutlined,
  CopyOutlined,
  DeleteOutlined,
  DownloadOutlined,
  PlayCircleOutlined,
  ReloadOutlined,
  SettingOutlined,
  EyeOutlined,
  MoreOutlined,
  FilterOutlined,
  BranchesOutlined,
  ClockCircleOutlined,
  UserOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
} from "@ant-design/icons";
import "antd/dist/reset.css";

const { Header, Content, Sider } = Layout;
const { Title, Text, Paragraph } = Typography;
const { Option } = Select;
const { TextArea } = Input;

// 自定义图标组件保持原有的SVG图标
const CustomIcons = {
  Workflow: () => (
    <svg
      viewBox="0 0 1024 1024"
      width="16"
      height="16"
      style={{ fill: "currentColor" }}
    >
      <path d="M480 384h320a96.11 96.11 0 0 0 96-96V160a96.11 96.11 0 0 0-96-96H480a96.11 96.11 0 0 0-96 96v32H224a96.11 96.11 0 0 0-96 96v160a96.11 96.11 0 0 0 96 96h576a32 32 0 0 1 32 32v160a32 32 0 0 1-32 32H640v-32a96.11 96.11 0 0 0-96-96H224a96.11 96.11 0 0 0-96 96v128a96.11 96.11 0 0 0 96 96h320a96.11 96.11 0 0 0 96-96v-32h160a96.11 96.11 0 0 0 96-96V576a96.11 96.11 0 0 0-96-96H224a32 32 0 0 1-32-32V288a32 32 0 0 1 32-32h160v32a96.11 96.11 0 0 0 96 96z m96 480a32 32 0 0 1-32 32H224a32 32 0 0 1-32-32V736a32 32 0 0 1 32-32h320a32 32 0 0 1 32 32zM448 160a32 32 0 0 1 32-32h320a32 32 0 0 1 32 32v128a32 32 0 0 1-32 32H480a32 32 0 0 1-32-32z" />
    </svg>
  ),
};

const FlowListPage = () => {
  // State management
  const [flows, setFlows] = useState([]);
  const [filteredFlows, setFilteredFlows] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [sortField, setSortField] = useState("updatedAt");
  const [sortOrder, setSortOrder] = useState("descend");
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);
  const [confirmDelete, setConfirmDelete] = useState(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showDetailDrawer, setShowDetailDrawer] = useState(false);
  const [selectedFlow, setSelectedFlow] = useState(null);
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10, // 改为5条便于测试分页
    total: 0,
  });
  const [createForm] = Form.useForm();

  // Mock data loading with more detailed data
  useEffect(() => {
    setTimeout(() => {
      const mockFlows = Array.from({ length: 100 }, (_, i) => ({
        key: `flow-${i + 1}`,
        id: `flow-${i + 1}`,
        name: `业务流程 ${i + 1}`,
        description:
          i % 3 === 0
            ? `这是业务流程 ${i + 1} 的详细描述，用于处理复杂业务逻辑和数据流转`
            : "",
        createdAt: new Date(
          Date.now() - Math.random() * 10000000000
        ).toISOString(),
        updatedAt: new Date(
          Date.now() - Math.random() * 1000000000
        ).toISOString(),
        nodeCount: Math.floor(Math.random() * 20) + 3,
        status: Math.random() > 0.2 ? "active" : "draft",
        tags: [
          `标签${Math.floor(Math.random() * 5) + 1}`,
          Math.random() > 0.5
            ? `类型${Math.floor(Math.random() * 3) + 1}`
            : null,
        ].filter(Boolean),
        version: `v${Math.floor(Math.random() * 10) + 1}.${Math.floor(
          Math.random() * 10
        )}`,
        lastRunTime:
          Math.random() > 0.3
            ? new Date(Date.now() - Math.random() * 86400000).toISOString()
            : null,
        isRunning: Math.random() > 0.8,
        creator: `用户${Math.floor(Math.random() * 10) + 1}`,
        executionCount: Math.floor(Math.random() * 1000),
        successRate: Math.floor(Math.random() * 30) + 70,
        avgExecutionTime: Math.floor(Math.random() * 5000) + 1000,
      }));

      setFlows(mockFlows);
      setFilteredFlows(mockFlows);
      setPagination((prev) => ({ ...prev, total: mockFlows.length }));
      setLoading(false);
    }, 1000);
  }, []);

  // Enhanced filter and sort
  useEffect(() => {
    let result = [...flows];

    // Apply search filter
    if (searchQuery) {
      result = result.filter(
        (flow) =>
          flow.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          (flow.description &&
            flow.description
              .toLowerCase()
              .includes(searchQuery.toLowerCase())) ||
          flow.tags.some((tag) =>
            tag.toLowerCase().includes(searchQuery.toLowerCase())
          ) ||
          flow.creator.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // Apply status filter
    if (statusFilter !== "all") {
      result = result.filter((flow) => flow.status === statusFilter);
    }

    setFilteredFlows(result);
    setPagination((prev) => ({ ...prev, total: result.length, current: 1 }));
  }, [flows, searchQuery, statusFilter]);

  // Handle search
  const handleSearch = (value) => {
    setSearchQuery(value);
  };

  // Handle table change (sorting, pagination)
  const handleTableChange = (paginationConfig, filters, sorter) => {
    console.log("Table changed:", { paginationConfig, filters, sorter });

    // 更新分页状态
    setPagination({
      current: paginationConfig.current,
      pageSize: paginationConfig.pageSize,
      total: paginationConfig.total,
    });

    if (sorter.field) {
      setSortField(sorter.field);
      setSortOrder(sorter.order);
    }
  };

  // Handle selection
  const handleSelectionChange = (selectedKeys) => {
    setSelectedRowKeys(selectedKeys);
  };

  // Create new flow
  const handleCreateFlow = async (values) => {
    try {
      const newFlow = {
        key: `flow-${flows.length + 1}`,
        id: `flow-${flows.length + 1}`,
        name: values.name,
        description: values.description || "",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        nodeCount: 0,
        status: "draft",
        tags: values.tags || [],
        version: "v1.0",
        lastRunTime: null,
        isRunning: false,
        creator: "当前用户",
        executionCount: 0,
        successRate: 100,
        avgExecutionTime: 0,
      };

      setFlows((prevFlows) => [newFlow, ...prevFlows]);
      setShowCreateModal(false);
      createForm.resetFields();
      message.success("流程创建成功！");
    } catch (error) {
      message.error("创建失败，请重试");
    }
  };

  // Delete flow
  const handleDelete = (flow) => {
    Modal.confirm({
      title: "确认删除",
      icon: <ExclamationCircleOutlined />,
      content: (
        <div>
          <p>
            您确定要删除工作流 <strong>"{flow.name}"</strong> 吗？
          </p>
          <p style={{ color: "#ff4d4f", fontSize: "12px" }}>
            此操作无法撤销，相关的运行历史也将被清除。
          </p>
        </div>
      ),
      okText: "删除",
      okType: "danger",
      cancelText: "取消",
      onOk() {
        setFlows((prevFlows) => prevFlows.filter((f) => f.id !== flow.id));
        setSelectedRowKeys(selectedRowKeys.filter((key) => key !== flow.key));
        message.success("流程已删除");
      },
    });
  };

  // Batch delete
  const handleBatchDelete = () => {
    Modal.confirm({
      title: "批量删除",
      icon: <ExclamationCircleOutlined />,
      content: `确定要删除选中的 ${selectedRowKeys.length} 个工作流吗？`,
      okText: "删除",
      okType: "danger",
      cancelText: "取消",
      onOk() {
        setFlows((prevFlows) =>
          prevFlows.filter((flow) => !selectedRowKeys.includes(flow.key))
        );
        setSelectedRowKeys([]);
        message.success(`已删除 ${selectedRowKeys.length} 个工作流`);
      },
    });
  };

  // Duplicate flow
  const handleDuplicate = (flow) => {
    const newFlow = {
      ...flow,
      key: `flow-${flows.length + 1}`,
      id: `flow-${flows.length + 1}`,
      name: `${flow.name} (副本)`,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      isRunning: false,
      executionCount: 0,
    };

    setFlows((prevFlows) => [newFlow, ...prevFlows]);
    message.success("流程已复制");
  };

  // Run flow
  const handleRun = (flow) => {
    setFlows((prevFlows) =>
      prevFlows.map((f) =>
        f.id === flow.id
          ? {
              ...f,
              isRunning: true,
              lastRunTime: new Date().toISOString(),
              status: "active",
              executionCount: f.executionCount + 1,
            }
          : f
      )
    );

    message.success("流程开始运行");

    // Simulate flow completion
    setTimeout(() => {
      setFlows((prevFlows) =>
        prevFlows.map((f) =>
          f.id === flow.id ? { ...f, isRunning: false } : f
        )
      );
      message.info("流程运行完成");
    }, 3000);
  };

  // View flow details
  const handleViewDetails = (flow) => {
    setSelectedFlow(flow);
    setShowDetailDrawer(true);
  };

  // Refresh
  const handleRefresh = () => {
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      message.success("列表已刷新");
    }, 500);
  };

  // Format date
  const formatDate = (dateString) => {
    if (!dateString) return "-";
    return new Date(dateString).toLocaleString("zh-CN", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  // Format duration
  const formatDuration = (ms) => {
    if (ms < 1000) return `${ms}ms`;
    if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;
    return `${(ms / 60000).toFixed(1)}m`;
  };

  // Get status color
  const getStatusColor = (status) => {
    switch (status) {
      case "active":
        return "success";
      case "draft":
        return "default";
      default:
        return "default";
    }
  };

  // Action menu for each row
  const getActionMenu = (record) => (
    <Menu>
      <Menu.Item
        key="run"
        icon={<PlayCircleOutlined />}
        onClick={() => handleRun(record)}
      >
        运行
      </Menu.Item>
      <Menu.Item
        key="view"
        icon={<EyeOutlined />}
        onClick={() => handleViewDetails(record)}
      >
        查看详情
      </Menu.Item>
      <Menu.Divider />
      <Menu.Item
        key="duplicate"
        icon={<CopyOutlined />}
        onClick={() => handleDuplicate(record)}
      >
        复制
      </Menu.Item>
      <Menu.Item key="export" icon={<DownloadOutlined />}>
        导出
      </Menu.Item>
      <Menu.Divider />
      <Menu.Item
        key="delete"
        icon={<DeleteOutlined />}
        danger
        onClick={() => handleDelete(record)}
      >
        删除
      </Menu.Item>
    </Menu>
  );

  // Table columns
  const columns = [
    {
      title: "工作流信息",
      dataIndex: "name",
      key: "name",
      width: 300,
      sorter: true,
      render: (text, record) => (
        <div>
          <div
            style={{ display: "flex", alignItems: "center", marginBottom: 4 }}
          >
            <CustomIcons.Workflow
              style={{ marginRight: 8, color: "#1890ff" }}
            />
            <Text strong style={{ fontSize: 14 }}>
              {text}
            </Text>
            {record.isRunning && (
              <Badge status="processing" style={{ marginLeft: 8 }} />
            )}
          </div>
          {record.description && (
            <Paragraph
              style={{
                margin: 0,
                fontSize: 12,
                color: "#666",
                maxWidth: 250,
              }}
              ellipsis={{ rows: 2, tooltip: record.description }}
            >
              {record.description}
            </Paragraph>
          )}
          <div style={{ marginTop: 4 }}>
            {record.tags.map((tag) => (
              <Tag key={tag} size="small" style={{ marginRight: 4 }}>
                {tag}
              </Tag>
            ))}
          </div>
        </div>
      ),
    },
    {
      title: "状态",
      dataIndex: "status",
      key: "status",
      width: 100,
      filters: [
        { text: "已激活", value: "active" },
        { text: "草稿", value: "draft" },
      ],
      render: (status, record) => (
        <div>
          <Tag color={getStatusColor(status)}>
            {status === "active" ? "已激活" : "草稿"}
          </Tag>
          {record.isRunning && (
            <Tag color="blue" icon={<ClockCircleOutlined />}>
              运行中
            </Tag>
          )}
        </div>
      ),
    },
    {
      title: "版本",
      dataIndex: "version",
      key: "version",
      width: 80,
      render: (version) => <Tag color="geekblue">{version}</Tag>,
    },
    {
      title: "节点数",
      dataIndex: "nodeCount",
      key: "nodeCount",
      width: 80,
      sorter: true,
      align: "center",
      render: (count) => (
        <Badge count={count} style={{ backgroundColor: "#52c41a" }} />
      ),
    },
    {
      title: "执行统计",
      key: "execution",
      width: 120,
      render: (_, record) => (
        <div style={{ fontSize: 12 }}>
          <div>执行 {record.executionCount} 次</div>
          <div
            style={{ color: record.successRate >= 90 ? "#52c41a" : "#faad14" }}
          >
            成功率 {record.successRate}%
          </div>
          <div style={{ color: "#666" }}>
            平均 {formatDuration(record.avgExecutionTime)}
          </div>
        </div>
      ),
    },
    {
      title: "创建者",
      dataIndex: "creator",
      key: "creator",
      width: 100,
      render: (creator) => (
        <div style={{ display: "flex", alignItems: "center" }}>
          <Avatar
            size="small"
            icon={<UserOutlined />}
            style={{ marginRight: 6 }}
          />
          <Text style={{ fontSize: 12 }}>{creator}</Text>
        </div>
      ),
    },
    {
      title: "最后运行",
      dataIndex: "lastRunTime",
      key: "lastRunTime",
      width: 140,
      sorter: true,
      render: (time) => (
        <Text style={{ fontSize: 12 }}>
          {time ? formatDate(time) : "从未运行"}
        </Text>
      ),
    },
    {
      title: "更新时间",
      dataIndex: "updatedAt",
      key: "updatedAt",
      width: 140,
      sorter: true,
      defaultSortOrder: "descend",
      render: (time) => (
        <Text style={{ fontSize: 12 }}>{formatDate(time)}</Text>
      ),
    },
    {
      title: "操作",
      key: "action",
      width: 200,
      fixed: "right",
      render: (_, record) => (
        <Space>
          <Tooltip title="运行">
            <Button
              type="primary"
              icon={<PlayCircleOutlined />}
              size="small"
              loading={record.isRunning}
              onClick={() => handleRun(record)}
            />
          </Tooltip>
          <Tooltip title="编辑">
            <Link to="/editor">
              <Button icon={<EditOutlined />} size="small" />
            </Link>
          </Tooltip>
          <Tooltip title="查看详情">
            <Button
              icon={<EyeOutlined />}
              size="small"
              onClick={() => handleViewDetails(record)}
            />
          </Tooltip>
          <Dropdown overlay={getActionMenu(record)} trigger={["click"]}>
            <Button icon={<MoreOutlined />} size="small" />
          </Dropdown>
        </Space>
      ),
    },
  ];

  // Get statistics
  const getStatistics = () => {
    const activeCount = flows.filter((f) => f.status === "active").length;
    const draftCount = flows.filter((f) => f.status === "draft").length;
    const runningCount = flows.filter((f) => f.isRunning).length;
    const totalExecutions = flows.reduce((sum, f) => sum + f.executionCount, 0);

    return { activeCount, draftCount, runningCount, totalExecutions };
  };

  const statistics = getStatistics();

  return (
    <Layout style={{ minHeight: "100vh", height: "100vh", overflow: "hidden" }}>
      {/* Sidebar */}
      <Sider
        width={240}
        theme="light"
        style={{ borderRight: "1px solid #f0f0f0" }}
      >
        <div
          style={{
            padding: "24px 16px",
            borderBottom: "1px solid #f0f0f0",
            textAlign: "center", // 居中对齐
          }}
        >
          <Title level={4} style={{ margin: 0, color: "#1890ff" }}>
            <CustomIcons.Workflow style={{ marginRight: 8 }} />
            工作流平台
          </Title>
        </div>
        <Menu
          mode="inline"
          defaultSelectedKeys={["workflows"]}
          style={{ border: 0 }}
        >
          <Menu.Item key="workflows" icon={<BranchesOutlined />}>
            工作流列表
          </Menu.Item>
        </Menu>
      </Sider>

      {/* Main Content */}
      <Layout>
        {/* Header */}
        <Header
          style={{
            background: "#fff",
            padding: "0 24px",
            borderBottom: "1px solid #f0f0f0",
          }}
        >
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
            }}
          >
            <Title level={3} style={{ margin: 0 }}>
              工作流管理
            </Title>
            <Space>
              <Button
                icon={<ReloadOutlined />}
                onClick={handleRefresh}
                loading={loading}
              >
                刷新
              </Button>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                onClick={() => setShowCreateModal(true)}
              >
                新建工作流
              </Button>
            </Space>
          </div>
        </Header>

        {/* Content */}
        <Content
          style={{
            margin: "24px",
            minHeight: 280,
            overflow: "auto",
            height: "calc(100vh - 64px - 48px)",
          }}
        >
          {/* Statistics Cards */}
          <Row gutter={16} style={{ marginBottom: 24 }}>
            <Col span={6}>
              <Card>
                <Statistic
                  title="总工作流"
                  value={flows.length}
                  prefix={<BranchesOutlined />}
                  valueStyle={{ color: "#1890ff" }}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card>
                <Statistic
                  title="已激活"
                  value={statistics.activeCount}
                  prefix={<CheckCircleOutlined />}
                  valueStyle={{ color: "#52c41a" }}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card>
                <Statistic
                  title="运行中"
                  value={statistics.runningCount}
                  prefix={<ClockCircleOutlined />}
                  valueStyle={{ color: "#faad14" }}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card>
                <Statistic
                  title="总执行次数"
                  value={statistics.totalExecutions}
                  prefix={<PlayCircleOutlined />}
                  valueStyle={{ color: "#722ed1" }}
                />
              </Card>
            </Col>
          </Row>

          {/* Main Table Card */}
          <Card
            title={
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <span>工作流列表</span>
                <Space>
                  <Input.Search
                    placeholder="搜索工作流名称、描述或标签..."
                    style={{ width: 300 }}
                    onSearch={handleSearch}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    allowClear
                  />
                  <Select
                    placeholder="状态筛选"
                    style={{ width: 120 }}
                    value={statusFilter}
                    onChange={setStatusFilter}
                  >
                    <Option value="all">全部状态</Option>
                    <Option value="active">已激活</Option>
                    <Option value="draft">草稿</Option>
                  </Select>
                  {selectedRowKeys.length > 0 && (
                    <Button danger onClick={handleBatchDelete}>
                      批量删除 ({selectedRowKeys.length})
                    </Button>
                  )}
                </Space>
              </div>
            }
            bodyStyle={{ padding: "16px 0 0 0" }} // 给分页留出空间
            style={{
              height: "calc(100vh - 280px)",
              display: "flex",
              flexDirection: "column",
            }}
          >
            <div style={{ flex: 1, overflow: "hidden" }}>
              <Table
                columns={columns}
                dataSource={filteredFlows.slice(
                  (pagination.current - 1) * pagination.pageSize,
                  pagination.current * pagination.pageSize
                )}
                loading={loading}
                pagination={{
                  current: pagination.current,
                  pageSize: pagination.pageSize,
                  total: filteredFlows.length,
                  showSizeChanger: true,
                  showQuickJumper: true,
                  showTotal: (total, range) =>
                    `第 ${range[0]}-${range[1]} 条，共 ${total} 条`,
                  pageSizeOptions: ["5", "10", "20", "50"],
                  onShowSizeChange: (current, size) => {
                    setPagination((prev) => ({
                      ...prev,
                      current: 1,
                      pageSize: size,
                    }));
                  },
                  onChange: (page, pageSize) => {
                    setPagination((prev) => ({
                      ...prev,
                      current: page,
                      pageSize,
                    }));
                  },
                  style: {
                    padding: "16px 24px",
                    borderTop: "1px solid #f0f0f0",
                  }, // 分页样式
                }}
                rowSelection={{
                  selectedRowKeys,
                  onChange: handleSelectionChange,
                }}
                onChange={handleTableChange}
                scroll={{ x: 1200, y: "calc(100vh - 500px)" }} // 设置表格滚动高度
                locale={{
                  emptyText: (
                    <Empty
                      image={Empty.PRESENTED_IMAGE_SIMPLE}
                      description="暂无工作流数据"
                    />
                  ),
                }}
              />
            </div>
          </Card>
        </Content>
      </Layout>

      {/* Create Flow Modal */}
      <Modal
        title={
          <span>
            <PlusOutlined style={{ marginRight: 8 }} />
            新建工作流
          </span>
        }
        open={showCreateModal}
        onCancel={() => {
          setShowCreateModal(false);
          createForm.resetFields();
        }}
        onOk={() => createForm.submit()}
        width={600}
      >
        <Form
          form={createForm}
          layout="vertical"
          onFinish={handleCreateFlow}
          style={{ marginTop: 16 }}
        >
          <Form.Item
            name="name"
            label="工作流名称"
            rules={[{ required: true, message: "请输入工作流名称" }]}
          >
            <Input placeholder="请输入工作流名称" />
          </Form.Item>
          <Form.Item name="description" label="工作流描述">
            <TextArea rows={3} placeholder="请输入工作流描述（可选）" />
          </Form.Item>
          <Form.Item name="tags" label="标签">
            <Select
              mode="tags"
              placeholder="添加标签"
              style={{ width: "100%" }}
            />
          </Form.Item>
        </Form>
      </Modal>

      {/* Detail Drawer */}
      <Drawer
        title="工作流详情"
        placement="right"
        width={600}
        open={showDetailDrawer}
        onClose={() => setShowDetailDrawer(false)}
      >
        {selectedFlow && (
          <div>
            <Card title="基本信息" style={{ marginBottom: 16 }}>
              <Row gutter={16}>
                <Col span={12}>
                  <Text strong>名称：</Text>
                  <div>{selectedFlow.name}</div>
                </Col>
                <Col span={12}>
                  <Text strong>版本：</Text>
                  <div>
                    <Tag color="geekblue">{selectedFlow.version}</Tag>
                  </div>
                </Col>
                <Col span={12}>
                  <Text strong>状态：</Text>
                  <div>
                    <Tag color={getStatusColor(selectedFlow.status)}>
                      {selectedFlow.status === "active" ? "已激活" : "草稿"}
                    </Tag>
                  </div>
                </Col>
                <Col span={12}>
                  <Text strong>创建者：</Text>
                  <div>{selectedFlow.creator}</div>
                </Col>
              </Row>
              <Divider />
              <Text strong>描述：</Text>
              <Paragraph>{selectedFlow.description || "暂无描述"}</Paragraph>
              <Text strong>标签：</Text>
              <div style={{ marginTop: 8 }}>
                {selectedFlow.tags.map((tag) => (
                  <Tag key={tag}>{tag}</Tag>
                ))}
              </div>
            </Card>

            <Card title="执行统计" style={{ marginBottom: 16 }}>
              <Row gutter={16}>
                <Col span={8}>
                  <Statistic title="节点数量" value={selectedFlow.nodeCount} />
                </Col>
                <Col span={8}>
                  <Statistic
                    title="执行次数"
                    value={selectedFlow.executionCount}
                  />
                </Col>
                <Col span={8}>
                  <Statistic
                    title="成功率"
                    value={selectedFlow.successRate}
                    suffix="%"
                    valueStyle={{
                      color:
                        selectedFlow.successRate >= 90 ? "#52c41a" : "#faad14",
                    }}
                  />
                </Col>
              </Row>
            </Card>

            <Card title="时间信息">
              <div style={{ marginBottom: 12 }}>
                <Text strong>创建时间：</Text>
                <div>{formatDate(selectedFlow.createdAt)}</div>
              </div>
              <div style={{ marginBottom: 12 }}>
                <Text strong>更新时间：</Text>
                <div>{formatDate(selectedFlow.updatedAt)}</div>
              </div>
              <div>
                <Text strong>最后运行：</Text>
                <div>
                  {selectedFlow.lastRunTime
                    ? formatDate(selectedFlow.lastRunTime)
                    : "从未运行"}
                </div>
              </div>
            </Card>
          </div>
        )}
      </Drawer>
    </Layout>
  );
};

export default FlowListPage;



================================================================================
# 文件: src/App.js
# 行数: 32
================================================================================

// src/App.js - Modified
import React from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import WorkflowEditor from "./WorkflowEditor";
import FlowListPage from "./FlowListPage";
import "./styles.css";
import "./tab-properties.css";
import "./resizable-panel.css";
import "./kv-table.css";
import "./flow-list.css";
import "semantic-ui-css/semantic.min.css";

export default function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/" element={<Navigate to="/flows" />} />
          <Route path="/flows" element={<FlowListPage />} />
          <Route path="/editor" element={<WorkflowEditor />} />
          <Route path="/editor/:flowId" element={<WorkflowEditor />} />
        </Routes>
      </div>
    </Router>
  );
}



================================================================================
# 文件: src/AdvancedResizablePanel.js
# 行数: 126
================================================================================

// AdvancedResizablePanel.js - 简单可靠的拖拽实现
import React, { useState, useRef, useEffect } from "react";
import TabPropertiesPanel from "./TabPropertiesPanel";
import "./resizable-panel.css";

/**
 * 可调整大小的属性面板
 * 使用简单可靠的实现确保拖拽正常工作
 */
const AdvancedResizablePanel = ({
  selectedNode,
  updateNodeProperties,
  nodes,
  edges,
  onDeleteEdge,
}) => {
  // 默认宽度和最小/最大宽度限制
  const defaultWidth = 400;
  const minWidth = 400;
  const maxWidth = 800;

  // 尝试从localStorage获取保存的宽度
  const getSavedWidth = () => {
    try {
      const savedWidth = localStorage.getItem("propertiesPanelWidth");
      return savedWidth
        ? Math.max(minWidth, parseInt(savedWidth))
        : defaultWidth;
    } catch (e) {
      return defaultWidth;
    }
  };

  // 当前面板宽度状态
  const [width, setWidth] = useState(getSavedWidth());
  // 是否正在调整大小
  const [isResizing, setIsResizing] = useState(false);

  // 处理鼠标按下事件，开始调整大小
  const handleMouseDown = (e) => {
    e.preventDefault();
    // 记录初始鼠标位置和面板宽度
    const startX = e.clientX;
    const startWidth = width;
    setIsResizing(true);

    // 处理鼠标移动
    const handleMouseMove = (moveEvent) => {
      // 计算新宽度
      const deltaX = moveEvent.clientX - startX;
      const newWidth = startWidth - deltaX;

      // 限制宽度在允许范围内
      const clampedWidth = Math.max(minWidth, Math.min(maxWidth, newWidth));

      // 更新宽度
      setWidth(clampedWidth);
    };

    // 处理鼠标释放
    const handleMouseUp = () => {
      setIsResizing(false);

      // 保存宽度到localStorage
      try {
        localStorage.setItem("propertiesPanelWidth", width.toString());
      } catch (e) {
        console.warn("Failed to save panel width to localStorage", e);
      }

      // 移除事件监听器
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseup", handleMouseUp);
    };

    // 添加事件监听器
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp);
  };

  // 双击重置为默认宽度
  const handleDoubleClick = () => {
    setWidth(defaultWidth);
    try {
      localStorage.setItem("propertiesPanelWidth", defaultWidth.toString());
    } catch (e) {
      console.warn("Failed to save panel width to localStorage", e);
    }
  };

  return (
    <div
      className={`resizable-properties-panel ${isResizing ? "resizing" : ""}`}
      style={{ width: `${width}px` }}
    >
      {/* 简单的拖拽手柄 */}
      <div
        className="resize-handle"
        onMouseDown={handleMouseDown}
        onDoubleClick={handleDoubleClick}
        title="拖动调整宽度，双击重置"
      >
        <div className="handle-line"></div>
      </div>

      {/* 面板标题 */}
      <div className="panel-header">
        <h3>节点属性</h3>
      </div>

      {/* 面板内容 */}
      <div className="panel-content">
        <TabPropertiesPanel
          selectedNode={selectedNode}
          updateNodeProperties={updateNodeProperties}
          nodes={nodes}
          edges={edges}
          onDeleteEdge={onDeleteEdge}
        />
      </div>
    </div>
  );
};

export default AdvancedResizablePanel;



================================================================================
# 文件: src/components/SubflowLoopNode.js
# 行数: 830
================================================================================

import React, { useState, useCallback, useEffect, useRef } from "react";
import { Handle, Position, NodeResizeControl, useReactFlow } from "reactflow";
import { LoopIcon, LoopStartIcon } from "./nodes";

import { generateUUID } from "../utils";

// 循环节点组件 - 支持子流程但保持原有样式
export const SubflowLoopNode = ({
  data,
  selected,
  id,
  entryIcon,
  xPos,
  yPos,
}) => {
  const { getNodes, setNodes } = useReactFlow();

  // 使用useRef减少重渲染
  const heightRef = useRef(data.config?.subflow?.height || 154);
  const widthRef = useRef(data.config?.subflow?.width || 320);
  const [height, setHeight] = useState(heightRef.current);
  const [width, setWidth] = useState(widthRef.current);

  // 设置最小尺寸
  const minHeight = 154;
  const minWidth = 320;

  // 设置边界保护距离
  const BOUNDARY_PADDING = 10; // 距离边界的保护距离

  // 是否正在调整大小
  const [isResizing, setIsResizing] = useState(false);
  const resizingRef = useRef(false);

  // 防止重复添加节点的标志
  const isAddingNodeRef = useRef(false);

  // 是否正在拖动标记
  const [isDragging, setIsDragging] = useState(false);

  // 节点位置参考
  const nodePosition = useRef({ x: xPos, y: yPos });

  // 边界计算值
  const [minBounds, setMinBounds] = useState({
    width: minWidth,
    height: minHeight,
  });

  // 使用useEffect，当节点位置变化时更新引用
  useEffect(() => {
    nodePosition.current = { x: xPos, y: yPos };
  }, [xPos, yPos]);

  // 当配置更新时同步尺寸
  useEffect(() => {
    if (
      data.config?.subflow?.height &&
      data.config.subflow.height !== heightRef.current
    ) {
      heightRef.current = data.config.subflow.height;
      setHeight(data.config.subflow.height);
    }
    if (
      data.config?.subflow?.width &&
      data.config.subflow.width !== widthRef.current
    ) {
      widthRef.current = data.config.subflow.width;
      setWidth(data.config.subflow.width);
    }
  }, [data.config]);

  // 添加拖动状态监听器
  useEffect(() => {
    // 检测节点何时开始拖动
    const handleDragStart = () => {
      setIsDragging(true);
    };

    // 检测节点何时停止拖动
    const handleDragEnd = () => {
      setIsDragging(false);

      // 给DOM时间更新，然后确保所有子内容可见
      setTimeout(() => {
        const subflowContainers =
          document.querySelectorAll(".loop-subflow-area");
        subflowContainers.forEach((container) => {
          container.style.visibility = "visible";
          container.style.opacity = "1";

          // 确保内部节点可见
          const childNodes = container.querySelectorAll(".react-flow__node");
          childNodes.forEach((node) => {
            node.style.visibility = "visible";
            node.style.opacity = "1";
          });
        });

        // 确保连线可见
        const edges = document.querySelectorAll(".react-flow__edge");
        edges.forEach((edge) => {
          edge.style.visibility = "visible";
          edge.style.opacity = "1";
        });
      }, 50);
    };

    // 添加事件监听
    const nodeElement = document.querySelector(
      `.react-flow__node[data-id="${id}"]`
    );
    if (nodeElement) {
      nodeElement.addEventListener("mousedown", handleDragStart);
      document.addEventListener("mouseup", handleDragEnd);
    }

    // 清理函数
    return () => {
      if (nodeElement) {
        nodeElement.removeEventListener("mousedown", handleDragStart);
      }
      document.removeEventListener("mouseup", handleDragEnd);
    };
  }, [id]);

  // 获取节点头部高度和底部高度
  const headerHeight = 34;
  const footerHeight = 12;

  // 获取子节点的尺寸 - 辅助函数，考虑不同节点类型的实际尺寸
  const getNodeDimensions = useCallback(
    (node) => {
      // 根据节点类型和其他条件获取更准确的尺寸
      let nodeWidth = 220; // 默认宽度
      let nodeHeight = 80; // 默认高度

      // 检查节点是否有明确的宽高定义
      if (node.width && node.height) {
        nodeWidth = node.width;
        nodeHeight = node.height;
      } else {
        // 根据节点类型预估大小
        switch (node.type) {
          case "SWITCH":
            // 分支节点高度取决于分支数量
            const casesCount = node.data?.config?.cases?.length || 0;
            nodeHeight = 24 + (casesCount + 1) * 24;
            break;
          case "LOOP":
            // 循环节点高度包括头部、子流程区域和底部
            const subflowHeight = node.data?.config?.subflow?.height || 154;
            nodeHeight = headerHeight + subflowHeight + footerHeight;
            break;
          case "SCRIPT":
            nodeHeight = 80; // 脚本节点固定高度
            break;
          case "HTTP":
            nodeHeight = 80; // HTTP节点固定高度
            break;
          case "SQL":
            nodeHeight = 80; // SQL节点固定高度
            break;
          case "REDIS":
            nodeHeight = 80; // Redis节点固定高度
            break;
          case "SET_VARIABLE":
            nodeHeight = 80; // 变量节点固定高度
            break;
          case "END":
            nodeHeight = 70; // 结束节点可能较小
            break;
          case "START":
            nodeHeight = 34; // 开始节点高度
            break;
          // 默认使用80px高度
          default:
            nodeHeight = 80;
        }
      }

      return { width: nodeWidth, height: nodeHeight };
    },
    [headerHeight, footerHeight]
  );

  // 处理子流程区域内节点的边界检查
  const checkNodeBoundaries = useCallback(() => {
    const allNodes = getNodes();
    const subflowNodes = allNodes.filter((node) => node.parentNode === id);

    if (subflowNodes.length === 0) return minBounds;

    // 计算子节点占用的最大边界，考虑节点实际尺寸
    let maxRight = -Infinity;
    let maxBottom = -Infinity;

    subflowNodes.forEach((node) => {
      // 获取节点的精确尺寸
      const { width: nodeWidth, height: nodeHeight } = getNodeDimensions(node);

      // 计算节点的右边界和底边界
      // 加上BOUNDARY_PADDING确保节点距离容器边缘有足够空间
      const nodeRight = node.position.x + nodeWidth + BOUNDARY_PADDING;
      const nodeBottom = node.position.y + nodeHeight + BOUNDARY_PADDING;

      maxRight = Math.max(maxRight, nodeRight);
      maxBottom = Math.max(maxBottom, nodeBottom);
    });

    // 计算需要的最小尺寸，已经考虑了边界保护距离
    const requiredWidth = Math.max(minWidth, maxRight);
    const requiredHeight = Math.max(minHeight, maxBottom);

    return {
      width: requiredWidth,
      height: requiredHeight,
    };
  }, [getNodes, id, minWidth, minHeight, getNodeDimensions]);

  // 在每次渲染时更新边界计算
  useEffect(() => {
    if (!isResizing) {
      const bounds = checkNodeBoundaries();
      setMinBounds(bounds);
    }
  }, [checkNodeBoundaries, isResizing]);

  // 处理 resize 开始
  const onResizeStart = useCallback(() => {
    if (resizingRef.current) return;
    resizingRef.current = true;
    setIsResizing(true);
    document.body.classList.add("resizing-active");
  }, []);

  // 处理 resize 过程
  const onResize = useCallback(
    (event, { width: newWidth, height: newHeight }) => {
      requestAnimationFrame(() => {
        // 计算子流程内容区域的高度（减去头部和底部）
        const contentHeight = newHeight - headerHeight - footerHeight;

        // 确保不小于最小尺寸和子节点需要的尺寸
        const clampedHeight = Math.max(
          minBounds.height,
          minHeight,
          contentHeight
        );
        const clampedWidth = Math.max(minBounds.width, minWidth, newWidth);

        // 更新ref值
        heightRef.current = clampedHeight;
        widthRef.current = clampedWidth;

        // 更新状态
        setHeight(clampedHeight);
        setWidth(clampedWidth);
      });
    },
    [minBounds, minHeight, minWidth, headerHeight, footerHeight]
  );

  // 处理 resize 结束
  const onResizeEnd = useCallback(
    (event, { width: newWidth, height: newHeight }) => {
      resizingRef.current = false;
      setIsResizing(false);
      document.body.classList.remove("resizing-active");

      // 计算子流程内容区域的高度（减去头部和底部）
      const contentHeight = newHeight - headerHeight - footerHeight;

      // 确保不小于最小尺寸和子节点需要的尺寸
      const clampedHeight = Math.max(
        minBounds.height,
        minHeight,
        contentHeight
      );
      const clampedWidth = Math.max(minBounds.width, minWidth, newWidth);

      // 更新节点配置
      setTimeout(() => {
        if (data.updateNodeInternally && id) {
          data.updateNodeInternally(id, {
            config: {
              ...data.config,
              subflow: {
                ...data.config?.subflow,
                width: clampedWidth,
                height: clampedHeight,
              },
            },
          });

          // 调整节点大小后，检查并调整子节点位置，确保它们不超出边界
          repositionChildNodes(clampedWidth, clampedHeight);
        }
      }, 0);
    },
    [data, id, minBounds, minHeight, minWidth, headerHeight, footerHeight]
  );

  // 重新定位子节点，确保它们在边界内
  const repositionChildNodes = useCallback(
    (containerWidth, containerHeight) => {
      const allNodes = getNodes();
      const childNodes = allNodes.filter((node) => node.parentNode === id);

      if (childNodes.length === 0) return;

      // 创建一个标志来跟踪是否有节点被重新定位
      let hasRepositioned = false;

      // 创建更新后的节点副本
      const updatedNodes = allNodes.map((node) => {
        if (node.parentNode === id) {
          // 获取节点的精确尺寸
          const { width: nodeWidth, height: nodeHeight } =
            getNodeDimensions(node);

          // 计算边界，添加保护距离，并考虑节点自身的尺寸
          const minX = BOUNDARY_PADDING + 20;
          const minY = BOUNDARY_PADDING + 34;
          // 注意：对于底部边界，我们需要确保不超出
          const maxX = containerWidth - nodeWidth - BOUNDARY_PADDING - 20;
          const maxY = containerHeight - nodeHeight - BOUNDARY_PADDING + 34;

          // 检查并调整节点位置，确保子节点完全在边界内
          let newX = Math.min(Math.max(minX, node.position.x), maxX);
          let newY = Math.min(Math.max(minY, node.position.y), maxY);

          // 如果位置有变化，标记需要更新
          if (newX !== node.position.x || newY !== node.position.y) {
            hasRepositioned = true;
            return {
              ...node,
              position: {
                x: newX,
                y: newY,
              },
            };
          }
        }
        return node;
      });

      // 如果有节点被重新定位，更新节点
      if (hasRepositioned) {
        setNodes(updatedNodes);
      }
    },
    [getNodes, setNodes, id, getNodeDimensions]
  );

  // 计算总高度
  const totalHeight = headerHeight + height + footerHeight;
  const handlePositionY = totalHeight / 2;

  // 计算子流程区域的有效宽度
  const subflowEffectiveWidth = width - 24; // 左右各12px边距

  // 处理节点拖入子流程区域
  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.stopPropagation(); // 修复: 确保事件不会冒泡
    event.dataTransfer.dropEffect = "move";
  }, []);

  // 注册拖动处理事件
  useEffect(() => {
    // 创建事件监听器，仅用于捕获结束事件以便更新节点位置
    const dragStopHandler = (event) => {
      if (event.detail && event.detail.parentId === id) {
        // 在拖动结束时不需要显示坐标，但可能需要处理其他逻辑
      }
    };

    // 添加自定义事件监听器
    document.addEventListener("node-drag-stop", dragStopHandler);

    // 清理函数
    return () => {
      document.removeEventListener("node-drag-stop", dragStopHandler);
    };
  }, [id]);

  // 处理节点放入子流程区域
  // 完整修改 SubflowLoopNode.js 中的 onDrop 函数

  // 处理节点放入子流程区域
  const onDrop = useCallback(
    (event) => {
      // 阻止原生事件并阻止事件冒泡，防止外层容器处理相同的事件
      event.preventDefault();
      event.stopPropagation();

      // 防止重复执行
      if (isAddingNodeRef.current) return;
      isAddingNodeRef.current = true;

      try {
        // 获取拖拽的节点类型
        const nodeType = event.dataTransfer.getData(
          "application/reactflow/type"
        );

        // 关键修复：允许所有节点类型放入循环子流程区域
        if (!nodeType) {
          console.log("没有获取到节点类型");
          isAddingNodeRef.current = false;
          return;
        }

        // 获取鼠标位置相对于子流程区域的坐标
        const {
          left,
          top,
          width: containerWidth,
          height: containerHeight,
        } = event.currentTarget.getBoundingClientRect();

        // 基于节点类型估计节点尺寸
        let nodeWidth = 220; // 默认节点宽度
        let nodeHeight;

        // 根据节点类型调整预估尺寸
        switch (nodeType) {
          case "SWITCH":
            nodeHeight = 24 + 3 * 24; // 默认有2个分支+默认分支
            break;
          case "LOOP":
            nodeHeight = headerHeight + 154 + footerHeight; // 基于最小高度
            break;
          case "SCRIPT":
            nodeHeight = 80; // 脚本节点固定高度
            break;
          case "HTTP":
            nodeHeight = 80; // HTTP节点固定高度
            break;
          case "SQL":
            nodeHeight = 80; // SQL节点固定高度
            break;
          case "REDIS":
            nodeHeight = 80; // Redis节点固定高度
            break;
          case "SET_VARIABLE":
            nodeHeight = 80; // 变量节点固定高度
            break;
          case "END":
            nodeHeight = 70; // 结束节点可能较小
            break;
          case "START":
            nodeHeight = 34; // 开始节点高度
            break;
          default:
            nodeHeight = 80; // 默认高度
        }

        // 计算放置位置，考虑边界保护距离和节点尺寸
        let x = event.clientX - left;
        let y = event.clientY - top;

        // 应用边界，使用更新后的计算公式
        const minX = BOUNDARY_PADDING + 20;
        const minY = BOUNDARY_PADDING + 34;
        const maxX = containerWidth - nodeWidth - BOUNDARY_PADDING - 20;
        const maxY = containerHeight - nodeHeight - BOUNDARY_PADDING + 34;

        // 应用边界限制
        x = Math.min(Math.max(minX, x), maxX);
        y = Math.min(Math.max(minY, y), maxY);

        const position = { x, y };

        // 创建新节点ID - 使用generateUUID函数生成独立的32位ID
        const newNodeId = generateUUID();

        // 创建新节点 - 明确设置parentNode和extent属性
        const newNode = {
          id: newNodeId,
          type: nodeType,
          position,
          parentNode: id, // 明确设置父节点ID
          extent: "parent", // 明确限制在父节点范围内
          draggable: true, // 确保可拖动
          data: {
            label: getNodeTypeLabel(nodeType),
            config: getDefaultConfig(nodeType),
            updateNodeInternally: data.updateNodeInternally,
          },
        };

        // 使用函数形式的setNodes以确保使用最新状态
        setNodes((currentNodes) => {
          // 检查是否已存在相同父节点的同类型节点在相似位置
          const isDuplicate = currentNodes.some(
            (node) =>
              node.parentNode === id &&
              node.type === nodeType &&
              Math.abs(node.position.x - position.x) < 10 &&
              Math.abs(node.position.y - position.y) < 10
          );

          if (isDuplicate) {
            isAddingNodeRef.current = false;
            return currentNodes; // 如果是重复的，不添加
          }

          // 将新节点添加到当前节点列表中
          const updatedNodes = [...currentNodes, newNode];

          // 使用计时器确保DOM更新完成，然后更新节点的父子关系
          setTimeout(() => {
            if (data.updateNodeInternally) {
              // 获取当前的所有子流程节点
              const subflowNodes = updatedNodes.filter(
                (n) => n.parentNode === id
              );

              // 更新循环节点配置，存储子节点信息
              data.updateNodeInternally(id, {
                config: {
                  ...data.config,
                  subflow: {
                    ...data.config?.subflow,
                    nodes: subflowNodes,
                  },
                },
              });
            }

            // 重置节点添加状态
            isAddingNodeRef.current = false;
          }, 50);

          return updatedNodes;
        });
      } catch (error) {
        console.error("子流程添加节点错误:", error);
        isAddingNodeRef.current = false;
      }
    },
    [id, data, setNodes, width, height, headerHeight, footerHeight]
  );

  return (
    <div
      className={`custom-node loop-node loop-container ${
        isResizing ? "resizing" : ""
      } ${isDragging ? "dragging-parent" : ""}`}
      style={{
        width: `${width}px`,
        height: `${totalHeight}px`,
        willChange:
          isResizing || isDragging ? "width, height, transform" : "transform",
        position: "relative",
        overflow: "visible",
      }}
    >
      {/* 左侧输入连接点 */}
      <Handle
        type="target"
        position={Position.Left}
        id="left"
        style={{
          top: handlePositionY,
          transform: "translate(-50%, -50%)",
          zIndex: 2000, // 确保连接点在顶层
        }}
      />

      {/* 节点头部 - 保持原始样式 */}
      <div className="node-header" style={{ zIndex: 20 }}>
        <div className="node-icon">
          <LoopIcon />
        </div>
        <div className="node-title">{data.label || "循环"}</div>
      </div>

      {/* 子流程区域 - 可拖放节点的区域 */}
      <div
        className={`loop-subflow-area ${isDragging ? "parent-dragging" : ""}`}
        style={{
          height: height,
          width: subflowEffectiveWidth,
          margin: "0 12px 12px 12px",
          backgroundColor: "#f0f0f0",
          backgroundImage: "radial-gradient(#c0c0c0 1px, transparent 1px)",
          backgroundSize: "16px 16px",
          border: "1px solid #e0e0e0",
          borderRadius: "6px",
          position: "relative",
          overflow: "hidden", // 确保子节点不能移出区域
          boxSizing: "border-box", // 确保边框包含在宽高计算内
          zIndex: isDragging ? 1500 : 5, // 拖动时提高层级
          pointerEvents: isDragging ? "none" : "auto", // 拖动时禁用鼠标事件
          visibility: "visible", // 始终保持可见
          opacity: 1, // 始终保持不透明
        }}
        onDragOver={onDragOver}
        onDrop={onDrop}
      >
        {/* 子流程背景点阵图案 */}
        <div className="loop-background-dots" style={{ zIndex: 1 }}></div>

        {/* 添加提示文字 */}
        <div
          style={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            color: "#aaa",
            fontSize: "14px",
            userSelect: "none",
            pointerEvents: "none",
            opacity: 0.6,
            textAlign: "center",
            zIndex: 2,
          }}
        >
          循环体内容区域
          <br />
          拖放节点到此处
        </div>

        {/* 添加入口点指示器 - 特别确保连接点ID为"entry-out" */}
        <div
          style={{
            position: "absolute",
            top: "20px",
            left: "20px",
            zIndex: 25, // 确保在其他元素之上，但不超过边缘连线
            pointerEvents: "none",
          }}
        >
          <div
            style={{
              width: "36px",
              height: "28px",
              borderRadius: "6px",
              backgroundColor: "#3498db",
              border: "2px solid #2980b9",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)",
              position: "relative",
            }}
          >
            {entryIcon ? (
              <LoopStartIcon />
            ) : (
              <svg viewBox="0 0 24 24" width="16" height="16">
                <path d="M8 5v14l11-7z" fill="white" />
              </svg>
            )}

            {/* 循环起始节点出口连接点 - 确保ID为"entry-out" */}
            <Handle
              type="source"
              position={Position.Right}
              id="entry-out"
              className="entry-handle entry-handle-out"
              style={{
                width: "9px",
                height: "9px",
                backgroundColor: "#4caf50",
                border: "1px solid white",
                boxShadow: "0 0 2px rgba(0, 0, 0, 0.2)",
                zIndex: 2000, // 确保在背景之上
                right: "0px",
                top: "50%",
                transform: "translate(50%, -50%)",
                pointerEvents: "all",
              }}
            />
          </div>
        </div>
      </div>

      {/* 底部白色区域 */}
      <div
        style={{
          height: footerHeight,
          width: "calc(100% - 24px)",
          backgroundColor: "white",
          margin: "0 12px 0 12px",
          borderRadius: "6px",
          position: "relative",
          zIndex: 20, // 高于子流程内容
        }}
      ></div>

      {/* 调整大小手柄视觉指示器 */}
      <div
        style={{
          position: "absolute",
          right: "4px",
          bottom: "4px",
          width: "16px",
          height: "16px",
          border: "2px solid #4c9aff",
          borderTop: "none",
          borderLeft: "none",
          borderBottomRightRadius: "6px",
          pointerEvents: "none",
          zIndex: 30, // 高于节点但低于resize控制
          opacity: 1,
          backgroundColor: "transparent",
          cursor: "nwse-resize",
        }}
      ></div>

      {/* 右侧输出连接点 */}
      <Handle
        type="source"
        position={Position.Right}
        id="right"
        style={{ zIndex: 2000 }} // 确保连接点在顶层
      />

      {/* NodeResizeControl */}
      <NodeResizeControl
        minWidth={Math.max(minWidth, minBounds.width)}
        minHeight={Math.max(
          minHeight + headerHeight + footerHeight,
          minBounds.height + headerHeight + footerHeight
        )}
        onResizeStart={onResizeStart}
        onResize={onResize}
        onResizeEnd={onResizeEnd}
        style={{
          position: "absolute",
          right: 4,
          bottom: 4,
          width: 20,
          height: 20,
          zIndex: 50, // 高于视觉指示器
          opacity: 0,
          cursor: "nwse-resize",
          pointerEvents: "all",
        }}
      />
    </div>
  );
};

// 获取默认节点标签
function getNodeTypeLabel(type) {
  switch (type) {
    case "START":
      return "开始";
    case "END":
      return "结束";
    case "HTTP":
      return "HTTP";
    case "SQL":
      return "SQL";
    case "REDIS":
      return "Redis";
    case "SCRIPT":
      return "脚本";
    case "SWITCH":
      return "分支";
    case "LOOP":
      return "循环";
    case "SET_VARIABLE":
      return "变量";
    default:
      return type;
  }
}

// 获取节点默认配置
function getDefaultConfig(type) {
  const defaultConfigs = {
    START: {},
    END: {},
    HTTP: {
      url: "",
      method: "GET",
      headers: {},
      body: "",
      timeout: 30000,
    },
    SQL: {
      dataSourceCode: "",
      operation: "QUERY",
      sql: "",
      params: [],
    },
    REDIS: {
      dataSourceCode: "",
      operation: "GET",
      key: "",
      expire: 3600,
    },
    SCRIPT: {
      language: "javascript",
      code: "// 在此编写脚本代码\nfunction process(input) {\n  // 处理输入数据\n  return input;\n}",
    },
    SWITCH: {
      expression: "#{payload}",
      cases: [],
      default: "",
    },
    LOOP: {
      mode: "WHILE",
      condition: "#{index < 10}",
      initialization: "#{index = 0}",
      maxIterations: 1000,
      subflow: {
        height: 154,
        width: 320,
        nodes: [],
        edges: [],
      },
    },
    SET_VARIABLE: {
      variables: {},
    },
  };

  return JSON.parse(JSON.stringify(defaultConfigs[type] || {}));
}

export default SubflowLoopNode;



================================================================================
# 文件: src/components/LoopProperties.js
# 行数: 355
================================================================================

import React, { useState, useEffect, useMemo } from "react";
import { Form } from "@rjsf/semantic-ui";
import validator from "@rjsf/validator-ajv8";
import { Tab, Message, Header } from "semantic-ui-react";
import NodeConfigLoader from "../NodeConfigLoader";
import ErrorHandlingTab from "../ErrorHandlingTab";

import { customFields, customWidgets } from "./fields/schemaLoader";

const LoopProperties = ({ node, updateNode, nodes }) => {
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const [subflowHeight, setSubflowHeight] = useState(
    node.data.config?.subflow?.height || 154
  );
  const [subflowWidth, setSubflowWidth] = useState(
    node.data.config?.subflow?.width || 320
  );
  const [loadingActions, setLoadingActions] = useState({});
  const [debugError, setDebugError] = useState(null);

  // 从配置加载器获取节点类型对应的配置
  const nodeSchema = NodeConfigLoader.getNodeSchema("LOOP");
  const nodeUiSchema = NodeConfigLoader.getNodeUiSchema("LOOP");
  const panelConfig = NodeConfigLoader.getPanelConfig("LOOP");

  // 处理子流程区域高度变化
  const handleSubflowHeightChange = (height) => {
    setSubflowHeight(height);

    // 更新节点配置
    const newConfig = {
      ...node.data.config,
      subflow: {
        ...node.data.config?.subflow,
        height,
      },
    };

    updateNode(node.id, { config: newConfig });
  };

  // 处理子流程区域宽度变化
  const handleSubflowWidthChange = (width) => {
    setSubflowWidth(width);

    // 更新节点配置
    const newConfig = {
      ...node.data.config,
      subflow: {
        ...node.data.config?.subflow,
        width,
      },
    };

    updateNode(node.id, { config: newConfig });
  };

  // 当节点配置变化时同步状态
  useEffect(() => {
    if (node.data.config?.subflow?.height) {
      setSubflowHeight(node.data.config.subflow.height);
    }
    if (node.data.config?.subflow?.width) {
      setSubflowWidth(node.data.config.subflow.width);
    }
  }, [node.data.config?.subflow?.height, node.data.config?.subflow?.width]);

  // 准备表单数据，包括节点类型和ID
  const formData = useMemo(() => {
    // 从节点获取配置数据
    const baseFormData = node.data.config || {};

    // 添加节点类型和ID
    return {
      ...baseFormData,
      nodeType: node.type,
      nodeId: node.id,
    };
  }, [node.data.config, node.type, node.id]);

  // 从schema中提取特定标签页需要的属性
  const createPanelSchema = (schema, fieldList) => {
    if (!schema || !schema.properties) {
      return { type: "object", properties: {} };
    }

    const filteredProperties = {};

    // 添加标签页中指定的字段
    fieldList.forEach((field) => {
      if (schema.properties[field]) {
        filteredProperties[field] = schema.properties[field];
      }
    });

    // 处理dependencies
    const dependencies = {};
    if (schema.dependencies) {
      Object.keys(schema.dependencies).forEach((key) => {
        if (fieldList.includes(key)) {
          dependencies[key] = schema.dependencies[key];
        }
      });
    }

    return {
      ...schema,
      properties: filteredProperties,
      required: (schema.required || []).filter((prop) =>
        fieldList.includes(prop)
      ),
      dependencies:
        Object.keys(dependencies).length > 0 ? dependencies : undefined,
    };
  };

  // 从uiSchema中提取特定标签页需要的配置
  const createPanelUiSchema = (uiSchema, fieldList) => {
    if (!uiSchema) return {};

    const filteredUiSchema = {};

    // 复制全局UI配置
    Object.keys(uiSchema).forEach((key) => {
      if (key.startsWith("ui:")) {
        filteredUiSchema[key] = uiSchema[key];
      }
    });

    // 只复制指定字段的UI配置
    fieldList.forEach((field) => {
      if (uiSchema[field]) {
        filteredUiSchema[field] = uiSchema[field];
      }
    });

    return filteredUiSchema;
  };

  // 处理表单变更
  const handleChange = ({ formData }, panelName) => {
    // 从表单数据中移除 nodeType 和 nodeId
    const { nodeType, nodeId, ...configData } = formData;

    // 保留子流程配置
    const newConfig = {
      ...configData,
      subflow: {
        ...node.data.config?.subflow,
        height: subflowHeight,
        width: subflowWidth,
      },
    };

    updateNode(node.id, { config: newConfig });
  };

  // 处理调试按钮点击
  const handleDebug = async (formData) => {
    // 设置正在加载的动作
    setLoadingActions((prev) => ({ ...prev, debug: true }));
    setDebugError(null);

    try {
      // 模拟调试API调用
      const debugParams = formData.debugParams || "{}";
      let parsedParams;

      try {
        parsedParams = JSON.parse(debugParams);
      } catch (e) {
        throw new Error("调试参数必须是有效的JSON格式");
      }

      // 模拟API调用延迟
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // 模拟调试结果 - 为循环节点返回迭代信息
      const debugResult = {
        success: true,
        data: {
          mode: formData.mode,
          iterations: 5,
          ...parsedParams,
          subflow: {
            executed: true,
            totalNodeCount: node.data.config?.subflow?.nodes?.length || 0,
            executionPath: ["entry", "node1", "node2", "..."],
            iterationLog: [
              { iteration: 1, completed: true },
              { iteration: 2, completed: true },
              { iteration: 3, completed: true },
              { iteration: 4, completed: true },
              { iteration: 5, completed: true },
            ],
          },
          timestamp: new Date().toISOString(),
          nodeId: node.id,
          nodeType: node.type,
          executionId: "debug-" + Math.random().toString(36).substring(2, 11),
        },
      };

      // 更新节点属性，写入调试结果
      const { nodeType, nodeId, ...configData } = formData;

      updateNode(node.id, {
        config: {
          ...configData,
          debugResult: JSON.stringify(debugResult, null, 2),
          subflow: {
            ...node.data.config?.subflow,
            height: subflowHeight,
            width: subflowWidth,
          },
        },
      });
    } catch (error) {
      setDebugError(error.message || "调试过程中发生错误");

      // 更新节点属性，写入错误信息
      const { nodeType, nodeId, ...configData } = formData;

      updateNode(node.id, {
        config: {
          ...configData,
          debugResult: JSON.stringify(
            {
              success: false,
              error: error.message || "调试过程中发生错误",
            },
            null,
            2
          ),
          subflow: {
            ...node.data.config?.subflow,
            height: subflowHeight,
            width: subflowWidth,
          },
        },
      });
    } finally {
      // 清除加载状态
      setLoadingActions((prev) => ({ ...prev, debug: false }));
    }
  };

  // 构建动作处理函数集合
  const actions = {
    debug: handleDebug,
  };

  // 处理Tab切换
  const handleTabChange = (e, { activeIndex }) => {
    setActiveTabIndex(activeIndex);
  };

  // 如果面板配置不存在，显示基本模式
  if (!panelConfig || !nodeSchema || !nodeUiSchema) {
    return (
      <Form
        schema={{
          type: "object",
          properties: {
            mode: {
              type: "string",
              title: "循环模式",
              enum: ["WHILE", "FOR", "FOR_EACH"],
              default: "WHILE",
            },
            condition: {
              type: "string",
              title: "循环条件",
            },
            maxIterations: {
              type: "integer",
              title: "最大迭代次数",
              default: 1000,
            },
          },
        }}
        formData={formData}
        onChange={handleChange}
        validator={validator}
        liveValidate={true}
      />
    );
  }

  // 根据面板配置创建标签页
  const panes = panelConfig.tabs.map((tab) => {
    // 对于异常处理标签页，使用自定义组件
    if (tab.id === "error") {
      return {
        menuItem: tab.title,
        render: () => (
          <Tab.Pane attached={false}>
            <ErrorHandlingTab
              selectedNode={node}
              updateNodeProperties={updateNode}
            />
          </Tab.Pane>
        ),
      };
    }

    // 创建该标签页的schema和uiSchema
    const tabSchema = createPanelSchema(nodeSchema, tab.fields);
    const tabUiSchema = createPanelUiSchema(nodeUiSchema, tab.fields);

    return {
      menuItem: tab.title,
      render: () => (
        <Tab.Pane attached={false}>
          {tab.id === "debug" && debugError && (
            <Message negative>
              <Message.Header>调试错误</Message.Header>
              <p>{debugError}</p>
            </Message>
          )}
          <Form
            schema={tabSchema}
            uiSchema={tabUiSchema}
            formData={formData}
            validator={validator}
            onChange={(formData) => handleChange(formData, tab.id)}
            liveValidate={true}
            showErrorList={false}
            widgets={customWidgets}
            fields={customFields}
            formContext={{
              actions,
              loadingActions,
              language: formData.language,
            }}
          />
        </Tab.Pane>
      ),
    };
  });

  return (
    <div className="tab-properties-panel">
      <Tab
        panes={panes}
        activeIndex={activeTabIndex}
        onTabChange={handleTabChange}
        menu={{ secondary: true, pointing: true }}
      />
    </div>
  );
};

export default LoopProperties;



================================================================================
# 文件: src/components/nodes/index.js
# 行数: 316
================================================================================

import React from "react";
import { Handle, Position } from "reactflow";

// SVG图标组件
export const StartIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M8 5v14l11-7z" />
  </svg>
);

export const EndIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2z" />
  </svg>
);

export const HttpIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M4.5 11h-2V9H1v6h1.5v-2.5h2V15H6V9H4.5v2zm2.5-.5h1.5V15H10v-4.5h1.5V9H7v1.5zm5.5 0H14V15h1.5v-4.5H17V9h-4.5v1.5zm9-1.5H18v6h1.5v-2h2c.8 0 1.5-.7 1.5-1.5v-1c0-.8-.7-1.5-1.5-1.5zm0 2.5h-2v-1h2v1z" />
  </svg>
);

export const SqlIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM9 18H7v-6h2v6zm4 0h-2V8h2v10zm4 0h-2v-4h2v4z" />
  </svg>
);

export const RedisIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M17 13h2v2h-2zm0 4h2v2h-2zM1 13h2v2H1zm0 4h2v2H1zm4-4h2v2H5zm0 4h2v2H5zm4-4h2v2H9z" />
    <path d="M21 7h-1V5c0-1.1-.9-2-2-2H6c-1.1 0-2 .9-2 2v2H3c-1.1 0-2 .9-2 2v11h22V9c0-1.1-.9-2-2-2zM6 5h12v2H6V5zm14 13H4v-2h16v2zm0-4H4V9h16v5z" />
  </svg>
);

export const SwitchIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M20 4v16H4V4h16m0-2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z" />
    <path d="M9.5 16V8l5.5 4-5.5 4z" />
  </svg>
);

export const LoopIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z" />
  </svg>
);

export const LoopStartIcon = () => (
  <svg
    t="1747368395194"
    className="icon"
    viewBox="0 0 1024 1024"
    version="1.1"
    xmlns="http://www.w3.org/2000/svg"
    p-id="3654"
    width="24"
    height="24"
  >
    <path
      d="M954.058556 493.157863c-43.23264-44.004213-422.432055-429.957449-423.904593-431.429986-4.974291-4.975315-12.541641-7.496741-22.49227-7.496741-8.815783 0-15.785521 2.49789-20.711717 7.424086L66.122465 497.179456l0 8.266267c0 18.583241 6.119371 36.461423 17.232476 50.341548 10.562567 13.193487 24.000624 21.069875 35.945677 21.069875l65.450664 0 0 314.966485c0 55.979966 38.562271 75.842339 71.585385 75.842339 2.1295 0 14.32117-0.169869 90.969874-0.169869s70.608128-75.43711 70.608128-75.43711L417.91467 646.39592c0-9.287527 7.496741-16.362666 11.249205-16.362666l48.461735 0 0-40.904619-48.462758 0c-27.782763 0-52.154847 26.759457-52.154847 57.267285l0 245.477854c0 0-1.861394 34.718733-29.751604 34.718733-11.766998 0-89.919962 0.169869-90.920756 0.169869-30.67872 0-30.67872-26.297946-30.67872-34.938744L225.656925 535.952528 121.464911 535.952528c-3.078105-1.87879-11.418051-9.230222-13.795191-22.902616L508.582669 98.130971c52.142567 53.054333 362.372168 368.81081 410.150334 417.437298-0.699941 9.211802-2.52859 13.670348-3.717671 15.657608-0.86367 1.438769-1.606591 2.684132-6.225795 2.684132L804.540218 533.910009l-1.075495 355.077018c-2.52245 8.207939-13.405311 37.604456-39.892569 37.604456 0 0-40.298821 0-75.330686 0s-39.161928-21.097504-39.149649-34.718733c0.079818-84.74408 0.188288-237.419318-0.065492-246.077511-0.245593-8.330736-3.206018-21.429055-10.780531-33.213449-9.723455-15.123442-24.049742-23.454178-40.342824-23.454178l-55.19509 0 0 40.904619 55.19509 0c5.418406 0 10.094916 12.181437 10.235109 16.96437 0.222057 7.557116 0.138146 149.410891 0.048095 244.87615-0.020466 21.3871 0.603751 75.622328 80.055291 75.622328 51.746548 0 75.330686 0 75.330686 0 26.396183 0 48.812729-12.697183 64.826448-36.719296 10.906397-16.35448 14.9679-32.391734 15.395642-34.167171l1.528819-321.79603 63.466474 0c17.935488 0 32.611745-8.020674 41.328267-22.584368 6.597255-11.024078 9.80532-25.65838 9.80532-44.737924l0-8.366551L954.058556 493.157863z"
      fill="#ffffff"
      p-id="3655"
    />
  </svg>
);

export const ScriptIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z" />
  </svg>
);

export const VariableIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M4 7v2h3v10h2V9h3V7H4zm13.8 4h-2.4l-3 9h2.1l.7-2h2.8l.7 2h2.1l-3-9zm-2.1 5.1l.9-2.7.9 2.7h-1.8z" />
  </svg>
);

// 添加一个加号图标组件
export const PlusIcon = () => (
  <svg viewBox="0 0 24 24" fill="white" width="14" height="14">
    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z" />
  </svg>
);

// 添加一个减号图标组件
export const MinusIcon = () => (
  <svg viewBox="0 0 24 24" fill="#e74c3c" width="14" height="14">
    <path d="M19 13H5v-2h14z" />
  </svg>
);

// 自定义节点组件
export const StartNode = ({ data }) => (
  <div className="custom-node node-start">
    <div className="node-header">
      <div className="node-icon">
        <StartIcon />
      </div>
      <div className="node-title">{data.label || "开始"}</div>
    </div>
    <Handle type="source" position={Position.Right} id="right" />
  </div>
);

export const EndNode = ({ data }) => (
  <div className="custom-node node-end">
    <Handle type="target" position={Position.Left} id="left" />
    <div className="node-header">
      <div className="node-icon">
        <EndIcon />
      </div>
      <div className="node-title">{data.label || "结束"}</div>
    </div>
  </div>
);

export const HttpNode = ({ data }) => (
  <div className="custom-node node-http">
    <Handle type="target" position={Position.Left} id="left" />
    <div className="node-header">
      <div className="node-icon">
        <HttpIcon />
      </div>
      <div className="node-title">{data.label || "HTTP"}</div>
    </div>
    {data.config?.url && (
      <div className="node-content">
        {data.config.method || "GET"}: {data.config.url}
      </div>
    )}
    <Handle type="source" position={Position.Right} id="right" />
  </div>
);

export const SqlNode = ({ data }) => (
  <div className="custom-node node-sql">
    <Handle type="target" position={Position.Left} id="left" />
    <div className="node-header">
      <div className="node-icon">
        <SqlIcon />
      </div>
      <div className="node-title">{data.label || "SQL"}</div>
    </div>
    {data.config?.sql && (
      <div className="node-content">{data.config.operation || "QUERY"}</div>
    )}
    <Handle type="source" position={Position.Right} id="right" />
  </div>
);

export const RedisNode = ({ data }) => (
  <div className="custom-node node-redis">
    <Handle type="target" position={Position.Left} id="left" />
    <div className="node-header">
      <div className="node-icon">
        <RedisIcon />
      </div>
      <div className="node-title">{data.label || "Redis"}</div>
    </div>
    {data.config?.key && (
      <div className="node-content">
        {data.config.operation || "GET"}: {data.config.key}
      </div>
    )}
    <Handle type="source" position={Position.Right} id="right" />
  </div>
);

// 分支节点组件 - 修改版，使用右下角浮动按钮
export const SwitchNode = ({ data, id }) => {
  // 计算节点高度 - 基础高度加上每个case的高度
  const caseCount = data.config?.cases?.length || 0;
  const nodeHeight = 24 + (caseCount + 1) * 24 + 8; // 增加一些空间，但不为按钮保留太多位置

  // 添加分支处理函数
  const addCase = () => {
    if (!data.updateNodeInternally) return;

    const cases = [...(data.config?.cases || [])];
    const caseNum = cases.length + 1;
    cases.push({
      name: `case${caseNum}`, // 使用case+序号作为名称
      condition: "", // 条件默认为空
      target: "",
    });

    data.updateNodeInternally(id, {
      config: {
        ...data.config,
        cases,
      },
    });
  };

  // 删除分支处理函数
  const removeCase = (index) => {
    if (!data.updateNodeInternally) return;

    const cases = [...(data.config?.cases || [])];
    cases.splice(index, 1);

    data.updateNodeInternally(id, {
      config: {
        ...data.config,
        cases,
      },
    });
  };

  return (
    <div
      className="custom-node node-switch"
      style={{ height: nodeHeight, position: "relative" }}
    >
      <Handle type="target" position={Position.Left} id="left" />
      <div className="node-header">
        <div className="node-icon">
          <SwitchIcon />
        </div>
        <div className="node-title">{data.label || "分支"}</div>
      </div>

      <div className="switch-cases-container">
        <div className="switch-cases">
          {data.config?.cases?.map((caseItem, index) => (
            <div
              key={index}
              className="switch-case-row"
              style={{ position: "relative", border: "none" }}
            >
              <div className="switch-case-condition">
                {caseItem.condition || `case${index + 1}`}
              </div>
              <button
                onClick={() => removeCase(index)}
                className="delete-case-button"
              >
                <MinusIcon />
              </button>
              <Handle
                type="source"
                position={Position.Right}
                id={`case-${index}`}
                className="case-handle"
              />
            </div>
          ))}

          <div className="switch-default-row" style={{ border: "none" }}>
            <div className="switch-default-label">默认分支</div>
            <Handle
              type="source"
              position={Position.Right}
              id="default"
              className="default-handle"
            />
          </div>
        </div>
      </div>

      {/* 右下角的浮动添加按钮 */}
      <button
        onClick={addCase}
        className="switch-add-button-float"
        aria-label="添加分支"
        title="添加分支"
      ></button>
    </div>
  );
};

export const ScriptNode = ({ data }) => (
  <div className="custom-node node-script">
    <Handle type="target" position={Position.Left} id="left" />
    <div className="node-header">
      <div className="node-icon">
        <ScriptIcon />
      </div>
      <div className="node-title">{data.label || "脚本"}</div>
    </div>
    <Handle type="source" position={Position.Right} id="right" />
  </div>
);

export const SetVariableNode = ({ data }) => (
  <div className="custom-node node-variable">
    <Handle type="target" position={Position.Left} id="left" />
    <div className="node-header">
      <div className="node-icon">
        <VariableIcon />
      </div>
      <div className="node-title">{data.label || "变量"}</div>
    </div>
    {/* 变量内容区域已移除 */}
    <Handle type="source" position={Position.Right} id="right" />
  </div>
);

// 导入子流程循环节点
import SubflowLoopNode from "../SubflowLoopNode";

// 导出节点类型映射
export const nodeTypes = {
  START: StartNode,
  END: EndNode,
  HTTP: HttpNode,
  SQL: SqlNode,
  REDIS: RedisNode,
  SWITCH: SwitchNode,
  LOOP: SubflowLoopNode, // 使用新的子流程循环节点
  SCRIPT: ScriptNode,
  SET_VARIABLE: SetVariableNode,
};



================================================================================
# 文件: src/components/fields/schemaLoader.js
# 行数: 398
================================================================================

// schemaLoader.js - 添加KVTableField组件版本
// 注意：导入顺序很重要，React必须首先导入

import React, { useState } from "react";
import {
  Form,
  Button,
  Input,
  Segment,
  Header,
  Divider,
  List,
  Icon,
  Dropdown,
} from "semantic-ui-react";

// 导入配置加载器
import NodeConfigLoader from "../../NodeConfigLoader";
import ButtonField from "../../ButtonField"; // 请确保路径正确
import KVTableField from "../../KVTableField"; // 导入新的KVTableField组件
import CodeEditorField from "../../CodeEditorField";
import BranchConditionsField from "../../BranchConditionsField";
import MarkdownDocField from "../../MarkdownDocField";

// 变量自定义字段组件 - 使用 Semantic UI 组件
export const VariableObjectField = (props) => {
  const { formData = {}, onChange } = props;
  const [variableKey, setVariableKey] = useState("");
  const [variableValue, setVariableValue] = useState("");

  const handleAddVariable = () => {
    if (!variableKey.trim()) return;

    const updatedData = {
      ...formData,
      [variableKey]: variableValue,
    };

    onChange(updatedData);
    setVariableKey("");
    setVariableValue("");
  };

  const handleRemoveVariable = (key) => {
    const updatedData = { ...formData };
    delete updatedData[key];
    onChange(updatedData);
  };

  return (
    <div>
      <Header as="h4">定义变量</Header>

      {/* 显示当前变量 */}
      {Object.entries(formData).length > 0 && (
        <Segment>
          <List divided relaxed>
            {Object.entries(formData).map(([key, value]) => (
              <List.Item key={key}>
                <List.Content floated="right">
                  <Button
                    negative
                    size="tiny"
                    icon="trash"
                    onClick={() => handleRemoveVariable(key)}
                  />
                </List.Content>
                <List.Content>
                  <List.Header>{key}</List.Header>
                  <List.Description>{value}</List.Description>
                </List.Content>
              </List.Item>
            ))}
          </List>
        </Segment>
      )}

      {/* 添加新变量 */}
      <Segment>
        <Form>
          <Form.Group widths="equal">
            <Form.Field>
              <label>变量名称</label>
              <Input
                placeholder="变量名称"
                value={variableKey}
                onChange={(e, { value }) => setVariableKey(value)}
              />
            </Form.Field>
            <Form.Field>
              <label>变量值</label>
              <Input
                placeholder="变量值"
                value={variableValue}
                onChange={(e, { value }) => setVariableValue(value)}
              />
            </Form.Field>
          </Form.Group>
          <Button
            primary
            fluid
            icon="plus"
            content="添加变量"
            onClick={handleAddVariable}
            disabled={!variableKey.trim()}
          />
        </Form>
      </Segment>
    </div>
  );
};

// 分支条件自定义字段组件 - 使用 Semantic UI 组件
export const SwitchCasesField = (props) => {
  const { formData = [], onChange } = props;
  const [newCondition, setNewCondition] = useState("");

  const handleAddCase = () => {
    const conditionText = newCondition.trim()
      ? newCondition
      : `条件分支${formData.length + 1}`;

    const updatedCases = [
      ...formData,
      { condition: conditionText, target: "" },
    ];

    onChange(updatedCases);
    setNewCondition("");
  };

  const handleRemoveCase = (index) => {
    const updatedCases = [...formData];
    updatedCases.splice(index, 1);
    onChange(updatedCases);
  };

  const handleUpdateCase = (index, condition) => {
    const updatedCases = [...formData];
    updatedCases[index] = { ...updatedCases[index], condition };
    onChange(updatedCases);
  };

  return (
    <div>
      <Header as="h4">分支条件列表</Header>

      {formData.length > 0 && (
        <Segment>
          <List divided relaxed>
            {formData.map((caseItem, index) => (
              <List.Item key={index}>
                <List.Content floated="right">
                  <Button
                    negative
                    size="tiny"
                    icon="trash"
                    onClick={() => handleRemoveCase(index)}
                  />
                </List.Content>
                <List.Content>
                  <Input
                    fluid
                    value={caseItem.condition}
                    onChange={(e, { value }) => handleUpdateCase(index, value)}
                  />
                </List.Content>
              </List.Item>
            ))}
          </List>
        </Segment>
      )}

      <Segment>
        <Form>
          <Form.Group>
            <Form.Field width={12}>
              <Input
                fluid
                placeholder="请输入新的分支条件..."
                value={newCondition}
                onChange={(e, { value }) => setNewCondition(value)}
              />
            </Form.Field>
            <Form.Field width={4}>
              <Button
                primary
                fluid
                icon="plus"
                content="添加"
                onClick={handleAddCase}
              />
            </Form.Field>
          </Form.Group>
        </Form>
      </Segment>
    </div>
  );
};

// 自定义文本字段小部件，支持自定义样式
export const CustomTextWidget = (props) => {
  const {
    id,
    value,
    required,
    disabled,
    readonly,
    onChange,
    options,
    schema,
    label,
    placeholder,
    uiSchema,
  } = props;

  // 正确获取placeholder - 检查多种可能的来源
  const effectivePlaceholder =
    placeholder || // 直接从props获取
    options?.placeholder || // 从options获取
    uiSchema?.["ui:placeholder"] || // 从uiSchema获取
    "";

  // 检查是否有自定义样式
  const customStyle = options?.customStyle || {};

  const handleChange = (e, data) => {
    onChange(data.value);
  };

  return (
    <Form.Field required={required}>
      {label && <label htmlFor={id}>{label}</label>}
      <Input
        id={id}
        value={value || ""}
        placeholder={effectivePlaceholder}
        disabled={disabled}
        readOnly={readonly}
        onChange={handleChange}
        fluid
        style={customStyle}
      />
    </Form.Field>
  );
};

// 自定义文本区域小部件，支持自定义样式
export const CustomTextareaWidget = (props) => {
  const {
    id,
    value,
    required,
    disabled,
    readonly,
    onChange,
    options,
    schema,
    label,
    placeholder,
    uiSchema,
  } = props;

  const safeValue =
    value === null || value === undefined || typeof value === "object"
      ? ""
      : String(value);

  // 正确获取placeholder - 检查多种可能的来源
  const effectivePlaceholder =
    placeholder || // 直接从props获取
    options?.placeholder || // 从options获取
    uiSchema?.["ui:placeholder"] || // 从uiSchema获取
    "";

  // 检查是否有自定义样式
  const customStyle = options?.customStyle || {};

  // 处理变更
  const handleChange = (e, data) => {
    onChange(data.value);
  };

  // 获取行数配置，默认为5行
  const rows = options?.rows || 5;

  return (
    <Form.Field required={required}>
      {label && <label htmlFor={id}>{label}</label>}
      <Form.TextArea
        id={id}
        value={safeValue}
        placeholder={effectivePlaceholder}
        disabled={disabled}
        readOnly={readonly}
        onChange={handleChange}
        rows={rows}
        style={customStyle}
      />
    </Form.Field>
  );
};

// 自定义选择字段小部件，修复onFocus错误
export const CustomSelectWidget = (props) => {
  const {
    id,
    options,
    value,
    required,
    disabled,
    readonly,
    onChange,
    onBlur,
    onFocus,
    label,
    placeholder,
  } = props;

  // 将枚举选项转换为Dropdown选项格式
  const dropdownOptions = options.enumOptions.map(({ value, label }) => ({
    key: value,
    text: label,
    value: value,
  }));

  // 修复：安全处理onFocus事件
  const handleFocus = () => {
    if (onFocus) {
      // 不传递可能导致undefined错误的参数
      onFocus(id, "");
    }
  };

  return (
    <Form.Field required={required}>
      {label && <label htmlFor={id}>{label}</label>}
      <Dropdown
        id={id}
        fluid
        selection
        options={dropdownOptions}
        value={value}
        placeholder={placeholder || "请选择..."}
        disabled={disabled || readonly}
        onChange={(e, { value }) => onChange(value)}
        onBlur={() => onBlur && onBlur(id, value)}
        onFocus={handleFocus}
      />
    </Form.Field>
  );
};

// 使用NodeConfigLoader提供节点配置，同时保持原有API兼容性
export const nodeSchemaConfigs = new Proxy(
  {},
  {
    get: (target, prop) => {
      if (typeof prop === "string") {
        const nodeConfig = NodeConfigLoader.getNodeConfig(prop);
        if (nodeConfig) {
          return {
            schema: nodeConfig.schema || {},
            uiSchema: nodeConfig.uiSchema || {},
          };
        }
      }
      return undefined;
    },
    has: (target, prop) => {
      if (typeof prop === "string") {
        return NodeConfigLoader.getNodeConfig(prop) !== null;
      }
      return false;
    },
    ownKeys: () => {
      return NodeConfigLoader.getNodeTypes();
    },
  }
);

// 导出自定义字段组件和小部件
export const customFields = {
  VariableObjectField,
  SwitchCasesField,
  ButtonField, // 确保ButtonField正确注册
  KVTableField, // 添加新的KVTableField组件
  CodeEditorField,
  BranchConditionsField,
  MarkdownDocField,
};

export const customWidgets = {
  TextWidget: CustomTextWidget,
  TextareaWidget: CustomTextareaWidget,
  SelectWidget: CustomSelectWidget,
};



================================================================================
# 文件: src/components/fields/SwitchCasesField.js
# 行数: 81
================================================================================

import React, { useState } from "react";

const SwitchCasesField = (props) => {
  const { formData = [], onChange } = props;
  const [newCondition, setNewCondition] = useState("");

  const handleAddCase = () => {
    const conditionText = newCondition.trim()
      ? newCondition
      : `条件分支${formData.length + 1}`;

    const updatedCases = [
      ...formData,
      { condition: conditionText, target: "" },
    ];

    onChange(updatedCases);
    setNewCondition("");
  };

  const handleRemoveCase = (index) => {
    const updatedCases = [...formData];
    updatedCases.splice(index, 1);
    onChange(updatedCases);
  };

  const handleUpdateCase = (index, condition) => {
    const updatedCases = [...formData];
    updatedCases[index] = { ...updatedCases[index], condition };
    onChange(updatedCases);
  };

  return (
    <div className="form-group">
      <label>分支条件列表</label>

      {formData.map((caseItem, index) => (
        <div
          key={index}
          className="case-item"
          style={{ display: "flex", marginBottom: "8px", alignItems: "center" }}
        >
          <input
            type="text"
            value={caseItem.condition}
            onChange={(e) => handleUpdateCase(index, e.target.value)}
            style={{ flex: 1 }}
          />
          <button
            onClick={() => handleRemoveCase(index)}
            className="delete-button"
          >
            删除
          </button>
        </div>
      ))}

      <div
        style={{
          display: "flex",
          marginTop: "10px",
          alignItems: "center",
        }}
      >
        <input
          type="text"
          placeholder="请输入新的分支条件..."
          value={newCondition}
          onChange={(e) => setNewCondition(e.target.value)}
          style={{ flex: 1 }}
        />
        <button onClick={handleAddCase} className="add-button">
          添加
        </button>
      </div>
    </div>
  );
};

export default SwitchCasesField;



================================================================================
# 文件: src/components/fields/VariableObjectField.js
# 行数: 78
================================================================================

import React, { useState } from "react";

const VariableObjectField = (props) => {
  const { formData = {}, onChange } = props;
  const [variableKey, setVariableKey] = useState("");
  const [variableValue, setVariableValue] = useState("");

  const handleAddVariable = () => {
    if (!variableKey.trim()) return;

    const updatedData = {
      ...formData,
      [variableKey]: variableValue,
    };

    onChange(updatedData);
    setVariableKey("");
    setVariableValue("");
  };

  const handleRemoveVariable = (key) => {
    const updatedData = { ...formData };
    delete updatedData[key];
    onChange(updatedData);
  };

  return (
    <div className="form-group">
      <label>定义变量</label>

      {/* Display current variables */}
      {Object.entries(formData).map(([key, value]) => (
        <div
          key={key}
          className="variable-item"
          style={{ display: "flex", marginBottom: "8px" }}
        >
          <div style={{ flex: 2, marginRight: "8px", fontWeight: "bold" }}>
            {key}:
          </div>
          <div style={{ flex: 3 }}>{value}</div>
          <button
            onClick={() => handleRemoveVariable(key)}
            className="delete-button"
          >
            删除
          </button>
        </div>
      ))}

      {/* Add new variable */}
      <div style={{ marginTop: "10px" }}>
        <div style={{ display: "flex", marginBottom: "8px" }}>
          <input
            type="text"
            placeholder="变量名称"
            value={variableKey}
            onChange={(e) => setVariableKey(e.target.value)}
            style={{ flex: 1, marginRight: "8px" }}
          />
          <input
            type="text"
            placeholder="变量值"
            value={variableValue}
            onChange={(e) => setVariableValue(e.target.value)}
            style={{ flex: 1 }}
          />
        </div>
        <button onClick={handleAddVariable} className="add-full-button">
          添加变量
        </button>
      </div>
    </div>
  );
};

export default VariableObjectField;

